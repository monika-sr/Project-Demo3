{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "fng-dtf-acrp-dev"
        },
        "RestService_CostManagement_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://management.azure.com"
        },
        "AzureDataLakeStorage_actsadlsg2_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://fngsaacrpdev.dfs.core.windows.net"
        },
        "ISFRatio_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://isfratio.blob.core.windows.net/"
        },
        "RestResource_BillingSummary_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://consumption.azure.com/"
        },
        "AzureKeyVault1_properties_typeProperties_baseUrl": {
            "type": "string",
            "defaultValue": "https://kv-acrp-dev.vault.azure.net/"
        },
        "AzureDataExplorer_ACTSADX01_CostManagement_properties_typeProperties_endpoint": {
            "type": "string",
            "defaultValue": "https://fngadxacrpdev.eastus2.kusto.windows.net"
        },
        "AzureDataExplorer_ACTSADX01_CostManagement_properties_typeProperties_database": {
            "type": "string",
            "defaultValue": "CostAnalysis"
        },
        "Dev_OR_SandBox_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://fngsaacrpdev.dfs.core.windows.net"
        },
        "SFTP_properties_typeProperties_host": {
            "type": "string",
            "defaultValue": "filetransfer.fnf.com"
        },
        "SFTP_properties_typeProperties_userName": {
            "type": "string",
            "defaultValue": "azcostrep-np-sftp"
        },
        "Restsvc_CostManagement_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://management.azure.com"
        },
        "Restsvc_CostManagement_properties_typeProperties_servicePrincipalId": {
            "type": "string",
            "defaultValue": "11fcdb21-0cd8-43f0-99cf-849ffedc9a3b"
        },
        "Restsvc_CostManagement_properties_typeProperties_tenant": {
            "type": "string",
            "defaultValue": "2129e8df-927d-4b1f-a761-d556b735c8c0"
        },
        "Restsvc_CostManagement_properties_typeProperties_aadResourceId": {
            "type": "string",
            "defaultValue": "https://management.azure.com"
        },
        "RetailPrices_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://prices.azure.com/api/retail/prices"
        },
        "RetailPrices_properties_typeProperties_servicePrincipalId": {
            "type": "string",
            "defaultValue": "11fcdb21-0cd8-43f0-99cf-849ffedc9a3b"
        },
        "RetailPrices_properties_typeProperties_tenant": {
            "type": "string",
            "defaultValue": "2129e8df-927d-4b1f-a761-d556b735c8c0"
        },
        "RetailPrices_properties_typeProperties_aadResourceId": {
            "type": "string",
            "defaultValue": "https://prices.azure.com/api/retail/prices"
        },
        "Billing API - Monthly_properties_Billing API_parameters_p_LookBackInDay": {
            "type": "string",
            "defaultValue": "3"
        },
        "Billing API - Monthly_properties_Billing API_parameters_p_BillingIds": {
            "type": "array",
            "defaultValue": [
                {
                    "BillingID": "46132814",
                    "KeyVaultURLForAPIKey": "https://kv-acrp-dev.vault.azure.net/secrets/APIKey-46132814/997864aa1b904061bd8a229e52b56ea4"
                }
            ]
        },
        "Billing API - Monthly_properties_Billing API_parameters_p_containername": {
            "type": "string",
            "defaultValue": "azure-cost-metric-data"
        },
        "Billing API - Monthly_properties_Billing API_parameters_p_BeginDate": {
            "type": "string",
            "defaultValue": "NA"
        },
        "Billing API - Monthly_properties_Billing API_parameters_p_EndDate": {
            "type": "string",
            "defaultValue": "NA"
        },
        "Billing API - Monthly_properties_Billing API_parameters_p_BatchType": {
            "type": "string",
            "defaultValue": "Batch"
        },
        "Billing API - Daily_properties_Billing API_parameters_p_LookBackInDay": {
            "type": "string",
            "defaultValue": "3"
        },
        "Billing API - Daily_properties_Billing API_parameters_p_BillingIds": {
            "type": "array",
            "defaultValue": [
                {
                    "BillingID": "46132814",
                    "KeyVaultURLForAPIKey": "https://kv-acrp-dev.vault.azure.net/secrets/APIKey-46132814/997864aa1b904061bd8a229e52b56ea4"
                }
            ]
        },
        "Billing API - Daily_properties_Billing API_parameters_p_containername": {
            "type": "string",
            "defaultValue": "azure-cost-metric-data"
        },
        "Billing API - Daily_properties_Billing API_parameters_p_BeginDate": {
            "type": "string",
            "defaultValue": "NA"
        },
        "Billing API - Daily_properties_Billing API_parameters_p_EndDate": {
            "type": "string",
            "defaultValue": "NA"
        },
        "Billing API - Daily_properties_Billing API_parameters_p_BatchType": {
            "type": "string",
            "defaultValue": "Daily"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/RestService_CostManagement')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('RestService_CostManagement_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Anonymous"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage_actsadlsg2')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "[parameters('AzureDataLakeStorage_actsadlsg2_properties_typeProperties_url')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ISFRatio')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "HttpServer",
                "typeProperties": {
                    "url": "[parameters('ISFRatio_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Anonymous"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestResource_BillingSummary')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('RestResource_BillingSummary_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Anonymous"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureKeyVault",
                "typeProperties": {
                    "baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureDataExplorer_ACTSADX01_CostManagement')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureDataExplorer",
                "typeProperties": {
                    "endpoint": "[parameters('AzureDataExplorer_ACTSADX01_CostManagement_properties_typeProperties_endpoint')]",
                    "database": "[parameters('AzureDataExplorer_ACTSADX01_CostManagement_properties_typeProperties_database')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Dev_OR_SandBox')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "[parameters('Dev_OR_SandBox_properties_typeProperties_url')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/SFTP')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "GlobalScapeSFTP",
                "annotations": [],
                "type": "Sftp",
                "typeProperties": {
                    "host": "[parameters('SFTP_properties_typeProperties_host')]",
                    "port": 22,
                    "skipHostKeyValidation": true,
                    "authenticationType": "Basic",
                    "userName": "[parameters('SFTP_properties_typeProperties_userName')]",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "AzureKeyVault1",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "azcostrep-np-sftp"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Restsvc_CostManagement')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('Restsvc_CostManagement_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "AadServicePrincipal",
                    "servicePrincipalId": "[parameters('Restsvc_CostManagement_properties_typeProperties_servicePrincipalId')]",
                    "servicePrincipalKey": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "AzureKeyVault1",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "CostMGMT-SPN-Secret"
                    },
                    "tenant": "[parameters('Restsvc_CostManagement_properties_typeProperties_tenant')]",
                    "aadResourceId": "[parameters('Restsvc_CostManagement_properties_typeProperties_aadResourceId')]"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RetailPrices')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "RetailPrices",
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('RetailPrices_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "AadServicePrincipal",
                    "servicePrincipalId": "[parameters('RetailPrices_properties_typeProperties_servicePrincipalId')]",
                    "servicePrincipalKey": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "AzureKeyVault1",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "CostMGMT-SPN-Secret"
                    },
                    "tenant": "[parameters('RetailPrices_properties_typeProperties_tenant')]",
                    "aadResourceId": "[parameters('RetailPrices_properties_typeProperties_aadResourceId')]"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/JsonToCSV - ForeCast_AmortizedCost')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "linkedService": {
                                "referenceName": "AzureDataLakeStorage_actsadlsg2",
                                "type": "LinkedServiceReference"
                            },
                            "name": "ReadJsonFiles"
                        }
                    ],
                    "sinks": [
                        {
                            "linkedService": {
                                "referenceName": "AzureDataLakeStorage_actsadlsg2",
                                "type": "LinkedServiceReference"
                            },
                            "name": "OutputToCSV"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "FlattenJson"
                        },
                        {
                            "name": "CreateColumnsFromArray"
                        },
                        {
                            "name": "RemoveProperties"
                        }
                    ],
                    "script": "parameters{\n\tcontainer as string,\n\tdirectory as string,\n\tfilename as string,\n\tJsonFolder as string,\n\tCsvFolder as string\n}\nsource(output(\n\t\tResourceGroup as string,\n\t\tSubscriptionID as string,\n\t\teTag as string,\n\t\tid as string,\n\t\tlocation as string,\n\t\tname as string,\n\t\tproperties as (columns as (name as string, type as string)[], nextLink as string, rows as string[][]),\n\t\ttype as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'json',\n\tfileSystem: ($container),\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:[(concat(concat(concat($directory,'/'),$JsonFolder),concat('/',$filename)))]) ~> ReadJsonFiles\nReadJsonFiles foldDown(unroll(properties.rows),\n\tmapColumn(\n\t\tResourceGroup,\n\t\tSubscriptionID,\n\t\tproperties = properties.rows\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenJson\nFlattenJson derive(Cost = at(properties,1),\n\t\tUsageDate = at(properties,2),\n\t\tCostStatus = at(properties,3),\n\t\tCurrency = at(properties,4)) ~> CreateColumnsFromArray\nCreateColumnsFromArray select(mapColumn(\n\t\tResourceGroup,\n\t\tSubscriptionID,\n\t\tCost,\n\t\tUsageDate,\n\t\tCostStatus,\n\t\tCurrency\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveProperties\nRemoveProperties sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tfileSystem: ($container),\n\tfolderPath: (concat(concat($directory,'/'),$CsvFolder)),\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tpartitionFileNames:['forecast.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> OutputToCSV"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SplitFilesByDay - Reservation')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "linkedService": {
                                "referenceName": "AzureDataLakeStorage_actsadlsg2",
                                "type": "LinkedServiceReference"
                            },
                            "name": "DataLakeSource"
                        }
                    ],
                    "sinks": [
                        {
                            "linkedService": {
                                "referenceName": "AzureDataLakeStorage_actsadlsg2",
                                "type": "LinkedServiceReference"
                            },
                            "name": "WriteMultipleFiles"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "CreateFileNameForSplitting"
                        }
                    ],
                    "script": "parameters{\n\tContainer as string,\n\tSourceFileName as string,\n\tSubFolder as string\n}\nsource(output(\n\t\tid as string,\n\t\tname as string,\n\t\ttype as string,\n\t\treservationOrderId as string,\n\t\treservationId as string,\n\t\tskuName as string,\n\t\tkind as string,\n\t\treservedHours as string,\n\t\tusageDate as string,\n\t\tusedHours as string,\n\t\tminUtilizationPercentage as string,\n\t\tavgUtilizationPercentage as string,\n\t\tmaxUtilizationPercentage as string,\n\t\tpurchasedQuantity as string,\n\t\tremainingQuantity as string,\n\t\ttotalReservedQuantity as string,\n\t\tusedQuantity as string,\n\t\tutilizedPercentage as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: ($Container),\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\twildcardPaths:[($SourceFileName)]) ~> DataLakeSource\nDataLakeSource derive(filename = substring(toString(toDate(usageDate)),1,4)+'/'+substring(toString(toDate(usageDate)),6,2)+'/'+substring(toString(toDate(usageDate)),9,2)+'/'+$SubFolder+'/Utilization_'+toString(toDate(usageDate))+'.csv') ~> CreateFileNameForSplitting\nCreateFileNameForSplitting sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tfileSystem: ($Container),\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\trowUrlColumn:'filename',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: []) ~> WriteMultipleFiles"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/JsonToCSV - ForeCast')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "linkedService": {
                                "referenceName": "AzureDataLakeStorage_actsadlsg2",
                                "type": "LinkedServiceReference"
                            },
                            "name": "ReadJsonFiles"
                        }
                    ],
                    "sinks": [
                        {
                            "linkedService": {
                                "referenceName": "AzureDataLakeStorage_actsadlsg2",
                                "type": "LinkedServiceReference"
                            },
                            "name": "OutputToCSV"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "FlattenJson"
                        },
                        {
                            "name": "CreateColumnsFromArray"
                        },
                        {
                            "name": "RemoveProperties"
                        }
                    ],
                    "script": "parameters{\n\tcontainer as string,\n\tdirectory as string,\n\tfilename as string,\n\tJsonFolder as string,\n\tCsvFolder as string\n}\nsource(output(\n\t\tResourceGroup as string,\n\t\tSubscriptionID as string,\n\t\teTag as string,\n\t\tid as string,\n\t\tlocation as string,\n\t\tname as string,\n\t\tproperties as (columns as (name as string, type as string)[], nextLink as string, rows as string[][]),\n\t\ttype as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'json',\n\tfileSystem: ($container),\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:[(concat(concat(concat($directory,'/'),$JsonFolder),concat('/',$filename)))]) ~> ReadJsonFiles\nReadJsonFiles foldDown(unroll(properties.rows),\n\tmapColumn(\n\t\tResourceGroup,\n\t\tSubscriptionID,\n\t\tproperties = properties.rows\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenJson\nFlattenJson derive(Cost = at(properties,1),\n\t\tUsageDate = at(properties,2),\n\t\tCostStatus = at(properties,3),\n\t\tCurrency = at(properties,4)) ~> CreateColumnsFromArray\nCreateColumnsFromArray select(mapColumn(\n\t\tResourceGroup,\n\t\tSubscriptionID,\n\t\tCost,\n\t\tUsageDate,\n\t\tCostStatus,\n\t\tCurrency\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveProperties\nRemoveProperties sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tfileSystem: ($container),\n\tfolderPath: (concat(concat($directory,'/'),$CsvFolder)),\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tpartitionFileNames:['forecast.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> OutputToCSV"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SplitFilesByDay - Usage')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "linkedService": {
                                "referenceName": "AzureDataLakeStorage_actsadlsg2",
                                "type": "LinkedServiceReference"
                            },
                            "name": "DataLakeSource"
                        }
                    ],
                    "sinks": [
                        {
                            "linkedService": {
                                "referenceName": "AzureDataLakeStorage_actsadlsg2",
                                "type": "LinkedServiceReference"
                            },
                            "name": "WriteMultipleFiles"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "CreateFileNameForSplitting"
                        }
                    ],
                    "script": "parameters{\n\tContainer as string,\n\tSourceFileName as string,\n\tUsageFolderName as string\n}\nsource(output(\n\t\tkind as string,\n\t\tid as string,\n\t\tname as string,\n\t\ttype as string,\n\t\tbillingAccountId as string,\n\t\tbillingAccountName as string,\n\t\tbillingPeriodStartDate as string,\n\t\tbillingPeriodEndDate as string,\n\t\tbillingProfileId as string,\n\t\tbillingProfileName as string,\n\t\taccountOwnerId as string,\n\t\taccountName as string,\n\t\tsubscriptionId as string,\n\t\tsubscriptionName as string,\n\t\tdate as string,\n\t\tproduct as string,\n\t\tpartNumber as string,\n\t\tmeterId as string,\n\t\tquantity as string,\n\t\teffectivePrice as string,\n\t\tcost as string,\n\t\tunitPrice as string,\n\t\tbillingCurrency as string,\n\t\tresourceLocation as string,\n\t\tconsumedService as string,\n\t\tresourceId as string,\n\t\tresourceName as string,\n\t\tinvoiceSection as string,\n\t\tresourceGroup as string,\n\t\tofferId as string,\n\t\tisAzureCreditEligible as string,\n\t\tpublisherType as string,\n\t\tchargeType as string,\n\t\tfrequency as string,\n\t\tmeterDetails as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: ($Container),\n\tcolumnDelimiter: '\\t',\n\tescapeChar: '\\\\',\n\tquoteChar: '',\n\tcolumnNamesAsHeader: true,\n\twildcardPaths:[($SourceFileName)]) ~> DataLakeSource\nDataLakeSource derive(filename = substring(toString(toDate(date)),1,4)+'/'+substring(toString(toDate(date)),6,2)+'/'+substring(toString(toDate(date)),9,2)+'/'+$UsageFolderName+'/'+lower(billingAccountId)+'_usage.tsv') ~> CreateFileNameForSplitting\nCreateFileNameForSplitting sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tfileSystem: ($Container),\n\tcolumnDelimiter: '\\t',\n\tescapeChar: '\\\\',\n\tquoteChar: '',\n\tcolumnNamesAsHeader: true,\n\trowUrlColumn:'filename',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: []) ~> WriteMultipleFiles"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/dataflowFlattenJson_Credit')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "linkedService": {
                                "referenceName": "AzureDataLakeStorage_actsadlsg2",
                                "type": "LinkedServiceReference"
                            },
                            "name": "ReadJsonFile"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "CSVText",
                                "type": "DatasetReference"
                            },
                            "name": "OutputcsvFile"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "FlattenJson"
                        }
                    ],
                    "script": "parameters{\n\tcontainer as string,\n\tdirectory as string,\n\tfilename as string\n}\nsource(output(\n\t\tadjustmentDetails as (name as string, value as double)[],\n\t\tadjustments as double,\n\t\tazureMarketplaceServiceCharges as double,\n\t\tbalanceDeduct as double,\n\t\tbeginningBalance as double,\n\t\tbillingPeriodEnd as date,\n\t\tbillingPeriodId as integer,\n\t\tbillingPeriodStart as date,\n\t\tchargesBilledSeparately as double,\n\t\tcurrencyCode as string,\n\t\tendingBalance as double,\n\t\tid as string,\n\t\tnewPurchases as double,\n\t\tnewPurchasesDetails as string,\n\t\tserviceOverage as double,\n\t\ttotalOverage as double,\n\t\ttotalUsage as double,\n\t\tutilized as double\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'json',\n\tfileSystem: ($container),\n\tfolderPath: (concat($directory, '/json')),\n\tfileName: (concat($filename, '.json')),\n\tdocumentForm: 'documentPerLine') ~> ReadJsonFile\nReadJsonFile foldDown(unroll(adjustmentDetails),\n\tmapColumn(\n\t\tname = adjustmentDetails.name,\n\t\tvalue = adjustmentDetails.value,\n\t\tid,\n\t\tbillingPeriodId,\n\t\tcurrencyCode,\n\t\tbeginningBalance,\n\t\tendingBalance,\n\t\tnewPurchases,\n\t\tadjustments,\n\t\tutilized,\n\t\tserviceOverage,\n\t\tchargesBilledSeparately,\n\t\ttotalOverage,\n\t\ttotalUsage,\n\t\tazureMarketplaceServiceCharges,\n\t\tbillingPeriodStart,\n\t\tbillingPeriodEnd,\n\t\tbalanceDeduct\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenJson\nFlattenJson sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.csv'))],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> OutputcsvFile"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]",
                "[concat(variables('factoryId'), '/datasets/CSVText')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/dataflowFlattenJSON')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "VMMetricsJSON_v3",
                                "type": "DatasetReference"
                            },
                            "name": "jsonFile"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "VMMetricsCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sinkCSVFile"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "FlattenJSONFile"
                        }
                    ],
                    "script": "parameters{\n\tsource_dirname as string,\n\tfilename as string,\n\tsink_dirname as string\n}\nsource(output(\n\t\tcost as boolean,\n\t\tinterval as string,\n\t\tnamespace as string,\n\t\tresourceregion as string,\n\t\ttimespan as string,\n\t\tvalue as (displayDescription as string, errorCode as string, id as string, name as (localizedValue as string, value as string), timeseries as (data as (average as double, timeStamp as string)[], metadatavalues as string[])[], type as string, unit as string)[]\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:[(concat($source_dirname, \"/*.*\" )\n)]) ~> jsonFile\njsonFile foldDown(unroll(value.timeseries.data),\n\tmapColumn(\n\t\tcost,\n\t\tinterval,\n\t\tnamespace,\n\t\tresourceregion,\n\t\ttimespan,\n\t\tdisplayDescription = value.displayDescription,\n\t\terrorCode = value.errorCode,\n\t\tid = value.id,\n\t\tname = value.name.localizedValue,\n\t\tvalue = value.name.value,\n\t\taverage = value.timeseries.data.average,\n\t\ttimeStamp = value.timeseries.data.timeStamp,\n\t\ttype = value.type,\n\t\tunit = value.unit\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenJSONFile\nFlattenJSONFile sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename))],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tpartitionBy('hash', 1)) ~> sinkCSVFile"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/VMMetricsJSON_v3')]",
                "[concat(variables('factoryId'), '/datasets/VMMetricsCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API - Monthly')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Monthly Schedule",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "Billing API",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "p_LookBackInDay": "[parameters('Billing API - Monthly_properties_Billing API_parameters_p_LookBackInDay')]",
                            "p_BillingIds": "[parameters('Billing API - Monthly_properties_Billing API_parameters_p_BillingIds')]",
                            "p_containername": "[parameters('Billing API - Monthly_properties_Billing API_parameters_p_containername')]",
                            "p_BeginDate": "[parameters('Billing API - Monthly_properties_Billing API_parameters_p_BeginDate')]",
                            "p_EndDate": "[parameters('Billing API - Monthly_properties_Billing API_parameters_p_EndDate')]",
                            "p_BatchType": "[parameters('Billing API - Monthly_properties_Billing API_parameters_p_BatchType')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Month",
                        "interval": 1,
                        "startTime": "2024-03-05T11:11:00Z",
                        "timeZone": "UTC",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                6
                            ],
                            "monthDays": [
                                5,
                                15
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/Billing API')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API - Daily')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Downloads Usage Data, Reservation Data and Credits Data",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "Billing API",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "p_LookBackInDay": "[parameters('Billing API - Daily_properties_Billing API_parameters_p_LookBackInDay')]",
                            "p_BillingIds": "[parameters('Billing API - Daily_properties_Billing API_parameters_p_BillingIds')]",
                            "p_containername": "[parameters('Billing API - Daily_properties_Billing API_parameters_p_containername')]",
                            "p_BeginDate": "[parameters('Billing API - Daily_properties_Billing API_parameters_p_BeginDate')]",
                            "p_EndDate": "[parameters('Billing API - Daily_properties_Billing API_parameters_p_EndDate')]",
                            "p_BatchType": "[parameters('Billing API - Daily_properties_Billing API_parameters_p_BatchType')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-21T05:05:00Z",
                        "timeZone": "UTC",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                1
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/Billing API')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestResource_VMMetrics_v2')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "RestService_CostManagement",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "p_RelativeURL": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "VM Metrics DS"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "@dataset().p_RelativeURL",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/RestService_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Flex_ISFRatio')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "ISFRatio",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "HttpServerLocation",
                        "relativeUrl": "isfratio/ISFRatio.csv"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/ISFRatio')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/APISubscriptionListCSV')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "APISubscriptionListCSV.csv",
                        "folderPath": "VM",
                        "fileSystem": "config"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "name",
                        "type": "String"
                    },
                    {
                        "name": "id",
                        "type": "String"
                    },
                    {
                        "name": "type",
                        "type": "String"
                    },
                    {
                        "name": "location",
                        "type": "String"
                    },
                    {
                        "name": "vmId",
                        "type": "String"
                    },
                    {
                        "name": "resourceId",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SubscriptionTags')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "filename": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Billing DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "fileSystem": "referencedata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestResource_BillingSummary')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "RestResource_BillingSummary",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "relativeurl": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "@dataset().relativeurl",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/RestResource_BillingSummary')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestResource_VMs')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "RestService_CostManagement",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "p_relativeURL": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "VM Metrics DS"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "@dataset().p_relativeURL",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/RestService_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DevDataSet_DataCopy')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Dev_OR_SandBox",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "container": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "DataCopy"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileSystem": {
                            "value": "@dataset().container",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/Dev_OR_SandBox')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestResource_Subscriptions')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "RestService_CostManagement",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "p_relativeURL": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "VM Metrics DS"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "@dataset().p_relativeURL",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/RestService_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestResource_VMMetrics_v1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "RestService_CostManagement",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "p_RelativeURL": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "VM Metrics DS"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "@dataset().p_RelativeURL",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/RestService_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ADX_ExcelSource')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Container": {
                        "type": "string",
                        "defaultValue": "costoptimization"
                    },
                    "FileName": {
                        "type": "string",
                        "defaultValue": "ProductMeterCategory.xlsx"
                    },
                    "WorkSheetName": {
                        "type": "string",
                        "defaultValue": "ProductMeterCategory"
                    }
                },
                "folder": {
                    "name": "FNFI_Billing"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": {
                        "value": "@dataset().WorkSheetName",
                        "type": "Expression"
                    },
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().FileName",
                            "type": "Expression"
                        },
                        "container": {
                            "value": "@dataset().Container",
                            "type": "Expression"
                        }
                    },
                    "firstRowAsHeader": true
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/VMMetricsJSON_UnitTest')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "VM Metrics DS"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "DevTest",
                        "fileSystem": "metricsdata"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/src_BillingDataCSV')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "ContainerName": {
                        "type": "string"
                    },
                    "DirectoryName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Billing DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "*",
                        "folderPath": {
                            "value": "@dataset().DirectoryName",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().ContainerName",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/src_BillingDataTSV')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "ContainerName": {
                        "type": "string"
                    },
                    "DirectoryName": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Billing DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().FileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().DirectoryName",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().ContainerName",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": "\t",
                    "escapeChar": "",
                    "firstRowAsHeader": true,
                    "quoteChar": ""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/BillingSummary')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "FilePath": {
                        "type": "string"
                    },
                    "container": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().FilePath",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().container",
                            "type": "Expression"
                        }
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ITSMOCostsMapping')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "CostMappingFileName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Billing DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().CostMappingFileName",
                            "type": "Expression"
                        },
                        "fileSystem": "referencedata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "ResourceGroupFQN",
                        "type": "String"
                    },
                    {
                        "name": "SubscritionName",
                        "type": "String"
                    },
                    {
                        "name": "SubscritionGuid",
                        "type": "String"
                    },
                    {
                        "name": "ResourceGroupName",
                        "type": "String"
                    },
                    {
                        "name": "HostingService",
                        "type": "String"
                    },
                    {
                        "name": "AppCode1",
                        "type": "String"
                    },
                    {
                        "name": "AppName",
                        "type": "String"
                    },
                    {
                        "name": "CostCenter",
                        "type": "String"
                    },
                    {
                        "name": "LineOfBusiness",
                        "type": "String"
                    },
                    {
                        "name": "MigrationStatus",
                        "type": "String"
                    },
                    {
                        "name": "CoreSubscription",
                        "type": "String"
                    },
                    {
                        "name": "PrevFISSpend",
                        "type": "String"
                    },
                    {
                        "name": "IsApplication",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/VMMetricsJSON_v3')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "dirname": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "VM Metrics DS"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": {
                            "value": "json/@{dataset().dirname}",
                            "type": "Expression"
                        },
                        "fileSystem": "metricsdata"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/VirtualMachines_RESTOutput')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "filename": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "VM Metrics DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": "VM",
                        "fileSystem": "config"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "name",
                        "type": "String"
                    },
                    {
                        "name": "id",
                        "type": "String"
                    },
                    {
                        "name": "type",
                        "type": "String"
                    },
                    {
                        "name": "location",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/src_BillingDataTSV_Marketplace')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "ContainerName": {
                        "type": "string"
                    },
                    "DirectoryName": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Billing DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().FileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().DirectoryName",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().ContainerName",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": "\t",
                    "escapeChar": "\"",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/VMMetricsCSV')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "dirname": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "VM Metrics DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": {
                            "value": "@dataset().dirname",
                            "type": "Expression"
                        },
                        "fileSystem": "metricsdata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DestinationDataset_DataCopy')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "container": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "DataCopy"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileSystem": {
                            "value": "@dataset().container",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/BillingDataCSV')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "sink_filename": {
                        "type": "string"
                    },
                    "dir_name": {
                        "type": "string"
                    },
                    "container_name": {
                        "type": "string",
                        "defaultValue": "billingdata"
                    }
                },
                "folder": {
                    "name": "Billing DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().sink_filename",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().dir_name",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().container_name",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/VMMetricsData')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "VM Metrics DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "vmusagemetrics.csv",
                        "fileSystem": "metricsdata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/BillingData')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "sink_filename": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Billing DS"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().sink_filename",
                            "type": "Expression"
                        },
                        "folderPath": "DevTest",
                        "fileSystem": "billingdata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/VMMetricsJSON_v4')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "dirname": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "VM Metrics DS"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "json/@{dataset().dirname}",
                            "type": "Expression"
                        },
                        "fileSystem": "metricsdata"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/CSVText')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Container": {
                        "type": "string"
                    },
                    "directory": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "FNFI_Billing"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "folderPath": {
                            "value": "@dataset().directory",
                            "type": "Expression"
                        },
                        "container": {
                            "value": "@dataset().Container",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\"",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/VirtualMachines_RESTOutput_JSON')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "VM Metrics DS"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "APIVMList.json",
                        "folderPath": "VM",
                        "fileSystem": "config"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/FolderValidation')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "FilePath": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileSystem": {
                            "value": "@dataset().FilePath",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adx_VMMetrics')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "tablename": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "VM Metrics DS"
                },
                "annotations": [],
                "type": "AzureDataExplorerTable",
                "schema": [],
                "typeProperties": {
                    "table": {
                        "value": "@dataset().tablename",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adx_BillingData')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "TableName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Billing DS"
                },
                "annotations": [],
                "type": "AzureDataExplorerTable",
                "schema": [],
                "typeProperties": {
                    "table": {
                        "value": "@dataset().TableName",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/CSVText_referencedata')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_actsadlsg2",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Container": {
                        "type": "string"
                    },
                    "directory": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "FNFI_Billing"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().directory",
                            "type": "Expression"
                        },
                        "container": {
                            "value": "@dataset().Container",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\"",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_actsadlsg2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ADX_Generic')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "TableName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "AzureDataExplorerTable",
                "schema": [],
                "typeProperties": {
                    "table": {
                        "value": "@dataset().TableName",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adx_BillingConfig')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Billing DS"
                },
                "annotations": [],
                "type": "AzureDataExplorerTable",
                "schema": [],
                "typeProperties": {
                    "table": "BillingConfig"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adx_Subscriptions')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureDataExplorerTable",
                "schema": [],
                "typeProperties": {
                    "table": "APISubscriptionList"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adx_Staging_BillingConfig')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Billing DS"
                },
                "annotations": [],
                "type": "AzureDataExplorerTable",
                "schema": [],
                "typeProperties": {
                    "table": "Staging_BillingConfig"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adx_SubscriptionTags')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Billing DS"
                },
                "annotations": [],
                "type": "AzureDataExplorerTable",
                "schema": [],
                "typeProperties": {
                    "table": "Staging_SubscriptionTags"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RetailPrices')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "RetailPrices",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "p_relativeURL": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {},
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/RetailPrices')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adx_APIVMList')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureDataExplorerTable",
                "schema": [],
                "typeProperties": {
                    "table": "APIVMList"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SFTP_ExcelSource')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "SFTP",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Container": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data/referencedata"
                    },
                    "FileName": {
                        "type": "string",
                        "defaultValue": "ITSMOCostMapping.xlsx"
                    },
                    "WorkSheetName": {
                        "type": "string",
                        "defaultValue": "LOBLookUp"
                    }
                },
                "folder": {
                    "name": "FNFI_Billing"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": {
                        "value": "@dataset().WorkSheetName",
                        "type": "Expression"
                    },
                    "location": {
                        "type": "SftpLocation",
                        "fileName": {
                            "value": "@dataset().FileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().Container",
                            "type": "Expression"
                        }
                    },
                    "firstRowAsHeader": true
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/SFTP')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestResource_BillingData')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Restsvc_CostManagement",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "p_RelativeURL": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Billing DS"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "@dataset().p_RelativeURL",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/Restsvc_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SFTP_CSVText_referencedata')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "SFTP",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Container": {
                        "type": "string"
                    },
                    "directory": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "FNFI_Billing"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "SftpLocation",
                        "fileName": {
                            "value": "@dataset().directory",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().Container",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\"",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/SFTP')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RefershPBITable_Original')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Billing_Config_Extended",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace BillingConfig_Extended <|\nlet UnDefined = 'undefined';\nlet System = 'system';\nlet Subscription = materialize(\nBillingData\n| project subscriptionId, resourceGroup = iff(isempty(resourceGroup),System,resourceGroup)\n| distinct subscriptionId, resourceGroup\n| sort by subscriptionId asc, resourceGroup asc\n| extend PK_Subscription= row_number()\n| project subscriptionId, resourceGroup,PK_Subscription\n);\nlet SubscriptionName = materialize(BillingData \n| summarize arg_max(billingDate,subscriptionName, billingAccountId, billingAccountName, accountName, accountOwnerId) by subscriptionId \n| project-away billingDate);\nlet ResourceTag = materialize (BillingData\n| where billingDate > ago(180d)\n| where isnotempty(tags)\n| extend RGFQN = strcat(subscriptionId,'/',resourceGroup)\n| summarize arg_max(billingDate, subscriptionId, resourceGroup) by RGFQN, tags\n| extend tag = parse_json(tags)\n| project RGFQN,subscriptionId, resourceGroup, costcenter=tostring(tag.cost_center), servicetowerid=tostring(tag.servicetowerid), appcode=tostring(tag.app_code1), \nappid=tostring(tag.app_id), parent_hostingid=tostring(tag.parent_hostingid), lineofbusiness=tostring(tag.lineofbusinessid),financelob=tostring(tag.financelob), billingDate\n| extend appcodeparsed=split(appcode, '|')[0]\n| extend appcode=tolong(appcodeparsed), parent_hostingid=toreal(parent_hostingid), lineofbusiness=toint(lineofbusiness), financelob=toint(financelob) \n| project-away appcodeparsed\n| where isnotempty(costcenter) and isnotnull(appcode) and isnotempty(appid) and isnotnull(parent_hostingid) and isnotnull(lineofbusiness) and isnotnull(financelob)\n| extend lineofbusiness=tostring(lineofbusiness), financelob=tostring(financelob)\n| extend financelob=iif(isempty(financelob),UnDefined,financelob)\n| summarize Max_BillingDate=max(billingDate) by costcenter, servicetowerid, appcode, appid, parent_hostingid,lineofbusiness,financelob,subscriptionId, resourceGroup,RGFQN\n| sort by RGFQN, Max_BillingDate, lineofbusiness, appcode, appid, parent_hostingid, servicetowerid, costcenter,financelob desc\n| extend Rank=row_number(1, prev(RGFQN) != RGFQN)\n| where Rank ==  1\n| join kind=inner HostingLKP on $left.parent_hostingid == $right.ParentHostingSubHostingID\n| join kind=inner LOB on $left.lineofbusiness==$right.ID\n| project Environment=tolower(SubHostingServiceName), AppCode = tostring(appcode), AppName = appid, LineOfBusiness = ShortName, IsApplication = iif(isnotempty(servicetowerid),false, true), subscriptionId, resourceGroup,financelob, Source = 'ResourceTag'\n);\nlet BillingConfigView = materialize(\n        BillingConfig\n    | project subscriptionId=tostring(SubscriptionGuid), \n    Environment= iif(isempty(HostingService),UnDefined,HostingService),\n    AppCode = iif(isempty(AppCode1),UnDefined,AppCode1),\n    AppName = iif(isempty(AppName),UnDefined,AppName),\n    resourceGroup=iff(isempty(ResourceGroupName),System, ResourceGroupName),\n    LineOfBusiness=iif(LineOfBusiness=='#n/a',UnDefined,LineOfBusiness),\n    financelob=iif(isempty(FinanceLOB),UnDefined,FinanceLOB),\n    IsApplication,\n    Source=\"Config\"\n    | distinct Environment,AppCode,AppName,LineOfBusiness,IsApplication,subscriptionId, resourceGroup,financelob,Source\n);\nlet TagandConfig = materialize(ResourceTag\n| union (\n    BillingConfigView | join kind=leftanti ResourceTag on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup\n));\nTagandConfig\n| union (\n    BillingData | distinct subscriptionId, resourceGroup\n    | extend resourceGroup=iff(isempty(resourceGroup),System,resourceGroup)\n    | join kind=leftanti TagandConfig on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup\n    | project Environment=UnDefined,AppCode=UnDefined,AppName=UnDefined,LineOfBusiness=UnDefined,IsApplication=true, subscriptionId, resourceGroup,financelob=UnDefined,Source='Usage'\n)\n| join kind=inner Subscription on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup\n| join kind=inner SubscriptionName on $left.subscriptionId == $right.subscriptionId\n| join kind=leftouter LOB on $left.LineOfBusiness==$right.ShortName\n| project Environment, AppCode, AppName, LineOfBusiness=iff(isempty(FullName),UnDefined,FullName), IsApplication, PK_Subscription=tostring(PK_Subscription), resourceGroup, subscriptionId, subscriptionName, billingAccountId, billingAccountName, accountName, accountOwnerId,Source,LOB_ShortName=iff(isempty(ShortName),UnDefined,ShortName),financelob",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "PBIQuery_Aggregated",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ProductDetail",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Billing_PBI <| \nlet UnDefined = 'undefined';\nlet System = 'system';\n//let EndOfLastWeek = startofweek(now());\nlet EndOfLastWeek = now();\nlet DateFilter = ago(1000d);\nlet Daytogroup = (_billingdate:datetime) {\n    let _endOfWeek = iif(dayofweek(_billingdate)==0d,_billingdate, todatetime(format_datetime(datetime_add('Day', 1, endofweek(_billingdate)),\"yyyy-MM-dd\")));\n    let _endOfWeekByMonth = iif(_endOfWeek > endofmonth(_billingdate),todatetime(format_datetime(endofmonth(_billingdate),\"yyyy-MM-dd\")),_endOfWeek);\n    _endOfWeekByMonth\n};\nlet BillingDataView = materialize(\nBillingConfig_Extended\n| join kind= inner (BillingData\n| where billingDate > DateFilter and billingDate <= EndOfLastWeek\n| extend subscriptionId, resourceGroup = iff(isempty(resourceGroup),System,resourceGroup),\nproduct,location=resourceLocation,\nBillingDate_T = Daytogroup(billingDate)\n| project subscriptionId,resourceGroup,product,location,BillingDate_T,billingDate,chargeType, frequency,resourceId,cost,quantity, effectivePrice, resourceName,publisherType,partNumber\n) on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup\n| project subscriptionId,resourceGroup,product,location,BillingDate_T,billingDate,chargeType, frequency,resourceId,cost,quantity, effectivePrice, resourceName,publisherType,partNumber,PK_Subscription\n);\nProductDetail\n| join kind=inner BillingDataView\non $left.Product == $right.product and $left.partNumber == $right.partNumber\n| extend billingDate_W = iif(billingDate > startofmonth(ago(60d)),billingDate,iif(billingDate < endofmonth(ago(560d)),todatetime(format_datetime(endofmonth(billingDate),\"yyyy-MM-dd\")),BillingDate_T)), //up to 60 days daily, upto 560 days weekly rest monthly\nreservationId=iif(chargeType==\"purchase\" and frequency==\"recurring\", split(resourceId, '/')[4], \"\")\n| summarize hint.strategy = shuffle TotalCost = sum(cost), Quantity = sum(quantity), effectivePrice=avg(effectivePrice) by Region=location,  \n BillingDate = billingDate_W ,PK_Subscription,resourceName,publisherType,chargeType,reservationId, ProdID",
                                "type": "Expression"
                            },
                            "commandTimeout": "02:00:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ProductDetail",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Billing_Config_Extended",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ProductDetail <| \nlet UnDefined = 'undefined';\nlet BillingDataView = materialize(\nBillingData\n| extend mde = parse_json(meterDetails)\n| project Product=product, partNumber, metername = tostring(mde.metername),\nMeterCategory=tostring(mde.metercategory),metersubcategory=tostring(mde.metersubcategory),\nunitofmeasure=tostring(mde.unitofmeasure)\n| distinct Product, partNumber, MeterCategory\n);\nProductMeterCategory\n| project IsPrePay,Product,FNFCategory,CostType\n| join kind=rightouter BillingDataView\non Product\n| extend MeterCategory=iif(isempty( MeterCategory),UnDefined,MeterCategory),\nFNFCategory=iif(isempty( FNFCategory),UnDefined,FNFCategory),\nCostType = iif(isempty(CostType),UnDefined,CostType),\nIsPrePay=iif(isnull(IsPrePay),false, IsPrePay),Product=Product1\n| distinct Product,partNumber,IsPrePay,MeterCategory,FNFCategory,CostType\n| sort by Product, partNumber asc\n| extend ProdID=row_number()\n| project Product,partNumber,NonReserved=IsPrePay,MeterCategory,FNFCategory,CostType,ProdID",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RefershPBITable')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Billing_Config_Extended",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace BillingConfig_Extended <|  \nlet UnDefined = 'undefined';\nlet System = 'system';\nlet Subscription = materialize(\nBillingData\n| project subscriptionId, resourceGroup = iff(isempty(resourceGroup),System,resourceGroup),resourceName\n| distinct subscriptionId, resourceGroup,resourceName\n| sort by subscriptionId asc, resourceGroup asc,resourceName asc\n| extend PK_Subscription= row_number()\n| project subscriptionId, resourceGroup,resourceName,PK_Subscription //,PK_Subscription_RG\n);\nlet Subscription_RG = materialize(\nBillingData\n| project subscriptionId, resourceGroup = iff(isempty(resourceGroup),System,resourceGroup)\n| distinct subscriptionId, resourceGroup\n| sort by subscriptionId asc, resourceGroup asc\n| extend PK_Subscription_RG= row_number()\n| project subscriptionId, resourceGroup,PK_Subscription_RG\n);\nlet SubscriptionName = materialize(BillingData \n| summarize arg_max(billingDate,subscriptionName, billingAccountId, billingAccountName, accountName, accountOwnerId) by subscriptionId \n| project-away billingDate);\nlet ResourceTag = materialize (BillingData\n| where billingDate > ago(180d)\n| where isnotempty(tags)\n| extend RGFQN = strcat(subscriptionId,'/',resourceGroup,'/',resourceName)\n| summarize arg_max(billingDate, subscriptionId, resourceGroup,resourceName) by RGFQN, tags\n| extend tag = parse_json(tags)\n| project RGFQN,subscriptionId, resourceGroup,resourceName,environment=tostring(coalesce(tag.env,tag.environment)),application_name=tostring(coalesce(tag.app1,tag.application)), application_name_2=tostring(tag.app2),primary_app_owner=tostring(tag.owner1),backup_app_owner=tostring(tag.owner2),busines_unit=tostring(tag.bu),budget_center_code=tostring(tag.bc),public_or_private=tostring(tag.public),creator_name=tostring(tag.createdby),ticket_number=tostring(tag.requestid),date_created=tostring(tag.datecreated),expiraton_date=tostring(tag.expiratondate),billingDate,tags\n//| extend appcodeparsed=split(appcode, '|')[0]\n//| extend appcode=tolong(appcodeparsed), parent_hostingid=toreal(parent_hostingid), lineofbusiness=toint(lineofbusiness)//, financelob=toint(financelob) \n//| project-away appcodeparsed\n//| extend lineofbusiness=tostring(lineofbusiness), financelob=tostring(financelob)\n//| extend financelob=iif(isempty(financelob),UnDefined,financelob)\n| where isnotempty(busines_unit)\n| summarize Max_BillingDate=max(billingDate) by RGFQN,subscriptionId, resourceGroup,resourceName,environment,application_name,application_name_2,primary_app_owner,backup_app_owner,busines_unit,budget_center_code,public_or_private,creator_name,ticket_number,date_created,expiraton_date,tags\n//costcenter, servicetowerid, appcode,appcode_2, appid, parent_hostingid,lineofbusiness,financelob,subscriptionId, resourceGroup,resourceName,RGFQN,businessservice, clientservice,resourceretention,ritm,requestor_email,creator_name,subnet,subnet2,subnet3,subnet4,subnetaks,subnetapim,subnetag,subnetalb,subnetams,tags\n| sort by RGFQN, Max_BillingDate, subscriptionId, resourceGroup,resourceName,environment,application_name,application_name_2,primary_app_owner,backup_app_owner,busines_unit,budget_center_code,public_or_private,creator_name,ticket_number,date_created,expiraton_date,tags desc\n//| sort by RGFQN, Max_BillingDate, lineofbusiness, appcode,appcode_2, appid, parent_hostingid, servicetowerid, costcenter,financelob,businessservice, clientservice,resourceretention,ritm,requestor_email,creator_name,subnet,subnet2,subnet3,subnet4,subnetaks,subnetapim,subnetag,subnetalb,subnetams,tags desc\n| extend Rank=row_number(1, prev(RGFQN) != RGFQN)\n| where Rank ==  1\n//| join kind=leftouter HostingLKP_Ram on $left.parent_hostingid == $right.ParentHostingSubHostingID\n| join kind=leftouter LOB on $left.busines_unit==$right.FullName\n| project Environment=tolower(environment),subscriptionId, resourceGroup,resourceName,environment,application_name,application_name_2,primary_app_owner,backup_app_owner,busines_unit,budget_center_code,public_or_private,creator_name,ticket_number,date_created,expiraton_date,tags,Source = 'ResourceTag'\n//, AppCode = tostring(appcode),AppCode2 = tostring(appcode_2), AppName = appid, LineOfBusiness = ShortName, IsApplication = iif(isnotempty(servicetowerid),false, true),\n//costcenter, servicetowerid,subscriptionId, resourceGroup,resourceName,financelob,businessservice, clientservice,resourceretention,ritm,requestor_email,creator_name,subnet,subnet2,subnet3,subnet4,subnetaks,subnetapim,subnetag,subnetalb,subnetams,tags,Source = 'ResourceTag'\n);\nlet BillingConfigView = materialize(\n    BillingConfig\n    | project subscriptionId=tostring(SubscriptionGuid), \n    Environment= iif(isempty(Environment),UnDefined,Environment),\n    application_name = iif(isempty(App1),UnDefined,App1),\n    application_name_2 = iif(isempty(App2),UnDefined,App2),\n    resourceGroup=iff(isempty(ResourceGroupName),System, ResourceGroupName),\n    budget_center_code=iff(isempty(BudgetCenter),UnDefined, BudgetCenter),\n    busines_unit=iif(BusinesUnit=='#n/a',UnDefined,BusinesUnit),\n    //financelob=iif(isempty(FinanceLOB),UnDefined,FinanceLOB),\n    //IsApplication,\n    Source='Config'\n    //| extend AppCode2=UnDefined\n    | distinct Environment,application_name,application_name_2,busines_unit,budget_center_code,subscriptionId,resourceGroup,Source\n);\nlet TagandConfig = materialize(ResourceTag\n| union (\n    BillingData\n    | project subscriptionId, resourceGroup = iff(isempty(resourceGroup),System,resourceGroup),resourceName\n    | distinct subscriptionId, resourceGroup,resourceName\n    | join kind=inner BillingConfigView on  $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup\n    | join kind=leftanti ResourceTag on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup and $left.resourceName == $right.resourceName\n    | project-away subscriptionId1, resourceGroup1\n));\nTagandConfig\n| union (\n    BillingData\n    | project subscriptionId, resourceGroup = iff(isempty(resourceGroup),System,resourceGroup),resourceName\n    | distinct subscriptionId, resourceGroup,resourceName\n    | extend resourceGroup=iff(isempty(resourceGroup),System,resourceGroup)\n    | join kind=leftanti TagandConfig on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup and $left.resourceName == $right.resourceName\n    | project Environment=UnDefined,application_name=UnDefined,application_name_2=UnDefined,subscriptionId, resourceGroup,resourceName,Source='Usage'\n)\n| join kind=inner Subscription on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup and $left.resourceName == $right.resourceName\n| join kind=inner Subscription_RG on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup\n| join kind=inner SubscriptionName on $left.subscriptionId == $right.subscriptionId\n| join kind=leftouter LOB on $left.busines_unit==$right.FullName\n| project Environment=iff(isempty(Environment),UnDefined,Environment), application_name=iff(isempty(application_name),UnDefined,application_name),application_name_2=iff(isempty(application_name_2),UnDefined,application_name_2), \nPK_Subscription=tostring(PK_Subscription),PK_Subscription_RG=tostring(PK_Subscription_RG), resourceGroup, resourceName,subscriptionId, subscriptionName, billingAccountId, billingAccountName, accountName, \naccountOwnerId,Source,primary_app_owner,backup_app_owner,busines_unit=iff(isempty(busines_unit),UnDefined,busines_unit),budget_center_code,public_or_private,creator_name,ticket_number,date_created,expiraton_date,tags\n//| count",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "PBIQuery_Aggregated",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ProductDetail",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Billing_PBI <| \nlet UnDefined = 'undefined';\nlet System = 'system';\n//let EndOfLastWeek = startofweek(now());\nlet EndOfLastWeek = now();\nlet DateFilter = ago(2000d);\nlet Daytogroup = (_billingdate:datetime) {\n    let _endOfWeek = iif(dayofweek(_billingdate)==0d,_billingdate, todatetime(format_datetime(datetime_add('Day', 1, endofweek(_billingdate)),\"yyyy-MM-dd\")));\n    let _endOfWeekByMonth = iif(_endOfWeek > endofmonth(_billingdate),todatetime(format_datetime(endofmonth(_billingdate),\"yyyy-MM-dd\")),_endOfWeek);\n    _endOfWeekByMonth\n};\nlet BillingDataView = materialize(\nBillingConfig_Extended\n| join kind= inner (BillingData\n| where billingDate > DateFilter and billingDate <= EndOfLastWeek\n| extend subscriptionId, resourceGroup = iff(isempty(resourceGroup),System,resourceGroup),resourceName,product,location=resourceLocation,\nBillingDate_T = Daytogroup(billingDate)\n| project subscriptionId,resourceGroup,product,location,BillingDate_T,billingDate,chargeType, frequency,resourceId,cost,quantity, effectivePrice, resourceName,publisherType,partNumber\n) on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup and $left.resourceName == $right.resourceName\n| project subscriptionId,resourceGroup,product,location,BillingDate_T,billingDate,chargeType, frequency,resourceId,cost,quantity, effectivePrice, resourceName,publisherType,partNumber,PK_Subscription\n);\nProductDetail\n| join kind=inner BillingDataView\non $left.Product == $right.product and $left.partNumber == $right.partNumber\n| extend billingDate_W = iif(billingDate > startofmonth(ago(60d)),billingDate,iif(billingDate < endofmonth(ago(560d)),todatetime(format_datetime(endofmonth(billingDate),\"yyyy-MM-dd\")),BillingDate_T)), //up to 60 days daily, upto 560 days weekly rest monthly\nreservationId=iif(chargeType==\"purchase\" and frequency==\"recurring\", split(resourceId, '/')[4], \"\")\n| summarize hint.strategy = shuffle TotalCost = sum(cost), Quantity = sum(quantity), effectivePrice=avg(effectivePrice) by Region=location,  \n BillingDate = billingDate_W ,PK_Subscription,resourceName,publisherType,chargeType,reservationId, ProdID",
                                "type": "Expression"
                            },
                            "commandTimeout": "02:00:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ProductDetail",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Billing_Config_Extended",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ProductDetail <| \nlet UnDefined = 'undefined';\nlet BillingDataView = materialize(\nBillingData\n| extend mde = parse_json(meterDetails)\n| project Product=product, partNumber, metername = tostring(mde.metername),\nMeterCategory=tostring(mde.metercategory),metersubcategory=tostring(mde.metersubcategory),\nunitofmeasure=tostring(mde.unitofmeasure),billingDate\n| distinct Product, partNumber, MeterCategory,metersubcategory,billingDate\n| summarize arg_max(billingDate, MeterCategory,metersubcategory) by Product, partNumber\n| sort by Product, partNumber asc\n| extend ProdID=row_number()\n| project Product,partNumber,MeterCategory,ProdID,metersubcategory\n);\nProductMeterCategory\n| project IsPrePay,Product,FNGCategory,CostType\n| join kind=rightouter BillingDataView\non Product\n| extend MeterCategory=iif(isempty( MeterCategory),UnDefined,MeterCategory),\nFNGCategory=iif(isempty( FNGCategory),UnDefined,FNGCategory),\nCostType = iif(isempty(CostType),UnDefined,CostType),\nIsPrePay=iif(isnull(IsPrePay),false, IsPrePay),Product=Product1\n| distinct Product,partNumber,IsPrePay,MeterCategory,metersubcategory,FNGCategory,CostType\n| sort by Product, partNumber asc\n| extend ProdID=row_number()\n| project Product,partNumber,NonReserved=IsPrePay,MeterCategory,FNGCategory,CostType,ProdID,metersubcategory",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-03-25T08:48:52Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/MetricsData')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy_MetricsData_From_Dev",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [
                            {
                                "name": "Source",
                                "value": "metricsdata//"
                            },
                            {
                                "name": "Destination",
                                "value": "metricsdata//"
                            }
                        ],
                        "typeProperties": {
                            "source": {
                                "type": "BinarySource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "wildcardFileName": "*"
                                },
                                "formatSettings": {
                                    "type": "BinaryReadSettings"
                                }
                            },
                            "sink": {
                                "type": "BinarySink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "enableSkipIncompatibleRow": false,
                            "skipErrorFile": {
                                "fileMissing": true
                            },
                            "validateDataConsistency": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DevDataSet_DataCopy",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": "metricsdata"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DestinationDataset_DataCopy",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": "metricsdata"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "Initial Setup"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:27Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DevDataSet_DataCopy')]",
                "[concat(variables('factoryId'), '/datasets/DestinationDataset_DataCopy')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ReferenceData')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy_Referencedata_From_Dev",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [
                            {
                                "name": "Source",
                                "value": "billingdata//"
                            },
                            {
                                "name": "Destination",
                                "value": "billingdata//"
                            }
                        ],
                        "typeProperties": {
                            "source": {
                                "type": "BinarySource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "wildcardFileName": "*",
                                    "deleteFilesAfterCompletion": false
                                },
                                "formatSettings": {
                                    "type": "BinaryReadSettings"
                                }
                            },
                            "sink": {
                                "type": "BinarySink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "enableSkipIncompatibleRow": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DevDataSet_DataCopy",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": "referencedata"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DestinationDataset_DataCopy",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": "referencedata"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "Initial Setup"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:27Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DevDataSet_DataCopy')]",
                "[concat(variables('factoryId'), '/datasets/DestinationDataset_DataCopy')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pline VMMetrics ADLSG2 to ADX v4')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy DataLake to ADX",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "wildcardFolderPath": {
                                        "value": "@pipeline().parameters.p_StorageAccountDirectory",
                                        "type": "Expression"
                                    },
                                    "wildcardFileName": "*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "VMMetricsCSV",
                                "type": "DatasetReference",
                                "parameters": {
                                    "dirname": {
                                        "value": "@pipeline().parameters.p_StorageAccountDirectory",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_VMMetrics",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": {
                                        "value": "@pipeline().parameters.p_Dest_Staging_TableName",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "ADX Staging to ProdTable",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Copy DataLake to ADX",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-append async VMMetrics <|\nStaging_VMMetrics\n| extend  subscription = tostring(split(id, \"/\")[2])\n| extend  resourceGroupName = tostring(split(id, \"/\")[4])\n| extend  virtualMachineName = tostring(split(id, \"/\")[8])\n| extend  RGFQN = tostring(strcat('/subscriptions/', subscription, '/resourceGroups/', toupper(resourceGroupName)))\n| extend  metricsDate = todatetime(format_datetime(todatetime(timeStamp), 'yyyy-MM-dd'))\n| extend  metricsMonth = format_datetime(todatetime(split(['timespan'], '/')[0]), 'yyyy-MM')\n| extend  metricsHour = format_datetime(todatetime(timeStamp), 'HH')\n| extend  resourceId =  strcat(RGFQN,'/providers/Microsoft.Compute/virtualMachines/', virtualMachineName)",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging Table",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace  Staging_VMMetrics <|\nStaging_VMMetrics\n| take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_StorageAccountContainer": {
                        "type": "string"
                    },
                    "p_StorageAccountDirectory": {
                        "type": "string"
                    },
                    "p_VMMetricsDate": {
                        "type": "string"
                    },
                    "p_Dest_Staging_TableName": {
                        "type": "string"
                    },
                    "p_Dest_Production_TableName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "VM Metrics"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:27Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/VMMetricsCSV')]",
                "[concat(variables('factoryId'), '/datasets/adx_VMMetrics')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pline VMMetrics UnitTest')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "GetBearerToken",
                        "description": "Use this Web activity to get bearer token",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "GetSPNSecret",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            "url": {
                                "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                "type": "Expression"
                            },
                            "body": {
                                "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{activity('GetSPNSecret').output.value}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Copy REST Output",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "GetBearerToken",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET",
                                "additionalHeaders": {
                                    "Authorization": {
                                        "value": "@{concat('Bearer ',activity('GetBearerToken').output.access_token)}",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "RestResource_VMMetrics_v1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "p_RelativeURL": {
                                        "value": "/subscriptions/d7e6f206-2d0d-43eb-b2d8-de5503cd6b1e/resourceGroups/RGMINECRAFT2/providers/Microsoft.Compute/virtualMachines/minecraftvm/providers/microsoft.insights/metrics?timespan=@{pipeline().parameters.VMMetricsDate}/@{pipeline().parameters.VMMetricsDate}T23:59:00Z&interval=PT1H&metricnames=Percentage CPU,Disk Read Bytes,Disk Write Bytes,Disk Read Operations/Sec,Disk Write Operations/Sec&aggregation=Average&api-version=2018-01-01",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "VMMetricsJSON_UnitTest",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "GetSPNSecret",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": {
                                "value": "@concat(pipeline().parameters.p_SPNSecretURL,'?api-version=7.0')",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "ClientID": {
                        "type": "string",
                        "defaultValue": "aa5605bb-2877-483d-b005-e1439ee1f988"
                    },
                    "tenant_id": {
                        "type": "string",
                        "defaultValue": "8a807b9b-02da-47f3-a903-791a42a2285c"
                    },
                    "VMMetricsDate": {
                        "type": "string"
                    },
                    "p_SPNSecretURL": {
                        "type": "string",
                        "defaultValue": "https://kv-ccop-dv.vault.azure.net/secrets/CostMGMT-SPN-Secret/eafafff824ca4d8c8a8c604579b70ed1"
                    }
                },
                "folder": {
                    "name": "VM Metrics"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:27Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RestResource_VMMetrics_v1')]",
                "[concat(variables('factoryId'), '/datasets/VMMetricsJSON_UnitTest')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API - SplitFiles - Reservation')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "SplitFiles",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "SplitFilesByDay - Reservation",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "Container": {
                                        "value": "'@{pipeline().parameters.container}'",
                                        "type": "Expression"
                                    },
                                    "SourceFileName": {
                                        "value": "'@{pipeline().parameters.sourcefilename}'",
                                        "type": "Expression"
                                    },
                                    "SubFolder": {
                                        "value": "'@{pipeline().parameters.subfolder}'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "DataLakeSource": {},
                                    "WriteMultipleFiles": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "container": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "sourcefilename": {
                        "type": "string"
                    },
                    "subfolder": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:27Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/SplitFilesByDay - Reservation')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/BillingData')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy_Billingdata_From_Dev",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [
                            {
                                "name": "Source",
                                "value": "billingdata//"
                            },
                            {
                                "name": "Destination",
                                "value": "billingdata//"
                            }
                        ],
                        "typeProperties": {
                            "source": {
                                "type": "BinarySource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "wildcardFileName": "*",
                                    "deleteFilesAfterCompletion": false
                                },
                                "formatSettings": {
                                    "type": "BinaryReadSettings"
                                }
                            },
                            "sink": {
                                "type": "BinarySink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "enableSkipIncompatibleRow": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DevDataSet_DataCopy",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.SourceContainer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DestinationDataset_DataCopy",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.DestinationContainer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "SourceContainer": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "DestinationContainer": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    }
                },
                "folder": {
                    "name": "Initial Setup"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:27Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DevDataSet_DataCopy')]",
                "[concat(variables('factoryId'), '/datasets/DestinationDataset_DataCopy')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline VMMetrics Batch Read API CopyActivity v4')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy REST Output",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:05:00",
                                "requestInterval": "00.00:00:02.000",
                                "requestMethod": "GET",
                                "additionalHeaders": {
                                    "Authorization": {
                                        "value": "@pipeline().parameters.Token",
                                        "type": "Expression"
                                    }
                                },
                                "paginationRules": {
                                    "AbsoluteUrl": "$['nextLink']"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "RestResource_VMMetrics_v1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "p_RelativeURL": {
                                        "value": "@{pipeline().parameters.resourceId}/providers/microsoft.insights/metrics?timespan=@{pipeline().parameters.startofmonthDate}/@{pipeline().parameters.endofmonthDate}T23:59:00Z&interval=PT1H&metricnames=Percentage CPU,Disk Read Bytes,Disk Write Bytes,Disk Read Operations/Sec,Disk Write Operations/Sec&aggregation=Average&api-version=2018-01-01",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "VMMetricsJSON_v4",
                                "type": "DatasetReference",
                                "parameters": {
                                    "dirname": {
                                        "value": "@pipeline().parameters.dirname",
                                        "type": "Expression"
                                    },
                                    "filename": {
                                        "value": "@{pipeline().parameters.filename}",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "Wait 2 Seconds",
                        "type": "Wait",
                        "dependsOn": [
                            {
                                "activity": "Copy REST Output",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "waitTimeInSeconds": 2
                        }
                    },
                    {
                        "name": "Update ADFErrorLog",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Copy REST Output",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-append ADFErrorLog <|\nprint APIName = 'VM Metrics API', ReportingDate='@{pipeline().parameters.VMMetricsDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName=\"REST API to Azure Data Lake\" , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '@{activity('Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= \"@{replace(activity('Copy REST Output').output.errors[0]['Message'] , '\"' ,' ' )}\", ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{pipeline().parameters.resourceId}',  ErrorSubscription= '@{pipeline().parameters.subscriptionId}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "Token": {
                        "type": "string"
                    },
                    "resourceId": {
                        "type": "string"
                    },
                    "VMMetricsDate": {
                        "type": "string"
                    },
                    "dirname": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string"
                    },
                    "subscriptionId": {
                        "type": "string"
                    },
                    "startofmonthDate": {
                        "type": "string"
                    },
                    "endofmonthDate": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "VM Metrics"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:28Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RestResource_VMMetrics_v1')]",
                "[concat(variables('factoryId'), '/datasets/VMMetricsJSON_v4')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API - Split Files - Usage')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "SplitFiles",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "SplitFilesByDay - Usage",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "Container": {
                                        "value": "'@{pipeline().parameters.container}'",
                                        "type": "Expression"
                                    },
                                    "SourceFileName": {
                                        "value": "'@{pipeline().parameters.sourcefilename}'",
                                        "type": "Expression"
                                    },
                                    "UsageFolderName": {
                                        "value": "'@{pipeline().parameters.UsageFolderName}'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "DataLakeSource": {},
                                    "WriteMultipleFiles": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 48,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "container": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "sourcefilename": {
                        "type": "string"
                    },
                    "UsageFolderName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:28Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/SplitFilesByDay - Usage')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline VMMetrics Read API CopyActivity v4')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy REST Output",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:05:00",
                                "requestInterval": "00.00:00:02.000",
                                "requestMethod": "GET",
                                "additionalHeaders": {
                                    "Authorization": {
                                        "value": "@pipeline().parameters.Token",
                                        "type": "Expression"
                                    }
                                },
                                "paginationRules": {
                                    "AbsoluteUrl": "$['nextLink']"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "RestResource_VMMetrics_v1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "p_RelativeURL": {
                                        "value": "@{pipeline().parameters.resourceId}/providers/microsoft.insights/metrics?timespan=@{pipeline().parameters.startofmonthDate}/@{pipeline().parameters.endofmonthDate}T23:59:00Z&interval=PT1H&metricnames=Percentage CPU,Disk Read Bytes,Disk Write Bytes,Disk Read Operations/Sec,Disk Write Operations/Sec&aggregation=Average&api-version=2018-01-01",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "VMMetricsJSON_v4",
                                "type": "DatasetReference",
                                "parameters": {
                                    "dirname": {
                                        "value": "@pipeline().parameters.dirname",
                                        "type": "Expression"
                                    },
                                    "filename": {
                                        "value": "@{pipeline().parameters.filename}",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "Wait 2 Seconds",
                        "type": "Wait",
                        "dependsOn": [
                            {
                                "activity": "Copy REST Output",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "waitTimeInSeconds": 2
                        }
                    },
                    {
                        "name": "Update ADFErrorLog",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Copy REST Output",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-append ADFErrorLog <|\nprint APIName = 'VM Metrics API', ReportingDate='@{pipeline().parameters.VMMetricsDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName=\"REST API to Azure Data Lake\" , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '@{activity('Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= \"@{replace(activity('Copy REST Output').output.errors[0]['Message'] , '\"' ,' ' )}\", ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{pipeline().parameters.resourceId}',  ErrorSubscription= '@{pipeline().parameters.subscriptionId}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "Token": {
                        "type": "string"
                    },
                    "resourceId": {
                        "type": "string"
                    },
                    "VMMetricsDate": {
                        "type": "string"
                    },
                    "dirname": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string"
                    },
                    "subscriptionId": {
                        "type": "string"
                    },
                    "startofmonthDate": {
                        "type": "string"
                    },
                    "endofmonthDate": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "VM Metrics"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:28Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RestResource_VMMetrics_v1')]",
                "[concat(variables('factoryId'), '/datasets/VMMetricsJSON_v4')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 2 - ADX Stage to Prod - ReservationDesc')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "From Staging Table to Production",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Loop Through Days",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ReservationDescription <|\nlet mindate = toscalar(BillingData | summarize min(billingDate));\nReservationDescription\n| where eventDate !in ((Staging_ReservationDescription | project eventDate=todatetime(format_datetime(todatetime(eventDate),'yyyy-MM-dd')) | distinct eventDate))\n| where eventDate >= mindate\n| union (\n            Staging_ReservationDescription\n            | project ['id']=tolower(['id']),['name']=tolower(['name']),['type']=tolower(['type']),eventDate=todatetime(format_datetime(todatetime(eventDate),'yyyy-MM-dd')),reservationOrderId=tolower(reservationOrderId),description=tolower(description),eventType=tolower(eventType),quantity,amount,currency=tolower(currency),reservationorderName=tolower(reservationorderName),purchasingEnrollment=tolower(purchasingEnrollment),armSkuName=tolower(armSkuName),term=tolower(term),region=tolower(region),purchasingSubscriptionGuid=tolower(purchasingSubscriptionGuid),purchasingSubscriptionName=tolower(purchasingSubscriptionName),accountName=tolower(accountName),accountOwnerEmail=tolower(accountOwnerEmail),departmentName=tolower(departmentName),costCenter=tolower(costCenter),currentEnrollment=tolower(currentEnrollment),billingFrequency=tolower(billingFrequency)\n        )",
                                "type": "Expression"
                            },
                            "commandTimeout": "01:00:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging Table",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace  Staging_ReservationDescription <|\nStaging_ReservationDescription\n| take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Loop Through Days",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.p_BillingDate",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Get Folder Stats",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "FolderValidation",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FilePath": {
                                                    "value": "@{pipeline().parameters.p_StorageAccountContainer}/@{formatDateTime(item(), 'yyyy')}/@{formatDateTime(item(), 'MM')}/@{formatDateTime(item(), 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "exists",
                                            "childItems"
                                        ],
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "IsFolderValid",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Folder Stats",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@and(equals(activity('Get Folder Stats').output.exists,true),greater(length(activity('Get Folder Stats').output.childItems),0))",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Copy DataLake to ADX",
                                                "type": "Copy",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 1,
                                                    "retryIntervalInSeconds": 300,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "wildcardFolderPath": {
                                                                "value": "@{formatDateTime(item(), 'yyyy')}/@{formatDateTime(item(), 'MM')}/@{formatDateTime(item(), 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                                "type": "Expression"
                                                            },
                                                            "wildcardFileName": "*",
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "AzureDataExplorerSink"
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "name": "id",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "id",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "name",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "name",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "type",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "type",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "eventDate",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "eventDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "reservationOrderId",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "reservationOrderId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "description",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "description",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "eventType",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "eventType",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "quantity",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "quantity",
                                                                    "type": "Double"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "amount",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "amount",
                                                                    "type": "Double"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "currency",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "currency",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "reservationOrderName",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "reservationorderName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "purchasingEnrollment",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "purchasingEnrollment",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "armSkuName",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "armSkuName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "term",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "term",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "region",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "region",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "purchasingSubscriptionGuid",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "purchasingSubscriptionGuid",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "purchasingSubscriptionName",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "purchasingSubscriptionName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "accountName",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "accountName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "accountOwnerEmail",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "accountOwnerEmail",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "departmentName",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "departmentName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "costCenter",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "costCenter",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "currentEnrollment",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "currentEnrollment",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "billingFrequency",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "billingFrequency",
                                                                    "type": "String"
                                                                }
                                                            }
                                                        ],
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "src_BillingDataCSV",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "ContainerName": {
                                                                "value": "@pipeline().parameters.p_StorageAccountContainer",
                                                                "type": "Expression"
                                                            },
                                                            "DirectoryName": {
                                                                "value": "@{formatDateTime(item(), 'yyyy')}/@{formatDateTime(item(), 'MM')}/@{formatDateTime(item(), 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "adx_BillingData",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "TableName": "Staging_ReservationDescription"
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_StorageAccountContainer": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BillingDate": {
                        "type": "array"
                    },
                    "p_SubDirectory": {
                        "type": "string",
                        "defaultValue": "ReservationOrdersDesc"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:29Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/FolderValidation')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataCSV')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 4 - ADX Stage to Prod - Usage')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "From Staging Table to Production",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Update UsageDataLog",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-append BillingData with (tags= '[\"drop-by:@{pipeline().parameters.p_BillingDate}\"]') <|\nStaging_BillingData \n| project\n['kind'] = tolower(['kind']),\n['id']=tolower(['id']),\nname=tolower(name),\n['type']=tolower(['type']),\ntags=tolower(tags),\nbillingAccountId=tolower(billingAccountId),\nbillingAccountName=tolower(billingAccountName),\nbillingPeriodStartDate,\nbillingPeriodEndDate,\nbillingProfileId=tolower(billingProfileId),\nbillingProfileName=tolower(billingProfileName),\naccountOwnerId=tolower(accountOwnerId),\naccountName=tolower(accountName),\nsubscriptionId=tolower(subscriptionId),\nsubscriptionName=tolower(subscriptionName),\n['date']=['date'],\nproduct=tolower(product),\npartNumber=tolower(partNumber),\nmeterId=tolower(meterId),\nquantity,\neffectivePrice,\ncost,\nunitPrice,\nbillingCurrency=tolower(billingCurrency),\nresourceLocation=tolower(resourceLocation),\nconsumedService=tolower(consumedService),\nresourceId=tolower(resourceId),\nresourceName=tolower(resourceName),\nserviceInfo2=tolower(serviceInfo2),\ninvoiceSection=tolower(invoiceSection),\nresourceGroup=tolower(resourceGroup),\nofferId=tolower(offerId),\nisAzureCreditEligible=tolower(isAzureCreditEligible),\npublisherType=tolower(publisherType),\nchargeType=tolower(chargeType),\nfrequency=tolower(frequency),\nmeterDetails=tolower(meterDetails),\nRGFQN = strcat('/subscriptions/', tolower(subscriptionId), '/resourceGroups/', tolower(resourceGroup )),\nbillingDate = todatetime(format_datetime(todatetime(['date']), 'yyyy-MM-dd')),\nbillingMonth = format_datetime(todatetime(['date']), 'yyyy-MM')",
                                "type": "Expression"
                            },
                            "commandTimeout": "03:00:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Update UsageDataLog",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "isDataExists",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-append usageDataLog <| \nStaging_BillingData\n| summarize usageCost=sum(cost) by billingAccountId, subscriptionId, subscriptionName,billingDate = format_datetime(todatetime(['date']), 'yyyy-MM-dd'), frequency = '@{pipeline().parameters.p_BatchType}', logdate=now()",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "isDataExists",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Check Data Already Exists",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('Check Data Already Exists').output.value[0].Flag,'True')",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Get Extent ID",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureDataExplorerSource",
                                            "query": {
                                                "value": "BillingData\n| where extent_tags() has \"drop-by:@{pipeline().parameters.p_BillingDate}\"\n| project  extentid=extent_id(), tag=extent_tags()\n| distinct extentid",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "00:10:00",
                                            "noTruncation": false
                                        },
                                        "dataset": {
                                            "referenceName": "ADX_Generic",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "TableName": "ADFErrorLog"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Drop Extent",
                                    "type": "AzureDataExplorerCommand",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Extent ID",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "command": {
                                            "value": ".drop extents ('@{activity('Get Extent ID').output.firstRow.extentid}') from BillingData",
                                            "type": "Expression"
                                        },
                                        "commandTimeout": "00:20:00"
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Check Data Already Exists",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "BillingData\n| where billingDate in ((Staging_BillingData | project billingDate = format_datetime(todatetime(['date']), 'yyyy-MM-dd') | distinct billingDate))\n| distinct billingDate\n| count\n| extend Flag=iff(Count>0, 'True', 'False')\n| project Flag",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_BillingDate": {
                        "type": "string"
                    },
                    "p_SubDirectory": {
                        "type": "string"
                    },
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BatchType": {
                        "type": "string"
                    }
                },
                "variables": {
                    "kql": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:29Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 2 - ADX Stage to Prod - ReservationOrders')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "From Staging Table to Production",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Copy DataLake to ADX_copy1_copy1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ReservationOrders <|\nReservationOrders\n| take 0\n| union (\n            Staging_ReservationOrders\n            | project ['id']=tolower(['id']),['type']=tolower(['type']),['name']=tolower(['name']),etag=tolower(etag),displayName=tolower(displayName), requestDateTime=todatetime(format_datetime(todatetime(requestDateTime),'yyyy-MM-dd')),createdDateTime=todatetime(format_datetime(todatetime(createdDateTime),'yyyy-MM-dd')), expiryDate=todatetime(format_datetime(todatetime(expiryDate),'yyyy-MM-dd')),benefitStartTime=todatetime(format_datetime(todatetime(benefitStartTime),'yyyy-MM-dd')), term=tolower(term),provisioningState=tolower(provisioningState),originalQuantity,billingPlan=tolower(billingPlan)\n        )",
                                "type": "Expression"
                            },
                            "commandTimeout": "01:00:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging Table",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace  Staging_ReservationOrders <|\nStaging_ReservationOrders\n| take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Copy DataLake to ADX_copy1_copy1",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "wildcardFolderPath": {
                                        "value": "@{pipeline().parameters.p_SubDirectory}",
                                        "type": "Expression"
                                    },
                                    "wildcardFileName": "*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "src_BillingDataCSV",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.p_StorageAccountContainer",
                                        "type": "Expression"
                                    },
                                    "DirectoryName": {
                                        "value": "@{pipeline().parameters.p_SubDirectory}",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_ReservationOrders"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_StorageAccountContainer": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BillingDate": {
                        "type": "array"
                    },
                    "p_SubDirectory": {
                        "type": "string",
                        "defaultValue": "ReservationOrders"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:29Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataCSV')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 2 - ADX Stage to Prod - Reservation Usage')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "From Staging Table to Production",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "isDataExists",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": "@variables('kql')",
                                "type": "Expression"
                            },
                            "commandTimeout": "03:00:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging Table",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace  Staging_ReservationSummary <|\nStaging_ReservationSummary\n| take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Loop Through Days",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.p_BillingDate",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Get Folder Stats",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "FolderValidation",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FilePath": {
                                                    "value": "@{pipeline().parameters.p_containername}/@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "exists",
                                            "childItems"
                                        ],
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "IsFolderValid",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Folder Stats",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@and(equals(activity('Get Folder Stats').output.exists,true),greater(length(activity('Get Folder Stats').output.childItems),0))",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Copy DataLake to ADX",
                                                "type": "Copy",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 1,
                                                    "retryIntervalInSeconds": 300,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "wildcardFolderPath": {
                                                                "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                                "type": "Expression"
                                                            },
                                                            "wildcardFileName": "*",
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "AzureDataExplorerSink"
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "src_BillingDataCSV",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "ContainerName": {
                                                                "value": "@pipeline().parameters.p_containername",
                                                                "type": "Expression"
                                                            },
                                                            "DirectoryName": {
                                                                "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "adx_BillingData",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "TableName": "Staging_ReservationSummary"
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Check Data Already Exists",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Loop Through Days",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "BillingData\n| where billingDate in ((Staging_ReservationSummary | project billingDate = todatetime(format_datetime(todatetime(usageDate), 'yyyy-MM-dd')) | distinct billingDate))\n| distinct billingDate\n| count\n| extend Flag=iff(Count>0, 'True', 'False')\n| project Flag",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "isDataExists",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Check Data Already Exists",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('Check Data Already Exists').output.value[0].Flag,'True')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Update KQL For Append",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "kql",
                                        "value": {
                                            "value": ".set-or-append ReservationSummary <|\nStaging_ReservationSummary\n| extend usageDate = todatetime(format_datetime(todatetime(usageDate), 'yyyy-MM-dd')), UsageMonth = format_datetime(todatetime(usageDate), \"yyyy-MM\")\n| project ['id']=tolower(['id']),['name']=tolower(['name']),['type']=tolower(['type']),reservationOrderId=tolower(reservationOrderId),\nreservationId=tolower(reservationId),skuName=tolower(skuName),['kind']=tolower(['kind']),reservedHours,usageDate,UsageMonth,usedHours,minUtilizationPercentage,avgUtilizationPercentage,maxUtilizationPercentage,purchasedQuantity,remainingQuantity,totalReservedQuantity,usedQuantity,utilizedPercentage",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Update KQL For Replace",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "kql",
                                        "value": {
                                            "value": ".set-or-replace ReservationSummary <|\nlet mindate = toscalar(BillingData | summarize min(billingDate));\nReservationSummary\n| where usageDate !in ((Staging_ReservationSummary\n                        | distinct todatetime(format_datetime(todatetime(usageDate), 'yyyy-MM-dd')) )\n                      )\n| where usageDate >= mindate\n| union (\n    Staging_ReservationSummary\n    | extend usageDate = todatetime(format_datetime(todatetime(usageDate), 'yyyy-MM-dd')), UsageMonth = format_datetime(todatetime(usageDate), \"yyyy-MM\")\n    | project ['id']=tolower(['id']),['name']=tolower(['name']),['type']=tolower(['type']),reservationOrderId=tolower(reservationOrderId),\n    reservationId=tolower(reservationId),skuName=tolower(skuName),['kind']=tolower(['kind']),reservedHours,usageDate,UsageMonth,usedHours,minUtilizationPercentage,avgUtilizationPercentage,maxUtilizationPercentage,purchasedQuantity,remainingQuantity,totalReservedQuantity,usedQuantity,utilizedPercentage)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_BillingDate": {
                        "type": "string"
                    },
                    "p_SubDirectory": {
                        "type": "string"
                    },
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BatchType": {
                        "type": "string"
                    }
                },
                "variables": {
                    "kql": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:29Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/datasets/FolderValidation')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataCSV')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/BillingSummary-InitialLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "From Staging Table to Production",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Loop Through Days",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace BillingSummary <|\nBillingSummary\n| where billingPeriod !in ((Staging_BillingSummary | extend billingPeriodId=strcat(substring(billingPeriodId, 0, 4),'-',substring(billingPeriodId, 4, 2)) | distinct billingPeriodId))\n| union (\n            Staging_BillingSummary\n            | project billingId = tostring(split(id, '/')[2]),billingPeriod=strcat(substring(billingPeriodId, 0, 4),'-',substring(billingPeriodId, 4, 2)),currencyCode,beginningBalance,endingBalance,newPurchases,adjustments,utilized,serviceOverage,chargesBilledSeparately,totalOverage,totalUsage,azureMarketplaceServiceCharges,adjustmentType=name,adjustmentvalue=value,billingPeriodStart,billingPeriodEnd,balanceDeduct\n        )",
                                "type": "Expression"
                            },
                            "commandTimeout": "01:00:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging Table",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "GetDates",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace  Staging_BillingSummary <|\nStaging_BillingSummary\n| take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "GetDates",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "range ReportingDate from ago(5000d) to  endofmonth(now())  step 1d\n| where ReportingDate > todatetime('2020-01-01')\n| extend ReportingMonth=format_datetime(ReportingDate, 'yyyy-MM')\n| summarize ReportingDate=max(ReportingDate) by ReportingMonth\n| distinct ReportingDate",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Loop Through Days",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('GetDates').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Copy DataLake to ADX",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 1,
                                        "retryIntervalInSeconds": 300,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": {
                                                    "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{pipeline().parameters.p_SubDirectory}/csv",
                                                    "type": "Expression"
                                                },
                                                "wildcardFileName": "*",
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureDataExplorerSink"
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "src_BillingDataCSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.p_StorageAccountContainer",
                                                    "type": "Expression"
                                                },
                                                "DirectoryName": {
                                                    "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{pipeline().parameters.p_SubDirectory}/csv",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "adx_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "TableName": "Staging_BillingSummary"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_StorageAccountContainer": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_SubDirectory": {
                        "type": "string",
                        "defaultValue": "Balancesummary"
                    }
                },
                "folder": {
                    "name": "Initial Setup/InitialLoad - ADX"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:29Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataCSV')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Usage-InitialLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "From Staging Table to Production",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Loop Through Days",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace BillingData <|\nBillingData\n| where billingDate !in (\n                            (    Staging_BillingData\n                                | where isnotempty(billingAccountId)\n                                | distinct todatetime(format_datetime(todatetime(['date']), 'yyyy-MM-dd')) \n                            )\n                        )\n| where isnotempty(billingAccountId)\n| where billingAccountName contains 'fidelity' \n| union (\n            Staging_BillingData\n            | where isnotempty(billingAccountId)\n            | where billingAccountName contains 'fidelity' \n            | extend  RGFQN = strcat('/subscriptions/', tolower(subscriptionId), '/resourceGroups/', tolower(resourceGroup )),\n            billingDate = todatetime(format_datetime(todatetime(['date']), 'yyyy-MM-dd')),\n            billingMonth = format_datetime(todatetime(['date']), 'yyyy-MM'),\n            publisherType=tolower(publisherType),\n            chargeType=tolower(chargeType),\n            frequency=tolower(frequency),\n            resourceGroup=tolower(resourceGroup),\n            resourceName=tolower(resourceName),\n            resourceId=tolower(resourceId),\n            resourceLocation=tolower(resourceLocation),\n            product=tolower(product),\n            subscriptionId=tolower(subscriptionId),\n            subscriptionName=tolower(subscriptionName),\n            type=tolower(type),\n            billingAccountId=tolower(billingAccountId),\n            billingAccountName=tolower(billingAccountName),\n            billingProfileId=tolower(billingProfileId),\n            billingProfileName=tolower(billingProfileName),\n            accountOwnerId=tolower(accountOwnerId),\n            accountName=tolower(accountName),\n            partNumber=tolower(partNumber),\n            meterId=tolower(meterId),\n            consumedService=tolower(consumedService),\n            invoiceSection=tolower(invoiceSection),\n            offerId=tolower(offerId),\n            isAzureCreditEligible=tolower(isAzureCreditEligible),\n            meterDetails=tolower(meterDetails)\n        )",
                                "type": "Expression"
                            },
                            "commandTimeout": "02:00:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging Table",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "GetDates",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace  Staging_BillingData <|\nStaging_BillingData\n| take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Loop Through Days",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('GetDates').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Copy DataLake to ADX",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 1,
                                        "retryIntervalInSeconds": 300,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": {
                                                    "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                    "type": "Expression"
                                                },
                                                "wildcardFileName": "*",
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureDataExplorerSink"
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "name": "kind",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "id",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "name",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "type",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingAccountId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingAccountName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingProfileId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingProfileName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "accountOwnerId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "accountName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "subscriptionId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "subscriptionName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "date",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "date",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "product",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "product",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "partNumber",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "partNumber",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "meterId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "meterId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "quantity",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "quantity",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "effectivePrice",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "effectivePrice",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "cost",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "cost",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "unitPrice",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "unitPrice",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingCurrency",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingCurrency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceLocation",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "consumedService",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "consumedService",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "invoiceSection",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "invoiceSection",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceGroup",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceGroup",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "offerId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "offerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "publisherType",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "publisherType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "chargeType",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "chargeType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "frequency",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "frequency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "meterDetails",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "meterDetails",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "src_BillingDataCSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.p_StorageAccountContainer",
                                                    "type": "Expression"
                                                },
                                                "DirectoryName": {
                                                    "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "adx_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "TableName": "Staging_BillingData"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "GetDates",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "range ReportingDate from ago(5000d) to now() step 1d\n| extend ReportingDate=todatetime(format_datetime(ReportingDate, 'yyyy-MM-dd'))\n| where ReportingDate >= todatetime('2020-01-01')\n| where tostring(ReportingDate) contains '2021-06'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_StorageAccountContainer": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_SubDirectory": {
                        "type": "string",
                        "defaultValue": "Usage"
                    }
                },
                "folder": {
                    "name": "Initial Setup/InitialLoad - ADX"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:29Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataCSV')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 2 - ADX Stage to Prod - BillingSummary')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "From Staging Table to Production",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Loop Through Days",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace BillingSummary <|\nlet mindate = toscalar(BillingData | summarize min(billingDate));\nBillingSummary\n| where billingPeriod !in ((Staging_BillingSummary | extend billingPeriodId=strcat(substring(billingPeriodId, 0, 4),'-',substring(billingPeriodId, 4, 2)) | distinct billingPeriodId))\n| where billingPeriodEnd >= mindate\n| union (\n            Staging_BillingSummary\n            | project billingId = tostring(split(id, '/')[2]),billingPeriod=strcat(substring(billingPeriodId, 0, 4),'-',substring(billingPeriodId, 4, 2)),currencyCode,beginningBalance,endingBalance,newPurchases,adjustments,utilized,serviceOverage,chargesBilledSeparately,totalOverage,totalUsage,azureMarketplaceServiceCharges,adjustmentType=name,adjustmentvalue=value,billingPeriodStart,billingPeriodEnd,balanceDeduct\n        )",
                                "type": "Expression"
                            },
                            "commandTimeout": "01:00:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging Table",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace  Staging_BillingSummary <|\nStaging_BillingSummary\n| take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Loop Through Days",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.p_BillingDate",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Get Folder Stats",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "FolderValidation",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FilePath": {
                                                    "value": "@{pipeline().parameters.p_StorageAccountContainer}/@{formatDateTime(item(), 'yyyy')}/@{formatDateTime(item(), 'MM')}/@{formatDateTime(item(), 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "exists",
                                            "childItems"
                                        ],
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "IsFolderValid",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Folder Stats",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@and(equals(activity('Get Folder Stats').output.exists,true),greater(length(activity('Get Folder Stats').output.childItems),0))",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Copy DataLake to ADX",
                                                "type": "Copy",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 1,
                                                    "retryIntervalInSeconds": 300,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "wildcardFolderPath": {
                                                                "value": "@{formatDateTime(item(), 'yyyy')}/@{formatDateTime(item(), 'MM')}/@{formatDateTime(item(), 'dd')}/@{pipeline().parameters.p_SubDirectory}/csv",
                                                                "type": "Expression"
                                                            },
                                                            "wildcardFileName": "*",
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "AzureDataExplorerSink"
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "src_BillingDataCSV",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "ContainerName": {
                                                                "value": "@pipeline().parameters.p_StorageAccountContainer",
                                                                "type": "Expression"
                                                            },
                                                            "DirectoryName": {
                                                                "value": "@{formatDateTime(item(), 'yyyy')}/@{formatDateTime(item(), 'MM')}/@{formatDateTime(item(), 'dd')}/@{pipeline().parameters.p_SubDirectory}/csv",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "adx_BillingData",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "TableName": "Staging_BillingSummary"
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_StorageAccountContainer": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BillingDate": {
                        "type": "array"
                    },
                    "p_SubDirectory": {
                        "type": "string",
                        "defaultValue": "Balancesummary"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:29Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/FolderValidation')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataCSV')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 2 - ADX Stage to Prod - MarketPlace')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "From Staging Table to Production",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Loop Through Days",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace MarketPlace <|\nlet mindate = toscalar(BillingData | summarize min(billingDate));\nMarketPlace\n| where billingMonth !in ((Staging_MarketPlace\n                        | project billingMonth = format_datetime(todatetime(usageStartDate), \"yyyy-MM\") | distinct billingMonth )\n                      )\n| extend usagedate_cnvt = todatetime(usageStartDate)\n| where usagedate_cnvt >= mindate\n| project-away usagedate_cnvt\n| union (\n            Staging_MarketPlace\n            | project  usageStartDate=format_datetime(todatetime(usageStartDate), \"yyyy-MM-dd\"),usageEndDate=format_datetime(todatetime(usageEndDate), \"yyyy-MM-dd\"), \n            subscriptionGuid=tolower(subscriptionGuid), resourceGroup=tolower(resourceGroup), \n            instanceId=tolower(instanceId), offerName=tolower(offerName), orderNumber=tolower(orderNumber), publisherName=tolower(publisherName), planName=tolower(planName), consumedQuantity, resourceRate, extendedCost, isRecurringCharge,billingMonth=format_datetime(todatetime(usageStartDate), \"yyyy-MM\")\n        )",
                                "type": "Expression"
                            },
                            "commandTimeout": "01:00:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging Table",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace  Staging_MarketPlace <|\nStaging_MarketPlace\n| take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Loop Through Days",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.p_BillingDate",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Get Folder Stats",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "FolderValidation",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FilePath": {
                                                    "value": "@{pipeline().parameters.p_StorageAccountContainer}/@{formatDateTime(item(), 'yyyy')}/@{formatDateTime(item(), 'MM')}/@{formatDateTime(item(), 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "exists",
                                            "childItems"
                                        ],
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "IsFolderValid",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Folder Stats",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@and(equals(activity('Get Folder Stats').output.exists,true),greater(length(activity('Get Folder Stats').output.childItems),0))",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Copy DataLake to ADX",
                                                "type": "Copy",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 1,
                                                    "retryIntervalInSeconds": 300,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "wildcardFolderPath": {
                                                                "value": "@{formatDateTime(item(), 'yyyy')}/@{formatDateTime(item(), 'MM')}/@{formatDateTime(item(), 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                                "type": "Expression"
                                                            },
                                                            "wildcardFileName": "*",
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "AzureDataExplorerSink"
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "name": "usageStartDate",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "usageStartDate",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "usageEndDate",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "usageEndDate",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "subscriptionGuid",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "subscriptionGuid",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "resourceGroup",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceGroup",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "instanceId",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "instanceId",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "offerName",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "offerName",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "orderNumber",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "orderNumber",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "publisherName",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "publisherName",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "planName",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "planName",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "consumedQuantity",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "consumedQuantity",
                                                                    "type": "Double",
                                                                    "physicalType": "real"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "resourceRate",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceRate",
                                                                    "type": "Double",
                                                                    "physicalType": "real"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "extendedCost",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "extendedCost",
                                                                    "type": "Double",
                                                                    "physicalType": "real"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "isRecurringCharge",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "isRecurringCharge",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            }
                                                        ],
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "src_BillingDataTSV_Marketplace",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "ContainerName": {
                                                                "value": "@pipeline().parameters.p_StorageAccountContainer",
                                                                "type": "Expression"
                                                            },
                                                            "DirectoryName": {
                                                                "value": "@{formatDateTime(item(), 'yyyy')}/@{formatDateTime(item(), 'MM')}/@{formatDateTime(item(), 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": "*"
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "adx_BillingData",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "TableName": "Staging_MarketPlace"
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_StorageAccountContainer": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BillingDate": {
                        "type": "array"
                    },
                    "p_SubDirectory": {
                        "type": "string",
                        "defaultValue": "MarketPlace"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:29Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/FolderValidation')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataTSV_Marketplace')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Reservation-InitialLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "From Staging Table to Production",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Loop Through Days",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ReservationSummary <|\nReservationSummary\n| where UsageMonth !in ((Staging_ReservationSummary\n                        | distinct format_datetime(todatetime(usageDate), 'yyyy-MM') )\n                      )\n| union (\n    Staging_ReservationSummary\n    | extend usageDate = todatetime(format_datetime(todatetime(usageDate), 'yyyy-MM-dd')), UsageMonth = format_datetime(todatetime(usageDate), \"yyyy-MM\")\n    | project ['id']=tolower(['id']),['name']=tolower(['name']),['type']=tolower(['type']),reservationOrderId=tolower(reservationOrderId),\n    reservationId=tolower(reservationId),skuName=tolower(skuName),['kind']=tolower(['kind']),reservedHours,usageDate,UsageMonth,usedHours,minUtilizationPercentage,avgUtilizationPercentage,maxUtilizationPercentage,purchasedQuantity,remainingQuantity,totalReservedQuantity,usedQuantity,utilizedPercentage)",
                                "type": "Expression"
                            },
                            "commandTimeout": "01:00:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging Table",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "GetDates",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace  Staging_ReservationSummary <|\nStaging_ReservationSummary\n| take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Loop Through Days",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('GetDates').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Copy DataLake to ADX",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 1,
                                        "retryIntervalInSeconds": 300,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": {
                                                    "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                    "type": "Expression"
                                                },
                                                "wildcardFileName": "*",
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureDataExplorerSink"
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "src_BillingDataCSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.p_StorageAccountContainer",
                                                    "type": "Expression"
                                                },
                                                "DirectoryName": {
                                                    "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "adx_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "TableName": "Staging_ReservationSummary"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "GetDates",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "range ReportingDate from ago(@{pipeline().parameters.p_NoOfDays}d) to now(-1d) step 1d\n| extend ReportingDate=todatetime(format_datetime(ReportingDate, 'yyyy-MM-dd'))",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_StorageAccountContainer": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_NoOfDays": {
                        "type": "string"
                    },
                    "p_SubDirectory": {
                        "type": "string",
                        "defaultValue": "Reservation"
                    }
                },
                "folder": {
                    "name": "Initial Setup/InitialLoad - ADX"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:29Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataCSV')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/BillingData LoadReferenceFiles_OLD')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Loads Reference data for Billing Data",
                "activities": [
                    {
                        "name": "ProductMeterCategory_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_ProductMeterCategory",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "Product",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Product",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FNFCategory",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "FNFCategory",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CCOP Approved",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CCOPApproved",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CostType",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CostType",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "IsPrePay",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "IsPrePay",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ADX_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_ProductMeterCategory",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_ProductMeterCategory",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_ProductMeterCategory"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_ProductMeterCategory",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_ProductMeterCategory <|\nStaging_ProductMeterCategory \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ProductMeterCategory",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ProductMeterCategory_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ProductMeterCategory <| Staging_ProductMeterCategory \n| extend Product=tolower(Product),FNFCategory=tolower(FNFCategory),CCOPApproved=tobool(CCOPApproved),CostType=tolower(CostType),IsPrePay=tobool(IsPrePay)\n| distinct Product, FNFCategory, CCOPApproved, CostType, IsPrePay",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOBBudget_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_LOBBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "YearMonth",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "YearMonth",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Budget",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Budget",
                                            "type": "Int64",
                                            "physicalType": "long"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ADX_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_LOBBudget",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_LOBBudget"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_LOBBudget",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ProductMeterCategory",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_LOBBudget <|\nStaging_LOBBudget \n| where 1==0\n",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOBBudget",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOBBudget_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace LOBBudget <|\nlet UnDefined = 'undefined';\nStaging_LOBBudget\n| extend Year=split(YearMonth, '-')[0],Month=split(YearMonth, '-')[1]\n| extend YearMonth = strcat(Year,'-', substring(strcat('0',Month), -2, 2))\n| project LineOfBusiness, YearMonth, Budget\n| join kind=leftouter LOB on $left.LineOfBusiness==$right.ID\n| extend LineOfBusiness = iif(isempty(ID),UnDefined,ShortName)\n| project LineOfBusiness, YearMonth, Budget",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationLKP_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_ApplicationLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "App ID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Application Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ApplicationName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppAbreviation",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppAbreviation",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ISApplication",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "IsApplication",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AvalibleForCostReporting",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AvailableForCostReporting",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "RTO",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "RTO",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "RPO",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "RPO",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Revenue",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Revenue",
                                            "type": "Double",
                                            "physicalType": "real"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ITAppOwner",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ITAppOWner",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "HostedInAzure",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "HostedInAzure",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppLOB",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppLOB",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "CSVText_referencedata",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.p_FileName_ApplicationLKP",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_ApplicationLKP"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_ApplicationLKP",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOBBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_ApplicationLKP <|\nStaging_ApplicationLKP \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationLKP",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ApplicationLKP_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ApplicationLKP <|\n Staging_ApplicationLKP\n| extend rpo_t = toint(split(RPO, ' ')[0]), HostedInAzure_t = tobool(HostedInAzure)\n| extend rpo_c = iif(isnull(rpo_t),toint(0),rpo_t), HostedInAzure_c = iif(isnull(HostedInAzure_t),false,HostedInAzure_t)\n| project AppID, ApplicationName, AppAbreviation, CostCenter, IsApplication = tobool(IsApplication), AvailableForCostReporting = tobool(AvailableForCostReporting),\n RTO=toint(RTO), RPO = rpo_c, Revenue, ITAppOWner, HostedInAzure= HostedInAzure_c, AppLOB",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationBudget_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Staging_ApplicationBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "SubscriptionGuid",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionGuid",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResourceGroupFQN",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ResourceGroupFQN",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": " AppCode",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppCode",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "BillingMonth",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "BillingMonth",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "BudgetAMT",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "BudgetAMT",
                                            "type": "Double",
                                            "physicalType": "real"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Year",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Year",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Month",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Month",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "CSVText_referencedata",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.p_FileName_ApplicationBudget",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_ApplicationBudget"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Staging_ApplicationBudget",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ApplicationLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_ApplicationBudget <|\nStaging_ApplicationBudget \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationBudget",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ApplicationBudget_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ApplicationBudget <|\n Staging_ApplicationBudget\n| extend YearMonth_t = strcat(Year,'-', substring(strcat('0',Month), -2, 2))\n| project SubscriptionGuid=tolower(SubscriptionGuid), SubscriptionName=tolower(SubscriptionName), ResourceGroupFQN=tolower(ResourceGroupFQN), AppCode=tolower(AppCode), AppName=tolower(AppName), BillingMonth = YearMonth_t, BudgetAMT,\nParentHostingSubHostingID=tolower(ParentHostingSubHostingID)",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "HostingLKP_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Staging_HostingLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentHostingID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentHostingServiceName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingServiceName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubHostingServiceID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubHostingServiceID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubHostingServiceName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubHostingServiceName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ADX_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_HostingLKP",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_HostingLKP"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Staging_HostingLKP",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ApplicationBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_HostingLKP <|\nStaging_HostingLKP \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "HostingLKP",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "HostingLKP_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace HostingLKP <|\nStaging_HostingLKP\n| extend ParentHostingSubHostingID=toreal(ParentHostingSubHostingID),ParentHostingID=tolong(ParentHostingID),SubHostingServiceID=tolong(SubHostingServiceID),ParentHostingServiceName=tolower(ParentHostingServiceName),SubHostingServiceName=tolower(SubHostingServiceName)\n| project ParentHostingSubHostingID, ParentHostingID, ParentHostingServiceName, SubHostingServiceID, SubHostingServiceName",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Copy ITSMOCostMapping to ADX",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging_BillingConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "RGFQN",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ResourceGroupFQN",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubscritionGuid",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionGuid",
                                            "type": "Guid",
                                            "physicalType": "guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResourceGroupName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ResourceGroupName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "HostingService",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "HostingService",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppCode1",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppCode1",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "MigrationStatus",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "MigrationStatus",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CoreSubscription",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CoreSubscription",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "PrevFISSpend",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "PrevFISSpend",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "IsApplication",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "IsApplication",
                                            "type": "Boolean",
                                            "physicalType": "bool"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FinanceLOB",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "FinanceLOB",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ADX_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_ITSMOCostMapping",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_BillingConfig"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Staging_BillingConfig to BillingConfig",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Copy ITSMOCostMapping to ADX",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace BillingConfig <| \nlet UnDefined = 'undefined';\nStaging_BillingConfig\n| extend SubscriptionGuid=toguid(tolower(SubscriptionGuid)),\nResourceGroupFQN=tolower(ResourceGroupFQN),\nSubscriptionName = trim_start(\" \",tolower(replace(@'./.', @'_\\1', SubscriptionName))),\nResourceGroupName=tolower(ResourceGroupName),\nHostingService=tolower(HostingService),\nAppCode1=tolower(AppCode1),\nAppName=tolower(AppName),\nCostCenter=tolower(CostCenter),\nLineOfBusiness=tolower(LineOfBusiness),\nMigrationStatus=tolower(MigrationStatus),\nCoreSubscription=tolower(CoreSubscription),\nPrevFISSpend=tolower(PrevFISSpend),\nIsApplication=iff(isempty(IsApplication) or isnull(IsApplication), false, IsApplication)\n| distinct ResourceGroupFQN, SubscriptionName, SubscriptionGuid, ResourceGroupName, HostingService, AppCode1, AppName, CostCenter, LineOfBusiness, MigrationStatus, CoreSubscription, PrevFISSpend, IsApplication,FinanceLOB\n| join kind=leftouter LOB on $left.LineOfBusiness==$right.ID\n| extend LineOfBusiness = iif(isempty(ID),UnDefined,ShortName)\n| join kind=leftouter (LOB | project ID1=ID, FullName1=FullName) on $left.FinanceLOB==$right.ID1\n| extend FinanceLOB = iif(isempty(ID1),UnDefined,FullName1)\n| join kind=leftouter (HostingLKP | project ParentHostingSubHostingID=tostring(ParentHostingSubHostingID), SubHostingServiceName) on $left.HostingService==$right.ParentHostingSubHostingID\n| extend HostingService = iif(isempty(ParentHostingSubHostingID), UnDefined, SubHostingServiceName)\n| distinct ResourceGroupFQN, SubscriptionName, SubscriptionGuid, ResourceGroupName, HostingService, AppCode1, AppName, CostCenter, LineOfBusiness, MigrationStatus, CoreSubscription, PrevFISSpend, IsApplication,FinanceLOB",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging_BillingConfig",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "HostingLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace Staging_BillingConfig <|\nBillingConfig \n| where 1==0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LoadFlexData_Staging",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear Staging_FlexData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "HttpReadSettings",
                                    "requestMethod": "GET"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "InstanceSizeFlexibilityGroup",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "InstanceSizeFlexibilityGroup",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ArmSkuName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ArmSkuName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Ratio",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Ratio",
                                            "type": "Double",
                                            "physicalType": "real"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "Flex_ISFRatio",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_FlexGroup"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear Staging_FlexData",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Staging_BillingConfig to BillingConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_FlexGroup<|\nStaging_FlexGroup\n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "FlexData",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LoadFlexData_Staging",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace FlexGroup <|\nStaging_FlexGroup",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOB_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_LOB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "ID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ShortName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ShortName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FullName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "FullName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ADX_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_LOBLookUp",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_LOB"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_LOB",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_LOB <|\nStaging_LOB \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOB",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOB_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace LOB <| Staging_LOB \n| extend ShortName=tolower(ShortName),FullName=tolower(FullName)\n| project ID, ShortName, FullName",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_Container": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data/referencedata"
                    },
                    "p_FileName_ProductMeterCategory": {
                        "type": "string",
                        "defaultValue": "ProductMeterCategory.xlsx"
                    },
                    "p_WorkSheetName_ProductMeterCategory": {
                        "type": "string",
                        "defaultValue": "ProductMeterCategory"
                    },
                    "p_FileName_ApplicationLKP": {
                        "type": "string",
                        "defaultValue": "ApplicationLKP.csv"
                    },
                    "p_FileName_ApplicationBudget": {
                        "type": "string",
                        "defaultValue": "ApplicationBudget.csv"
                    },
                    "p_FileName_CostMapping": {
                        "type": "string",
                        "defaultValue": "ITSMOCostMapping.xlsx"
                    },
                    "p_FileName_FlexData": {
                        "type": "string",
                        "defaultValue": "ISFRatio.csv"
                    },
                    "p_WorkSheetName_HostingLKP": {
                        "type": "string",
                        "defaultValue": "HostingLKP"
                    },
                    "p_WorkSheetName_LOBLookUp": {
                        "type": "string",
                        "defaultValue": "LOBLookUp"
                    },
                    "p_WorkSheetName_ITSMOCostMapping": {
                        "type": "string",
                        "defaultValue": "ITSMOCostMapping"
                    },
                    "p_WorkSheetName_LOBBudget": {
                        "type": "string",
                        "defaultValue": "LOBBudget"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:29Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_ExcelSource')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/CSVText_referencedata')]",
                "[concat(variables('factoryId'), '/datasets/Flex_ISFRatio')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline API VMs List v4')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "GetBearerToken",
                        "description": "Use this Web activity to get bearer token",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Set List Variable",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            "url": {
                                "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                "type": "Expression"
                            },
                            "body": {
                                "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{pipeline().parameters.ClientSecret}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set List Variable",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Lookup BillingConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Resource_List",
                            "value": {
                                "value": "@activity('Lookup BillingConfig').output.value",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set Token",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetBearerToken",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Token",
                            "value": {
                                "value": "@concat('Bearer ',activity('GetBearerToken').output.access_token)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Lookup BillingConfig",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Set BillingDate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@pipeline().parameters.BillingConfigKQL",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "adx_BillingConfig",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Set BillingDate",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "BillingDate",
                            "value": {
                                "value": "@pipeline().parameters.BillingDate",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEach Subscription",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "REST APIVMList Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('Resource_List')",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "activities": [
                                {
                                    "name": "Wait for 7 seconds",
                                    "type": "Wait",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST output",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 7
                                    }
                                },
                                {
                                    "name": "Copy REST output",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "@{concat('Bearer ',activity('GetBearerToken').output.access_token)}",
                                                    "type": "Expression"
                                                }
                                            },
                                            "paginationRules": {
                                                "AbsoluteUrl": "$['nextLink']"
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureDataExplorerSink"
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['name']"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['type']"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['location']"
                                                    },
                                                    "sink": {
                                                        "name": "location",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['vmId']"
                                                    },
                                                    "sink": {
                                                        "name": "vmId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['resources'][0]['id']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceId",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_VMs",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_relativeURL": {
                                                    "value": "/subscriptions/@{item().SubscriptionGuid}/providers/Microsoft.Compute/virtualMachines?api-version=2019-12-01",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "adx_APIVMList",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "REST APIVMList Table",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Set Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace  APIVMList <|\nAPIVMList\n| take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "ClientID": {
                        "type": "string",
                        "defaultValue": "aa5605bb-2877-483d-b005-e1439ee1f988"
                    },
                    "tenant_id": {
                        "type": "string",
                        "defaultValue": "8a807b9b-02da-47f3-a903-791a42a2285c"
                    },
                    "BillingDate": {
                        "type": "string"
                    },
                    "BillingConfigKQL": {
                        "type": "string",
                        "defaultValue": "BillingConfig | summarize  SubscriptionName=max(SubscriptionName) by SubscriptionGuid"
                    },
                    "ClientSecret": {
                        "type": "string"
                    }
                },
                "variables": {
                    "Resource_List": {
                        "type": "Array"
                    },
                    "BillingDate": {
                        "type": "String"
                    },
                    "Token": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "VM Metrics"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:29Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/adx_BillingConfig')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_VMs')]",
                "[concat(variables('factoryId'), '/datasets/adx_APIVMList')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API - Reservation - LoadMonthlyData')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "GetDateRange",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Set Parent Directory",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@pipeline().parameters.daterangekql",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": {
                                        "value": "ADFErrorLog",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Set ReportingDate",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetDateRange",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "v_DateRange",
                            "value": {
                                "value": "@activity('GetDateRange').output.value",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEach Subscription",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Set ReportingDate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('v_DateRange')",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Wait for 60 seconds",
                                    "type": "Wait",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 60
                                    }
                                },
                                {
                                    "name": "If Gateway Error",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@or(greater(indexof(activity('Copy REST Output').output.errors[0]['Message'], 'GatewayTimeout' ) ,-1), \ngreater(indexof(activity('Copy REST Output').output.errors[0]['Message'], 'Too many requests' ) ,-1))\n",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Update ADFErrorLog - others",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Reservation - Historic', ReportingDate='@{item().Min_ReportingDate},@{item().Max_ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Copy Rest Ouput', ErrorCode= '@{activity('Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError_Log",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog - others",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Reservation - Historic', ReportingDate='@{item().Min_ReportingDate},@{item().Max_ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Wait 7 minutes",
                                                "type": "Wait",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "waitTimeInSeconds": 420
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Retry Copy REST Output",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Reservation - Historic', ReportingDate='@{item().Min_ReportingDate},@{item().Max_ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Retry Copy Rest Ouput', ErrorCode= '@{activity('Retry Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Retry Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Reservation - Historic', ReportingDate='@{item().Min_ReportingDate},@{item().Max_ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Retry Copy REST Output",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Set Token_copy1",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "RestSource",
                                                        "httpRequestTimeout": "00:05:00",
                                                        "requestInterval": "00.00:00:02.000",
                                                        "requestMethod": "GET",
                                                        "additionalHeaders": {
                                                            "Authorization": {
                                                                "value": "@variables('Token')",
                                                                "type": "Expression"
                                                            }
                                                        },
                                                        "paginationRules": {
                                                            "AbsoluteUrl": "$['nextLink']"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".csv"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "path": "[['id']"
                                                                },
                                                                "sink": {
                                                                    "name": "id",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['name']"
                                                                },
                                                                "sink": {
                                                                    "name": "name",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['type']"
                                                                },
                                                                "sink": {
                                                                    "name": "type",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['reservationOrderId']"
                                                                },
                                                                "sink": {
                                                                    "name": "reservationOrderId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['reservationId']"
                                                                },
                                                                "sink": {
                                                                    "name": "reservationId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['skuName']"
                                                                },
                                                                "sink": {
                                                                    "name": "skuName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['kind']"
                                                                },
                                                                "sink": {
                                                                    "name": "kind",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['reservedHours']"
                                                                },
                                                                "sink": {
                                                                    "name": "reservedHours",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['usageDate']"
                                                                },
                                                                "sink": {
                                                                    "name": "usageDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['usedHours']"
                                                                },
                                                                "sink": {
                                                                    "name": "usedHours",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['minUtilizationPercentage']"
                                                                },
                                                                "sink": {
                                                                    "name": "minUtilizationPercentage",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['avgUtilizationPercentage']"
                                                                },
                                                                "sink": {
                                                                    "name": "avgUtilizationPercentage",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['maxUtilizationPercentage']"
                                                                },
                                                                "sink": {
                                                                    "name": "maxUtilizationPercentage",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['purchasedQuantity']"
                                                                },
                                                                "sink": {
                                                                    "name": "purchasedQuantity",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['remainingQuantity']"
                                                                },
                                                                "sink": {
                                                                    "name": "remainingQuantity",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['totalReservedQuantity']"
                                                                },
                                                                "sink": {
                                                                    "name": "totalReservedQuantity",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['usedQuantity']"
                                                                },
                                                                "sink": {
                                                                    "name": "usedQuantity",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['utilizedPercentage']"
                                                                },
                                                                "sink": {
                                                                    "name": "utilizedPercentage",
                                                                    "type": "String"
                                                                }
                                                            }
                                                        ],
                                                        "collectionReference": "$['value']"
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "RestResource_BillingData",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "p_RelativeURL": {
                                                                "value": "/providers/Microsoft.Billing/billingAccounts/@{item().BillingAccountID}/providers/Microsoft.Consumption/reservationSummaries?grain=daily&$filter=properties/usageDate ge @{item().Min_ReportingDate} AND properties/usageDate le @{item().Max_ReportingDate}&api-version=2019-10-01",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "BillingDataCSV",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "sink_filename": {
                                                                "value": "@{item().BillingAccountID}_@{item().FileKey}.csv",
                                                                "type": "Expression"
                                                            },
                                                            "dir_name": {
                                                                "value": "@variables('RunDate')",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "GetBearerToken_copy1",
                                                "description": "Use this Web activity to get bearer token",
                                                "type": "WebActivity",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Wait 7 minutes",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "method": "POST",
                                                    "headers": {
                                                        "Content-Type": "application/x-www-form-urlencoded"
                                                    },
                                                    "url": {
                                                        "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                                        "type": "Expression"
                                                    },
                                                    "body": {
                                                        "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{activity('GetSPNSecret').output.value}",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Set Token_copy1",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "GetBearerToken_copy1",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "Token",
                                                    "value": {
                                                        "value": "@concat('Bearer ',activity('GetBearerToken').output.access_token)",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Copy REST Output",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Set Token",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:05:00",
                                            "requestInterval": "00.00:00:02.000",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "@variables('Token')",
                                                    "type": "Expression"
                                                }
                                            },
                                            "paginationRules": {
                                                "AbsoluteUrl": "$['nextLink']"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['name']"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['type']"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['reservationOrderId']"
                                                    },
                                                    "sink": {
                                                        "name": "reservationOrderId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['reservationId']"
                                                    },
                                                    "sink": {
                                                        "name": "reservationId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['skuName']"
                                                    },
                                                    "sink": {
                                                        "name": "skuName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['kind']"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['reservedHours']"
                                                    },
                                                    "sink": {
                                                        "name": "reservedHours",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['usageDate']"
                                                    },
                                                    "sink": {
                                                        "name": "usageDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['usedHours']"
                                                    },
                                                    "sink": {
                                                        "name": "usedHours",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['minUtilizationPercentage']"
                                                    },
                                                    "sink": {
                                                        "name": "minUtilizationPercentage",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['avgUtilizationPercentage']"
                                                    },
                                                    "sink": {
                                                        "name": "avgUtilizationPercentage",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['maxUtilizationPercentage']"
                                                    },
                                                    "sink": {
                                                        "name": "maxUtilizationPercentage",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['purchasedQuantity']"
                                                    },
                                                    "sink": {
                                                        "name": "purchasedQuantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['remainingQuantity']"
                                                    },
                                                    "sink": {
                                                        "name": "remainingQuantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['totalReservedQuantity']"
                                                    },
                                                    "sink": {
                                                        "name": "totalReservedQuantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['usedQuantity']"
                                                    },
                                                    "sink": {
                                                        "name": "usedQuantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['utilizedPercentage']"
                                                    },
                                                    "sink": {
                                                        "name": "utilizedPercentage",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_RelativeURL": {
                                                    "value": "/providers/Microsoft.Billing/billingAccounts/@{item().BillingAccountID}/providers/Microsoft.Consumption/reservationSummaries?grain=daily&$filter=properties/usageDate ge @{item().Min_ReportingDate} AND properties/usageDate le @{item().Max_ReportingDate}&api-version=2019-10-01",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "BillingDataCSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "sink_filename": {
                                                    "value": "@{item().BillingAccountID}_@{item().FileKey}.csv",
                                                    "type": "Expression"
                                                },
                                                "dir_name": {
                                                    "value": "@variables('RunDate')",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "GetBearerToken",
                                    "description": "Use this Web activity to get bearer token",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "GetSPNSecret",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/x-www-form-urlencoded"
                                        },
                                        "url": {
                                            "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                            "type": "Expression"
                                        },
                                        "body": {
                                            "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{activity('GetSPNSecret').output.value}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set Token",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "GetBearerToken",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "Token",
                                        "value": {
                                            "value": "@concat('Bearer ',activity('GetBearerToken').output.access_token)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "GetSPNSecret",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": true,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "GET",
                                        "headers": {},
                                        "url": {
                                            "value": "@concat(pipeline().parameters.p_SPNSecretURL,'?api-version=7.0')",
                                            "type": "Expression"
                                        },
                                        "authentication": {
                                            "type": "MSI",
                                            "resource": "https://vault.azure.net"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set Parent Directory",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "RunDate",
                            "value": {
                                "value": "@replace(replace(concat('HistoricData-Reservation-',formatDateTime(utcnow())),':','-'),'.','-')",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "ClientID": {
                        "type": "string",
                        "defaultValue": "aa5605bb-2877-483d-b005-e1439ee1f988"
                    },
                    "tenant_id": {
                        "type": "string",
                        "defaultValue": "8a807b9b-02da-47f3-a903-791a42a2285c"
                    },
                    "daterangekql": {
                        "type": "string",
                        "defaultValue": " range ReportingDate from ago(1296d) to todatetime('2021-08-01') step 1d | extend ReportingDate=todatetime(format_datetime(ReportingDate, 'yyyy-MM-dd')) | extend FileKey = format_datetime(ReportingDate, 'yyyy-MM-dd'),Filter = format_datetime(ReportingDate, 'yyyy-MM') | where Filter == '2021-07' | summarize Min_ReportingDate= min(ReportingDate), Max_ReportingDate = max(ReportingDate) by FileKey | project Min_ReportingDate=format_datetime(Min_ReportingDate,'yyyy-MM-dd'), Max_ReportingDate=format_datetime(Max_ReportingDate,'yyyy-MM-dd'), FileKey,BillingAccountID='88673741'"
                    },
                    "p_SPNSecretURL": {
                        "type": "string",
                        "defaultValue": "https://kv-ccop-dv.vault.azure.net/secrets/CostMGMT-SPN-Secret/eafafff824ca4d8c8a8c604579b70ed1"
                    }
                },
                "variables": {
                    "v_DateRange": {
                        "type": "Array"
                    },
                    "REST_API_ProcessStatus": {
                        "type": "String"
                    },
                    "Token": {
                        "type": "String"
                    },
                    "RunDate": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Billing/HistoricData"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/BillingDataCSV')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API - Usage - LoadMonthlyData_BillingID')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "GetDateRange",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@pipeline().parameters.DaterangeKQL",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": {
                                        "value": "ADFErrorLog",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach Date",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "GetDateRange",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('GetDateRange').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Copy REST Output",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 10,
                                        "retryIntervalInSeconds": 60,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:10:00",
                                            "requestInterval": "00.00:00:02.000",
                                            "requestMethod": "GET",
                                            "paginationRules": {
                                                "AbsoluteUrl": "$['nextLink']"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['kind']"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['name']"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['type']"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['tags']"
                                                    },
                                                    "sink": {
                                                        "name": "tags",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodStartDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodEndDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountOwnerId']"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountName']"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionId']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionName']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['date']"
                                                    },
                                                    "sink": {
                                                        "name": "date",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['product']"
                                                    },
                                                    "sink": {
                                                        "name": "product",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['partNumber']"
                                                    },
                                                    "sink": {
                                                        "name": "partNumber",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterId']"
                                                    },
                                                    "sink": {
                                                        "name": "meterId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['quantity']"
                                                    },
                                                    "sink": {
                                                        "name": "quantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['effectivePrice']"
                                                    },
                                                    "sink": {
                                                        "name": "effectivePrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['cost']"
                                                    },
                                                    "sink": {
                                                        "name": "cost",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['unitPrice']"
                                                    },
                                                    "sink": {
                                                        "name": "unitPrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingCurrency']"
                                                    },
                                                    "sink": {
                                                        "name": "billingCurrency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceLocation']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['consumedService']"
                                                    },
                                                    "sink": {
                                                        "name": "consumedService",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceId']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceName']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['serviceInfo2']"
                                                    },
                                                    "sink": {
                                                        "name": "serviceInfo2",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['invoiceSection']"
                                                    },
                                                    "sink": {
                                                        "name": "invoiceSection",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceGroup']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceGroup",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['offerId']"
                                                    },
                                                    "sink": {
                                                        "name": "offerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['isAzureCreditEligible']"
                                                    },
                                                    "sink": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['publisherType']"
                                                    },
                                                    "sink": {
                                                        "name": "publisherType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['chargeType']"
                                                    },
                                                    "sink": {
                                                        "name": "chargeType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['frequency']"
                                                    },
                                                    "sink": {
                                                        "name": "frequency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterDetails']"
                                                    },
                                                    "sink": {
                                                        "name": "meterDetails",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']",
                                            "mapComplexValuesToString": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_RelativeURL": {
                                                    "value": "/providers/Microsoft.Billing/BillingAccounts/@{item().BillingID}/providers/Microsoft.Consumption/usageDetails?api-version=2019-10-01&$expand=meterDetails&$filter=properties/usageStart gt '@{item().ReportingDateStart}' and properties/usageEnd lt '@{item().ReportingDateEnd}'",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "src_BillingDataTSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "billingdata",
                                                    "type": "Expression"
                                                },
                                                "DirectoryName": {
                                                    "value": "@{formatDateTime(item().ReportingDateEnd, 'yyyy')}/@{formatDateTime(item().ReportingDateEnd, 'MM')}/@{formatDateTime(item().ReportingDateEnd, 'dd')}/UsageByBillingID_Monthly",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@{item().BillingID}_usage.tsv",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Update ADFErrorLog - others",
                                    "type": "AzureDataExplorerCommand",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "command": {
                                            "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().ReportingDate},@{item().ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Copy Rest Ouput', ErrorCode= '@{activity('Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().BillingID}',  ErrorSubscription= '@{item().BillingID}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                            "type": "Expression"
                                        },
                                        "commandTimeout": "00:20:00"
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "Update ADFErrorLog_SimpleError_Log",
                                    "type": "AzureDataExplorerCommand",
                                    "dependsOn": [
                                        {
                                            "activity": "Update ADFErrorLog - others",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "command": {
                                            "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().ReportingDate},@{item().ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().BillingID}',  ErrorSubscription= '@{item().BillingID}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                            "type": "Expression"
                                        },
                                        "commandTimeout": "00:20:00"
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "DataLake to ADX",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 1,
                                        "retryIntervalInSeconds": 300,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureDataExplorerSink"
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "name": "kind",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "id",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "name",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "type",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "tags",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "tags",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingAccountId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingAccountName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingProfileId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingProfileName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "accountOwnerId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "accountName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "subscriptionId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "subscriptionName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "date",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "date",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "product",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "product",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "partNumber",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "partNumber",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "meterId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "meterId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "quantity",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "quantity",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "effectivePrice",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "effectivePrice",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "cost",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "cost",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "unitPrice",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "unitPrice",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingCurrency",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingCurrency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceLocation",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "consumedService",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "consumedService",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "serviceInfo2",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "serviceInfo2",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "invoiceSection",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "invoiceSection",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceGroup",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceGroup",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "offerId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "offerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "publisherType",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "publisherType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "chargeType",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "chargeType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "frequency",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "frequency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "meterDetails",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "meterDetails",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "src_BillingDataTSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": "billingdata",
                                                "DirectoryName": {
                                                    "value": "@{formatDateTime(item().ReportingDateEnd, 'yyyy')}/@{formatDateTime(item().ReportingDateEnd, 'MM')}/@{formatDateTime(item().ReportingDateEnd, 'dd')}/UsageByBillingID_Monthly",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@{item().BillingID}_usage.tsv",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "adx_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "TableName": "BillingData_Tags_Monthly_Aug"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "DaterangeKQL": {
                        "type": "string",
                        "defaultValue": "range ReportingDate from datetime(2021-07-01 00:00:00) to datetime(2021-08-31 00:00:00) step 1d  | extend ReportingDateStart= format_datetime(startofmonth(ReportingDate), 'yyyy-MM-dd'), ReportingDateEnd= format_datetime(endofmonth(ReportingDate), 'yyyy-MM-dd') | distinct ReportingDateStart, ReportingDateEnd | extend JoinKey = 1 | join kind=inner ( print BillingID = '78931757', JoinKey = 1 | union (print BillingID = '88673741', JoinKey = 1) ) on JoinKey | project ReportingDateStart, ReportingDateEnd, BillingID"
                    }
                },
                "folder": {
                    "name": "Billing/HistoricData"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataTSV')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 2 - API Call - Usage')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy REST Output",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 10,
                            "retryIntervalInSeconds": 60,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:10:00",
                                "requestInterval": "00.00:00:02.000",
                                "requestMethod": "GET",
                                "paginationRules": {
                                    "AbsoluteUrl": "$['nextLink']"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".csv"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "path": "[['kind']"
                                        },
                                        "sink": {
                                            "name": "kind",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['id']"
                                        },
                                        "sink": {
                                            "name": "id",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['name']"
                                        },
                                        "sink": {
                                            "name": "name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['type']"
                                        },
                                        "sink": {
                                            "name": "type",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['tags']"
                                        },
                                        "sink": {
                                            "name": "tags",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['billingAccountId']"
                                        },
                                        "sink": {
                                            "name": "billingAccountId",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['billingAccountName']"
                                        },
                                        "sink": {
                                            "name": "billingAccountName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['billingPeriodStartDate']"
                                        },
                                        "sink": {
                                            "name": "billingPeriodStartDate",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['billingPeriodEndDate']"
                                        },
                                        "sink": {
                                            "name": "billingPeriodEndDate",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['billingProfileId']"
                                        },
                                        "sink": {
                                            "name": "billingProfileId",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['billingProfileName']"
                                        },
                                        "sink": {
                                            "name": "billingProfileName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['accountOwnerId']"
                                        },
                                        "sink": {
                                            "name": "accountOwnerId",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['accountName']"
                                        },
                                        "sink": {
                                            "name": "accountName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['subscriptionId']"
                                        },
                                        "sink": {
                                            "name": "subscriptionId",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['subscriptionName']"
                                        },
                                        "sink": {
                                            "name": "subscriptionName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['date']"
                                        },
                                        "sink": {
                                            "name": "date",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['product']"
                                        },
                                        "sink": {
                                            "name": "product",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['partNumber']"
                                        },
                                        "sink": {
                                            "name": "partNumber",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['meterId']"
                                        },
                                        "sink": {
                                            "name": "meterId",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['quantity']"
                                        },
                                        "sink": {
                                            "name": "quantity",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['effectivePrice']"
                                        },
                                        "sink": {
                                            "name": "effectivePrice",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['cost']"
                                        },
                                        "sink": {
                                            "name": "cost",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['unitPrice']"
                                        },
                                        "sink": {
                                            "name": "unitPrice",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['billingCurrency']"
                                        },
                                        "sink": {
                                            "name": "billingCurrency",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['resourceLocation']"
                                        },
                                        "sink": {
                                            "name": "resourceLocation",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['consumedService']"
                                        },
                                        "sink": {
                                            "name": "consumedService",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['resourceId']"
                                        },
                                        "sink": {
                                            "name": "resourceId",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['resourceName']"
                                        },
                                        "sink": {
                                            "name": "resourceName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['serviceInfo2']"
                                        },
                                        "sink": {
                                            "name": "serviceInfo2",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['invoiceSection']"
                                        },
                                        "sink": {
                                            "name": "invoiceSection",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['resourceGroup']"
                                        },
                                        "sink": {
                                            "name": "resourceGroup",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['offerId']"
                                        },
                                        "sink": {
                                            "name": "offerId",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['isAzureCreditEligible']"
                                        },
                                        "sink": {
                                            "name": "isAzureCreditEligible",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['publisherType']"
                                        },
                                        "sink": {
                                            "name": "publisherType",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['chargeType']"
                                        },
                                        "sink": {
                                            "name": "chargeType",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['frequency']"
                                        },
                                        "sink": {
                                            "name": "frequency",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['properties']['meterDetails']"
                                        },
                                        "sink": {
                                            "name": "meterDetails",
                                            "type": "String"
                                        }
                                    }
                                ],
                                "collectionReference": "$['value']",
                                "mapComplexValuesToString": true
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "RestResource_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "p_RelativeURL": {
                                        "value": "/providers/Microsoft.Billing/BillingAccounts/@{pipeline().parameters.p_BillingId}/providers/Microsoft.Consumption/usageDetails?api-version=2019-10-01&$expand=meterDetails&$filter=properties/usageStart gt '@{pipeline().parameters.p_BeginDate}' and properties/usageEnd lt '@{pipeline().parameters.p_EndDate}'",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "src_BillingDataTSV",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.p_containername",
                                        "type": "Expression"
                                    },
                                    "DirectoryName": {
                                        "value": "@pipeline().parameters.p_UsageTempFolderName",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@{guid()}_usage.tsv",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "Update ADFErrorLog",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Copy REST Output",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - UsageByBillingID', ReportingDate='@{pipeline().parameters.p_BeginDate},@{pipeline().parameters.p_EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Copy Rest Ouput', ErrorCode= '@{activity('Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{pipeline().parameters.p_BillingId}',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='@{pipeline().parameters.p_BatchType}'",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Update ADFErrorLog_SimpleError_Log",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Update ADFErrorLog",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - UsageByBillingID', ReportingDate='@{pipeline().parameters.p_BeginDate},@{pipeline().parameters.p_EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{pipeline().parameters.p_BillingId}',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='@{pipeline().parameters.p_BatchType}'",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_BillingId": {
                        "type": "string",
                        "defaultValue": "Default"
                    },
                    "p_BeginDate": {
                        "type": "string"
                    },
                    "p_EndDate": {
                        "type": "string"
                    },
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BatchType": {
                        "type": "string"
                    },
                    "p_UsageTempFolderName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataTSV')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API - Usage - LoadMonthlyData')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "GetDateRange",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Set Parent Directory",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@pipeline().parameters.DateRangeKQL",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": true
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": {
                                        "value": "ADFErrorLog",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Set ReportingDate",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetDateRange",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "v_DateRange",
                            "value": {
                                "value": "@activity('GetDateRange').output.value",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEach Subscription",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Set ReportingDate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('v_DateRange')",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Copy REST Output",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Set Token",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:05:00",
                                            "requestInterval": "00.00:00:02.000",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "@variables('Token')",
                                                    "type": "Expression"
                                                }
                                            },
                                            "paginationRules": {
                                                "AbsoluteUrl": "$['nextLink']"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['kind']"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['name']"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['type']"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodStartDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodEndDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountOwnerId']"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountName']"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionId']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionName']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['date']"
                                                    },
                                                    "sink": {
                                                        "name": "date",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['product']"
                                                    },
                                                    "sink": {
                                                        "name": "product",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['partNumber']"
                                                    },
                                                    "sink": {
                                                        "name": "partNumber",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterId']"
                                                    },
                                                    "sink": {
                                                        "name": "meterId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['quantity']"
                                                    },
                                                    "sink": {
                                                        "name": "quantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['effectivePrice']"
                                                    },
                                                    "sink": {
                                                        "name": "effectivePrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['cost']"
                                                    },
                                                    "sink": {
                                                        "name": "cost",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['unitPrice']"
                                                    },
                                                    "sink": {
                                                        "name": "unitPrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingCurrency']"
                                                    },
                                                    "sink": {
                                                        "name": "billingCurrency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceLocation']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['consumedService']"
                                                    },
                                                    "sink": {
                                                        "name": "consumedService",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceId']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceName']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['invoiceSection']"
                                                    },
                                                    "sink": {
                                                        "name": "invoiceSection",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceGroup']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceGroup",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['offerId']"
                                                    },
                                                    "sink": {
                                                        "name": "offerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['isAzureCreditEligible']"
                                                    },
                                                    "sink": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['publisherType']"
                                                    },
                                                    "sink": {
                                                        "name": "publisherType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['chargeType']"
                                                    },
                                                    "sink": {
                                                        "name": "chargeType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['frequency']"
                                                    },
                                                    "sink": {
                                                        "name": "frequency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterDetails']"
                                                    },
                                                    "sink": {
                                                        "name": "meterDetails",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_RelativeURL": {
                                                    "value": "/subscriptions/@{item().SubscriptionGuid}/providers/Microsoft.Consumption/usageDetails?api-version=2019-10-01&$filter=properties/usageStart gt '@{item().Min_ReportingDate}' and properties/usageEnd lt '@{item().Max_ReportingDate}'",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "BillingDataCSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "sink_filename": {
                                                    "value": "@{item().SubscriptionName}_@{item().SubscriptionGuid}_@{item().Filekey}.csv",
                                                    "type": "Expression"
                                                },
                                                "dir_name": {
                                                    "value": "@{variables('RunDate')}",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Wait for 7 seconds",
                                    "type": "Wait",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 7
                                    }
                                },
                                {
                                    "name": "If Gateway Error",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@or(greater(indexof(activity('Copy REST Output').output.errors[0]['Message'], 'GatewayTimeout' ) ,-1), \ngreater(indexof(activity('Copy REST Output').output.errors[0]['Message'], 'Too many requests' ) ,-1))\n",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Update ADFErrorLog - others",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().Min_ReportingDate},@{item().Max_ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Copy Rest Ouput', ErrorCode= '@{activity('Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError_Log",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog - others",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().Min_ReportingDate},@{item().Max_ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Wait 7 minutes",
                                                "type": "Wait",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "waitTimeInSeconds": 420
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Retry Copy REST Output",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().Min_ReportingDate},@{item().Max_ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Retry Copy Rest Ouput', ErrorCode= '@{activity('Retry Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Retry Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().Min_ReportingDate},@{item().Max_ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Retry Copy REST Output",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Set Token_copy1",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "RestSource",
                                                        "httpRequestTimeout": "00:05:00",
                                                        "requestInterval": "00.00:00:02.000",
                                                        "requestMethod": "GET",
                                                        "additionalHeaders": {
                                                            "Authorization": {
                                                                "value": "@variables('Token')",
                                                                "type": "Expression"
                                                            }
                                                        },
                                                        "paginationRules": {
                                                            "AbsoluteUrl": "$['nextLink']"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".csv"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "path": "[['kind']"
                                                                },
                                                                "sink": {
                                                                    "name": "kind",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['id']"
                                                                },
                                                                "sink": {
                                                                    "name": "id",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['name']"
                                                                },
                                                                "sink": {
                                                                    "name": "name",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['type']"
                                                                },
                                                                "sink": {
                                                                    "name": "type",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingAccountId']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingAccountId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingAccountName']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingAccountName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingPeriodStartDate']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingPeriodStartDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingPeriodEndDate']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingPeriodEndDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingProfileId']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingProfileId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingProfileName']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingProfileName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['accountOwnerId']"
                                                                },
                                                                "sink": {
                                                                    "name": "accountOwnerId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['accountName']"
                                                                },
                                                                "sink": {
                                                                    "name": "accountName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['subscriptionId']"
                                                                },
                                                                "sink": {
                                                                    "name": "subscriptionId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['subscriptionName']"
                                                                },
                                                                "sink": {
                                                                    "name": "subscriptionName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['date']"
                                                                },
                                                                "sink": {
                                                                    "name": "date",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['product']"
                                                                },
                                                                "sink": {
                                                                    "name": "product",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['partNumber']"
                                                                },
                                                                "sink": {
                                                                    "name": "partNumber",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['meterId']"
                                                                },
                                                                "sink": {
                                                                    "name": "meterId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['quantity']"
                                                                },
                                                                "sink": {
                                                                    "name": "quantity",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['effectivePrice']"
                                                                },
                                                                "sink": {
                                                                    "name": "effectivePrice",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['cost']"
                                                                },
                                                                "sink": {
                                                                    "name": "cost",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['unitPrice']"
                                                                },
                                                                "sink": {
                                                                    "name": "unitPrice",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingCurrency']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingCurrency",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['resourceLocation']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceLocation",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['consumedService']"
                                                                },
                                                                "sink": {
                                                                    "name": "consumedService",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['resourceId']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['resourceName']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['invoiceSection']"
                                                                },
                                                                "sink": {
                                                                    "name": "invoiceSection",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['resourceGroup']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceGroup",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['offerId']"
                                                                },
                                                                "sink": {
                                                                    "name": "offerId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['isAzureCreditEligible']"
                                                                },
                                                                "sink": {
                                                                    "name": "isAzureCreditEligible",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['publisherType']"
                                                                },
                                                                "sink": {
                                                                    "name": "publisherType",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['chargeType']"
                                                                },
                                                                "sink": {
                                                                    "name": "chargeType",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['frequency']"
                                                                },
                                                                "sink": {
                                                                    "name": "frequency",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['meterDetails']"
                                                                },
                                                                "sink": {
                                                                    "name": "meterDetails",
                                                                    "type": "String"
                                                                }
                                                            }
                                                        ],
                                                        "collectionReference": "$['value']"
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "RestResource_BillingData",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "p_RelativeURL": {
                                                                "value": "/subscriptions/@{item().SubscriptionGuid}/providers/Microsoft.Consumption/usageDetails?api-version=2019-10-01&$filter=properties/usageStart gt '@{item().Min_ReportingDate}' and properties/usageEnd lt '@{item().Max_ReportingDate}'",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "BillingDataCSV",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "sink_filename": {
                                                                "value": "@{item().SubscriptionName}_@{item().SubscriptionGuid}_@{item().Filekey}.csv",
                                                                "type": "Expression"
                                                            },
                                                            "dir_name": {
                                                                "value": "@{variables('RunDate')}",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "GetBearerToken_copy1",
                                                "description": "Use this Web activity to get bearer token",
                                                "type": "WebActivity",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Wait 7 minutes",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "method": "POST",
                                                    "headers": {
                                                        "Content-Type": "application/x-www-form-urlencoded"
                                                    },
                                                    "url": {
                                                        "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                                        "type": "Expression"
                                                    },
                                                    "body": {
                                                        "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{activity('GetSPNSecret').output.value}",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Set Token_copy1",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "GetBearerToken_copy1",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "Token",
                                                    "value": {
                                                        "value": "@concat('Bearer ',activity('GetBearerToken').output.access_token)",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "GetBearerToken",
                                    "description": "Use this Web activity to get bearer token",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "GetSPNSecret",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/x-www-form-urlencoded"
                                        },
                                        "url": {
                                            "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                            "type": "Expression"
                                        },
                                        "body": {
                                            "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{activity('GetSPNSecret').output.value}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set Token",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "GetBearerToken",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "Token",
                                        "value": {
                                            "value": "@concat('Bearer ',activity('GetBearerToken').output.access_token)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "GetSPNSecret",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": true,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "GET",
                                        "headers": {},
                                        "url": {
                                            "value": "@concat(pipeline().parameters.p_SPNSecretURL,'?api-version=7.0')",
                                            "type": "Expression"
                                        },
                                        "authentication": {
                                            "type": "MSI",
                                            "resource": "https://vault.azure.net"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set Parent Directory",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "RunDate",
                            "value": {
                                "value": "@replace(replace(concat('HistoricData-Usage-',formatDateTime(utcnow())),':','-'),'.','-')",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "ClientID": {
                        "type": "string",
                        "defaultValue": "aa5605bb-2877-483d-b005-e1439ee1f988"
                    },
                    "tenant_id": {
                        "type": "string",
                        "defaultValue": "8a807b9b-02da-47f3-a903-791a42a2285c"
                    },
                    "DateRangeKQL": {
                        "type": "string",
                        "defaultValue": "range ReportingDate from ago(5000d) to todatetime('2021-07-31') step 1d | extend ReportingDate=todatetime(format_datetime(ReportingDate, 'yyyy-MM-dd')) | extend FileKey = format_datetime(ReportingDate, 'yyyy-MM') | where FileKey contains '2018' or FileKey contains '2019' or FileKey contains '2020' or FileKey contains '2021' | summarize Min_ReportingDate= min(ReportingDate), Max_ReportingDate = max(ReportingDate) by FileKey | project Min_ReportingDate=format_datetime(Min_ReportingDate,'yyyy-MM-dd'), Max_ReportingDate=format_datetime(Max_ReportingDate,'yyyy-MM-dd'), FileKey | extend dummykey = 1 //| order by Min_ReportingDate asc | join  kind=fullouter ( [@\"BillingData_New\"] | where subscriptionName in ('crystal granger softprocorp', 'dev env', 'fnf-information_governance-prod-01', 'fnf-infrastructure-keyvault', 'sl-exos-all' ) | distinct subscriptionId,subscriptionName | union (     [@\"BillingConfig\"]     | where SubscriptionGuid in ('85007903-ccaa-41f0-9a74-1be006bb429f', '0e6d9ec9-3f9f-4354-9d2e-15faed542546', 'a2ca26b7-774e-4207-801a-c45151ff310d', 'f1743aea-3bf1-4feb-9b59-8059836a5999') | project subscriptionId=tostring(SubscriptionGuid), subscriptionName=SubscriptionName | distinct subscriptionId,subscriptionName ) | extend dummkey = 1)on $left.dummykey==$right.dummkey | project Min_ReportingDate, Max_ReportingDate, SubscriptionName=subscriptionName, SubscriptionGuid=subscriptionId, FileKey | distinct Min_ReportingDate,Max_ReportingDate,SubscriptionName,SubscriptionGuid,FileKey | order by Min_ReportingDate asc //| summarize format_bytes(sum(estimate_data_size(*)),4,'MB')"
                    },
                    "p_SPNSecretURL": {
                        "type": "string",
                        "defaultValue": "https://kv-ccop-dv.vault.azure.net/secrets/CostMGMT-SPN-Secret/eafafff824ca4d8c8a8c604579b70ed1"
                    }
                },
                "variables": {
                    "v_DateRange": {
                        "type": "Array"
                    },
                    "REST_API_ProcessStatus": {
                        "type": "String"
                    },
                    "Token": {
                        "type": "String"
                    },
                    "RunDate": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Billing/HistoricData"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/BillingDataCSV')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 1 - API Call - Forecast_copy1')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get ForeCast Date Range",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Lookup Max Error TimeStamp",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "range ReportingDate from now() to now(180d) step 1d\n| extend endofMonth=endofmonth(ReportingDate)\n| distinct endofMonth\n| top @{pipeline().parameters.p_ForeCastMonths} by endofMonth asc nulls last\n| summarize EndDate=max(endofMonth)\n| project BeginDate=format_datetime(now(), 'yyyy-MM-dd'), EndDate=format_datetime(EndDate, 'yyyy-MM-dd')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Get SubID and RG",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Lookup Max Error TimeStamp",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "let consolidated = 'consolidated';\nBillingData\n| where billingDate > ago(90d)\n| distinct subscriptionId, resourceGroup\n| extend resourceGroup = iff(isempty(resourceGroup), consolidated, resourceGroup)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "For Each Sub and RG",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get SubID and RG",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Clean up Forecast Folder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get SubID and RG').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Get ForeCast Data",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "additionalColumns": [
                                                {
                                                    "name": "SubscriptionID",
                                                    "value": {
                                                        "value": "@{item().subscriptionId}",
                                                        "type": "Expression"
                                                    }
                                                },
                                                {
                                                    "name": "ResourceGroup",
                                                    "value": {
                                                        "value": "@{item().resourceGroup}",
                                                        "type": "Expression"
                                                    }
                                                }
                                            ],
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "POST",
                                            "requestBody": {
                                                "value": "{\n    \"type\": \"Usage\",\n    \"dataSet\": {\n        \"granularity\": \"Daily\",\n        \"aggregation\": {\n            \"totalCost\": {\n                \"name\": \"Cost\",\n                \"function\": \"Sum\"\n            }\n        },\n        \"sorting\": [\n            {\n                \"direction\": \"ascending\",\n                \"name\": \"UsageDate\"\n            }\n        ]\n    },\n    \"timeframe\": \"Custom\",\n    \"timePeriod\": {\n        \"from\": \"@{activity('Get ForeCast Date Range').output.value[0].BeginDate}\",\n        \"to\": \"@{activity('Get ForeCast Date Range').output.value[0].EndDate}\"\n    },\n    \"includeActualCost\": false,\n    \"includeFreshPartialCost\": false\n}",
                                                "type": "Expression"
                                            },
                                            "additionalHeaders": {
                                                "Content-type": "application/json"
                                            },
                                            "paginationRules": {
                                                "AbsoluteUrl": "$['nextLink']",
                                                "supportRFC5988": "true"
                                            }
                                        },
                                        "sink": {
                                            "type": "JsonSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "JsonWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_RelativeURL": {
                                                    "value": "@if(equals(item().resourceGroup,'consolidated'),concat('subscriptions/',item().subscriptionId,'/providers/Microsoft.CostManagement/forecast?api-version=2021-10-01'),concat('subscriptions/',item().subscriptionId,'/resourceGroups/',item().resourceGroup,'/providers/Microsoft.CostManagement/forecast?api-version=2021-10-01'))",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "BillingSummary",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FilePath": {
                                                    "value": "@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'yyyy')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'MM')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'dd')}/@{variables('SubFolder')}/@{variables('JsonPath')}/@{item().subscriptionId}_@{item().resourceGroup}.json",
                                                    "type": "Expression"
                                                },
                                                "container": {
                                                    "value": "@pipeline().parameters.p_containername",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "If Gateway Error",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get ForeCast Data",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@or(greater(indexof(activity('Get ForeCast Data').output.errors[0]['Message'], 'GatewayTimeout' ) ,-1), \ngreater(indexof(activity('Get ForeCast Data').output.errors[0]['Message'], 'Too many requests' ) ,-1))",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Update ADFErrorLog",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Forecast', ReportingDate='@{activity('Get ForeCast Date Range').output.value[0].BeginDate},@{activity('Get ForeCast Date Range').output.value[0].EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Copy Rest Ouput', ErrorCode= '@{activity('Get ForeCast Data').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Get ForeCast Data').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().resourceGroup}',  ErrorSubscription= '@{item().subscriptionId}', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='Daily'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError_Log",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Forecast', ReportingDate='@{activity('Get ForeCast Date Range').output.value[0].BeginDate},@{activity('Get ForeCast Date Range').output.value[0].EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().resourceGroup}',  ErrorSubscription= '@{item().subscriptionId}', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='Daily'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Wait 3 minutes",
                                                "type": "Wait",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "waitTimeInSeconds": 180
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_retry",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get ForeCast Data_retry",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Forecast', ReportingDate='@{activity('Get ForeCast Data_retry').output.value[0].BeginDate},@{activity('Get ForeCast Data_retry').output.value[0].EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Copy Rest Ouput', ErrorCode= '@{activity('Get ForeCast Data_retry').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Get ForeCast Data_retry').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().resourceGroup}',  ErrorSubscription= '@{item().subscriptionId}', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='Daily'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError_Log_retry",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog_retry",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Forecast', ReportingDate='@{activity('Get ForeCast Data_retry').output.value[0].BeginDate},@{activity('Get ForeCast Data_retry').output.value[0].EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().resourceGroup}',  ErrorSubscription= '@{item().subscriptionId}', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='Daily'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Get ForeCast Data_retry",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Wait 3 minutes",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "RestSource",
                                                        "additionalColumns": [
                                                            {
                                                                "name": "SubscriptionID",
                                                                "value": {
                                                                    "value": "@{item().subscriptionId}",
                                                                    "type": "Expression"
                                                                }
                                                            },
                                                            {
                                                                "name": "ResourceGroup",
                                                                "value": {
                                                                    "value": "@{item().resourceGroup}",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        ],
                                                        "httpRequestTimeout": "00:01:40",
                                                        "requestInterval": "00.00:00:00.010",
                                                        "requestMethod": "POST",
                                                        "requestBody": {
                                                            "value": "{\n    \"type\": \"Usage\",\n    \"dataSet\": {\n        \"granularity\": \"Daily\",\n        \"aggregation\": {\n            \"totalCost\": {\n                \"name\": \"Cost\",\n                \"function\": \"Sum\"\n            }\n        },\n        \"sorting\": [\n            {\n                \"direction\": \"ascending\",\n                \"name\": \"UsageDate\"\n            }\n        ]\n    },\n    \"timeframe\": \"Custom\",\n    \"timePeriod\": {\n        \"from\": \"@{activity('Get ForeCast Date Range').output.value[0].BeginDate}\",\n        \"to\": \"@{activity('Get ForeCast Date Range').output.value[0].EndDate}\"\n    },\n    \"includeActualCost\": false,\n    \"includeFreshPartialCost\": false\n}",
                                                            "type": "Expression"
                                                        },
                                                        "additionalHeaders": {
                                                            "Content-type": "application/json"
                                                        },
                                                        "paginationRules": {
                                                            "AbsoluteUrl": "$['nextLink']",
                                                            "supportRFC5988": "true"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "JsonSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "JsonWriteSettings"
                                                        }
                                                    },
                                                    "enableStaging": false
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "RestResource_BillingData",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "p_RelativeURL": {
                                                                "value": "@if(equals(item().resourceGroup,'consolidated'),concat('subscriptions/',item().subscriptionId,'/providers/Microsoft.CostManagement/forecast?api-version=2021-10-01'),concat('subscriptions/',item().subscriptionId,'/resourceGroups/',item().resourceGroup,'/providers/Microsoft.CostManagement/forecast?api-version=2021-10-01'))",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "BillingSummary",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "FilePath": {
                                                                "value": "@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'yyyy')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'MM')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'dd')}/@{variables('SubFolder')}/@{variables('JsonPath')}/@{item().subscriptionId}_@{item().resourceGroup}.json",
                                                                "type": "Expression"
                                                            },
                                                            "container": {
                                                                "value": "@pipeline().parameters.p_containername",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Clean up Forecast Folder",
                        "type": "Delete",
                        "dependsOn": [
                            {
                                "activity": "Get ForeCast Date Range",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "FolderValidation",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FilePath": {
                                        "value": "@{pipeline().parameters.p_containername}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'yyyy')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'MM')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'dd')}/@{variables('SubFolder')}",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "enableLogging": false,
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            }
                        }
                    },
                    {
                        "name": "Lookup Max Error TimeStamp",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "let _lastretry = toscalar(WaterMark | distinct ForeCast_LastRetry);\nADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - Forecast'\n| summarize MaxErrorTimeStamp = max(ErrorTimestamp)\n| project MaxErrorTimeStamp=iif(isnull(MaxErrorTimeStamp),_lastretry,MaxErrorTimeStamp)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            }
                        }
                    },
                    {
                        "name": "Update WaterMark",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Insert into Forecast",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace WaterMark <|\nWaterMark\n| project BillingData_LastRetry,Reservation_LastRetry, Credit_LastRetry, ReservationDesc_LastRetry,MarketPlace_LastRetry,ForeCast_LastRetry=todatetime('@{activity('Lookup Max Error TimeStamp').output.firstRow.MaxErrorTimeStamp}')",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Create CSV from JSON",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "For Each Sub and RG",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "JsonToCSV - ForeCast",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "container": {
                                        "value": "'@{pipeline().parameters.p_containername}'",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "'{@formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'yyyy')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'MM')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'dd')}/@{variables('SubFolder')}'",
                                        "type": "Expression"
                                    },
                                    "filename": "'*'",
                                    "JsonFolder": {
                                        "value": "'@{variables('JsonPath')}'",
                                        "type": "Expression"
                                    },
                                    "CsvFolder": {
                                        "value": "'@{variables('CSVPath')}'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "ReadJsonFiles": {},
                                    "OutputToCSV": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Copy to Forecast Staging Table",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Create CSV from JSON",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Truncate Staging",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "wildcardFolderPath": {
                                        "value": "@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'yyyy')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'MM')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'dd')}/@{variables('SubFolder')}/@{variables('CSVPath')}",
                                        "type": "Expression"
                                    },
                                    "wildcardFileName": "*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "SubscriptionID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "subscriptionId",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResourceGroup",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "resourceGroup",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Cost",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "cost",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "UsageDate",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "usageDate",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "CSVText",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_containername",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'yyyy')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'MM')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'dd')}/@{variables('SubFolder')}/@{variables('CSVPath')}/*",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_Forecast"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Truncate Staging",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace Staging_Forecast <| Staging_Forecast | take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Insert into Forecast",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Copy to Forecast Staging Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-append Forecast_History_Usage <| \nlet UnDefined = 'undefined'; \nlet consolidated = 'consolidated';\nStaging_Forecast | where resourceGroup <> consolidated | project subscriptionId, resourceGroup, cost=toreal(cost), usageDate=todatetime(usageDate),LogDate=now()\n| union (\nStaging_Forecast | where resourceGroup <> consolidated | extend cost=toreal(cost), usageDate=todatetime(usageDate) | summarize cost=sum(cost) by subscriptionId, usageDate\n| join kind=inner (Staging_Forecast | where resourceGroup == consolidated | project SubID=subscriptionId,SubCost=toreal(cost),UsgDate=todatetime(usageDate)) \non $left.subscriptionId==$right.SubID and $left.usageDate==$right.UsgDate\n| extend resourceGroup = UnDefined\n| project subscriptionId, resourceGroup, cost=SubCost-cost,usageDate,LogDate=now()\n| where cost > 0\n)",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_ForecastMonths": {
                        "type": "string",
                        "defaultValue": "3"
                    },
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    }
                },
                "variables": {
                    "JsonPath": {
                        "type": "String",
                        "defaultValue": "Json"
                    },
                    "CSVPath": {
                        "type": "String",
                        "defaultValue": "Csv"
                    },
                    "SubFolder": {
                        "type": "String",
                        "defaultValue": "Forecast_Usage"
                    },
                    "ErrorPercentage": {
                        "type": "String",
                        "defaultValue": "25"
                    }
                },
                "folder": {
                    "name": "Forecast_Usage_APITest"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/datasets/FolderValidation')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/dataflows/JsonToCSV - ForeCast')]",
                "[concat(variables('factoryId'), '/datasets/CSVText')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/BillingSummary')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 1 - API Call - Forecast')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get ForeCast Date Range",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Lookup Max Error TimeStamp",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "range ReportingDate from now() to now(180d) step 1d\n| extend endofMonth=endofmonth(ReportingDate)\n| distinct endofMonth\n| top @{pipeline().parameters.p_ForeCastMonths} by endofMonth asc nulls last\n| summarize EndDate=max(endofMonth)\n| project BeginDate=format_datetime(now(), 'yyyy-MM-dd'), EndDate=format_datetime(EndDate, 'yyyy-MM-dd')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Get SubID and RG",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Lookup Max Error TimeStamp",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "let consolidated = 'consolidated';\nBillingData\n| where billingDate > ago(90d)\n| distinct subscriptionId, resourceGroup\n| extend resourceGroup = iff(isempty(resourceGroup), consolidated, resourceGroup)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "For Each Sub and RG",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get SubID and RG",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Clean up Forecast Folder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get SubID and RG').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Get ForeCast Data",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "additionalColumns": [
                                                {
                                                    "name": "SubscriptionID",
                                                    "value": {
                                                        "value": "@{item().subscriptionId}",
                                                        "type": "Expression"
                                                    }
                                                },
                                                {
                                                    "name": "ResourceGroup",
                                                    "value": {
                                                        "value": "@{item().resourceGroup}",
                                                        "type": "Expression"
                                                    }
                                                }
                                            ],
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.100",
                                            "requestMethod": "POST",
                                            "requestBody": {
                                                "value": "{\n    \"type\": \"AmortizedCost\",\n    \"dataSet\": {\n        \"granularity\": \"Daily\",\n        \"aggregation\": {\n            \"totalCost\": {\n                \"name\": \"Cost\",\n                \"function\": \"Sum\"\n            }\n        },\n        \"sorting\": [\n            {\n                \"direction\": \"ascending\",\n                \"name\": \"UsageDate\"\n            }\n        ]\n    },\n    \"timeframe\": \"Custom\",\n    \"timePeriod\": {\n        \"from\": \"@{activity('Get ForeCast Date Range').output.value[0].BeginDate}\",\n        \"to\": \"@{activity('Get ForeCast Date Range').output.value[0].EndDate}\"\n    },\n    \"includeActualCost\": false,\n    \"includeFreshPartialCost\": false\n}",
                                                "type": "Expression"
                                            },
                                            "additionalHeaders": {
                                                "Content-type": "application/json"
                                            },
                                            "paginationRules": {
                                                "AbsoluteUrl": "$['nextLink']",
                                                "supportRFC5988": "true"
                                            }
                                        },
                                        "sink": {
                                            "type": "JsonSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "JsonWriteSettings"
                                            }
                                        },
                                        "enableStaging": false,
                                        "parallelCopies": 10
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_RelativeURL": {
                                                    "value": "@if(equals(item().resourceGroup,'consolidated'),concat('subscriptions/',item().subscriptionId,'/providers/Microsoft.CostManagement/forecast?api-version=2021-10-01'),concat('subscriptions/',item().subscriptionId,'/resourceGroups/',item().resourceGroup,'/providers/Microsoft.CostManagement/forecast?api-version=2021-10-01'))",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "BillingSummary",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FilePath": {
                                                    "value": "@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'yyyy')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'MM')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'dd')}/@{variables('SubFolder')}/@{variables('JsonPath')}/@{item().subscriptionId}_@{item().resourceGroup}.json",
                                                    "type": "Expression"
                                                },
                                                "container": {
                                                    "value": "@pipeline().parameters.p_containername",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "If Gateway Error",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get ForeCast Data",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@or(greater(indexof(activity('Get ForeCast Data').output.errors[0]['Message'], 'GatewayTimeout' ) ,-1), \ngreater(indexof(activity('Get ForeCast Data').output.errors[0]['Message'], 'Too many requests' ) ,-1))",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Update ADFErrorLog",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Forecast', ReportingDate='@{activity('Get ForeCast Date Range').output.value[0].BeginDate},@{activity('Get ForeCast Date Range').output.value[0].EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Copy Rest Ouput', ErrorCode= '@{activity('Get ForeCast Data').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Get ForeCast Data').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().resourceGroup}',  ErrorSubscription= '@{item().subscriptionId}', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='Daily'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError_Log",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Forecast', ReportingDate='@{activity('Get ForeCast Date Range').output.value[0].BeginDate},@{activity('Get ForeCast Date Range').output.value[0].EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().resourceGroup}',  ErrorSubscription= '@{item().subscriptionId}', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='Daily'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Wait 3 minutes",
                                                "type": "Wait",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "waitTimeInSeconds": 180
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_retry",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get ForeCast Data_retry",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Forecast', ReportingDate='@{activity('Get ForeCast Data_retry').output.value[0].BeginDate},@{activity('Get ForeCast Data_retry').output.value[0].EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Copy Rest Ouput', ErrorCode= '@{activity('Get ForeCast Data_retry').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Get ForeCast Data_retry').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().resourceGroup}',  ErrorSubscription= '@{item().subscriptionId}', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='Daily'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError_Log_retry",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog_retry",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Forecast', ReportingDate='@{activity('Get ForeCast Data_retry').output.value[0].BeginDate},@{activity('Get ForeCast Data_retry').output.value[0].EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().resourceGroup}',  ErrorSubscription= '@{item().subscriptionId}', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='Daily'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Get ForeCast Data_retry",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Wait 3 minutes",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "RestSource",
                                                        "additionalColumns": [
                                                            {
                                                                "name": "SubscriptionID",
                                                                "value": {
                                                                    "value": "@{item().subscriptionId}",
                                                                    "type": "Expression"
                                                                }
                                                            },
                                                            {
                                                                "name": "ResourceGroup",
                                                                "value": {
                                                                    "value": "@{item().resourceGroup}",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        ],
                                                        "httpRequestTimeout": "00:01:40",
                                                        "requestInterval": "00.00:00:00.010",
                                                        "requestMethod": "POST",
                                                        "requestBody": {
                                                            "value": "{\n    \"type\": \"AmortizedCost\",\n    \"dataSet\": {\n        \"granularity\": \"Daily\",\n        \"aggregation\": {\n            \"totalCost\": {\n                \"name\": \"Cost\",\n                \"function\": \"Sum\"\n            }\n        },\n        \"sorting\": [\n            {\n                \"direction\": \"ascending\",\n                \"name\": \"UsageDate\"\n            }\n        ]\n    },\n    \"timeframe\": \"Custom\",\n    \"timePeriod\": {\n        \"from\": \"@{activity('Get ForeCast Date Range').output.value[0].BeginDate}\",\n        \"to\": \"@{activity('Get ForeCast Date Range').output.value[0].EndDate}\"\n    },\n    \"includeActualCost\": false,\n    \"includeFreshPartialCost\": false\n}",
                                                            "type": "Expression"
                                                        },
                                                        "additionalHeaders": {
                                                            "Content-type": "application/json"
                                                        },
                                                        "paginationRules": {
                                                            "AbsoluteUrl": "$['nextLink']",
                                                            "supportRFC5988": "true"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "JsonSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "JsonWriteSettings"
                                                        }
                                                    },
                                                    "enableStaging": false
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "RestResource_BillingData",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "p_RelativeURL": {
                                                                "value": "@if(equals(item().resourceGroup,'consolidated'),concat('subscriptions/',item().subscriptionId,'/providers/Microsoft.CostManagement/forecast?api-version=2021-10-01'),concat('subscriptions/',item().subscriptionId,'/resourceGroups/',item().resourceGroup,'/providers/Microsoft.CostManagement/forecast?api-version=2021-10-01'))",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "BillingSummary",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "FilePath": {
                                                                "value": "@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'yyyy')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'MM')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'dd')}/@{variables('SubFolder')}/@{variables('JsonPath')}/@{item().subscriptionId}_@{item().resourceGroup}.json",
                                                                "type": "Expression"
                                                            },
                                                            "container": {
                                                                "value": "@pipeline().parameters.p_containername",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Clean up Forecast Folder",
                        "type": "Delete",
                        "dependsOn": [
                            {
                                "activity": "Get ForeCast Date Range",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "FolderValidation",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FilePath": {
                                        "value": "@{pipeline().parameters.p_containername}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'yyyy')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'MM')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'dd')}/@{variables('SubFolder')}",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "enableLogging": false,
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            }
                        }
                    },
                    {
                        "name": "Lookup Max Error TimeStamp",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "let _lastretry = toscalar(WaterMark | distinct ForeCast_LastRetry);\nADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - Forecast'\n| summarize MaxErrorTimeStamp = max(ErrorTimestamp)\n| project MaxErrorTimeStamp=iif(isnull(MaxErrorTimeStamp),_lastretry,MaxErrorTimeStamp)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            }
                        }
                    },
                    {
                        "name": "Update WaterMark",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Insert into Forecast",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace WaterMark <|\nWaterMark\n| project BillingData_LastRetry,Reservation_LastRetry, Credit_LastRetry, ReservationDesc_LastRetry,MarketPlace_LastRetry,ForeCast_LastRetry=todatetime('@{activity('Lookup Max Error TimeStamp').output.firstRow.MaxErrorTimeStamp}')",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Create CSV from JSON",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "For Each Sub and RG",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "JsonToCSV - ForeCast",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "container": {
                                        "value": "'@{pipeline().parameters.p_containername}'",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "'@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'yyyy')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'MM')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'dd')}/@{variables('SubFolder')}'",
                                        "type": "Expression"
                                    },
                                    "filename": "'*'",
                                    "JsonFolder": {
                                        "value": "'@{variables('JsonPath')}'",
                                        "type": "Expression"
                                    },
                                    "CsvFolder": {
                                        "value": "'@{variables('CSVPath')}'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "ReadJsonFiles": {},
                                    "OutputToCSV": {}
                                },
                                "linkedServiceParameters": {}
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Copy to Forecast Staging Table",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Create CSV from JSON",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Truncate Staging",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "wildcardFolderPath": {
                                        "value": "@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'yyyy')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'MM')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'dd')}/@{variables('SubFolder')}/@{variables('CSVPath')}",
                                        "type": "Expression"
                                    },
                                    "wildcardFileName": "*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "SubscriptionID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "subscriptionId",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResourceGroup",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "resourceGroup",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Cost",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "cost",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "UsageDate",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "usageDate",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "CSVText",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_containername",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'yyyy')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'MM')}/@{formatDateTime(activity('Get ForeCast Date Range').output.value[0].BeginDate, 'dd')}/@{variables('SubFolder')}/@{variables('CSVPath')}/*",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_Forecast"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Truncate Staging",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace Staging_Forecast <| Staging_Forecast | take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Insert into Forecast",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Copy to Forecast Staging Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-append Forecast_History <| \nlet UnDefined = 'undefined'; \nlet consolidated = 'consolidated';\nStaging_Forecast | where resourceGroup <> consolidated | project subscriptionId, resourceGroup, cost=toreal(cost), usageDate=todatetime(usageDate),LogDate=now()\n| union (\nStaging_Forecast | where resourceGroup <> consolidated | extend cost=toreal(cost), usageDate=todatetime(usageDate) | summarize cost=sum(cost) by subscriptionId, usageDate\n| join kind=inner (Staging_Forecast | where resourceGroup == consolidated | project SubID=subscriptionId,SubCost=toreal(cost),UsgDate=todatetime(usageDate)) \non $left.subscriptionId==$right.SubID and $left.usageDate==$right.UsgDate\n| extend resourceGroup = UnDefined\n| project subscriptionId, resourceGroup, cost=SubCost-cost,usageDate,LogDate=now()\n| where cost > 0\n)",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_ForecastMonths": {
                        "type": "string",
                        "defaultValue": "3"
                    },
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    }
                },
                "variables": {
                    "JsonPath": {
                        "type": "String",
                        "defaultValue": "Json"
                    },
                    "CSVPath": {
                        "type": "String",
                        "defaultValue": "Csv"
                    },
                    "SubFolder": {
                        "type": "String",
                        "defaultValue": "Forecast"
                    },
                    "ErrorPercentage": {
                        "type": "String",
                        "defaultValue": "25"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-05-30T10:06:03Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/datasets/FolderValidation')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/dataflows/JsonToCSV - ForeCast')]",
                "[concat(variables('factoryId'), '/datasets/CSVText')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/BillingSummary')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 1 - API Call - ReservationOrders')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Update ADX Table",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "For Each ReservationOrderID_copy1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 2 - ADX Stage to Prod - ReservationOrders",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_StorageAccountContainer": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "p_BillingDate": {
                                    "value": "@variables('v_ReportingDates')",
                                    "type": "Expression"
                                },
                                "p_SubDirectory": {
                                    "value": "@variables('v_SubDirectory')",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "For Each ReservationOrderID_copy1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get ReservationOrderIDs",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get ReservationOrderIDs').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Get Reservation Orders_copy1",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 3,
                                        "retryIntervalInSeconds": 60,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET"
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "$['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['type']"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['name']"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['etag']"
                                                    },
                                                    "sink": {
                                                        "name": "etag",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['properties']['displayName']"
                                                    },
                                                    "sink": {
                                                        "name": "displayName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['properties']['requestDateTime']"
                                                    },
                                                    "sink": {
                                                        "name": "requestDateTime",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['properties']['createdDateTime']"
                                                    },
                                                    "sink": {
                                                        "name": "createdDateTime",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['properties']['expiryDate']"
                                                    },
                                                    "sink": {
                                                        "name": "expiryDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['properties']['benefitStartTime']"
                                                    },
                                                    "sink": {
                                                        "name": "benefitStartTime",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['properties']['term']"
                                                    },
                                                    "sink": {
                                                        "name": "term",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['properties']['provisioningState']"
                                                    },
                                                    "sink": {
                                                        "name": "provisioningState",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['properties']['originalQuantity']"
                                                    },
                                                    "sink": {
                                                        "name": "originalQuantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['properties']['billingPlan']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPlan",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']",
                                            "mapComplexValuesToString": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_RelativeURL": {
                                                    "value": "/providers/Microsoft.Capacity/reservationOrders/@{item().reservationOrderId}?api-version=2019-04-01",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "BillingDataCSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "sink_filename": {
                                                    "value": "@{item().reservationOrderId}_ReservationOrders.csv",
                                                    "type": "Expression"
                                                },
                                                "dir_name": {
                                                    "value": "@{variables('v_SubDirectory')}",
                                                    "type": "Expression"
                                                },
                                                "container_name": {
                                                    "value": "@pipeline().parameters.p_containername",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "Get ReservationOrderIDs",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "ReservationSummary\n| distinct reservationOrderId",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_LookBackInDay": {
                        "type": "string",
                        "defaultValue": "3"
                    },
                    "p_BillingIds": {
                        "type": "array",
                        "defaultValue": [
                            "46132814"
                        ]
                    },
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BeginDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_EndDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_BatchType": {
                        "type": "string",
                        "defaultValue": "Daily"
                    }
                },
                "variables": {
                    "v_KQL": {
                        "type": "String"
                    },
                    "v_ReportingDates": {
                        "type": "Array"
                    },
                    "v_SubDirectory": {
                        "type": "String",
                        "defaultValue": "ReservationOrders"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-02-19T09:48:44Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 2 - ADX Stage to Prod - ReservationOrders')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/BillingDataCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/BillingAPI_BillingID_Scope')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach Subscription",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Set List Variable",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('Resource_List')",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 25,
                            "activities": [
                                {
                                    "name": "Copy REST Output",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Set Token New",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:05:00",
                                            "requestInterval": "00.00:00:02.000",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "@variables('Token')",
                                                    "type": "Expression"
                                                }
                                            },
                                            "paginationRules": {
                                                "AbsoluteUrl": "$['nextLink']"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['kind']"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['name']"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['type']"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodStartDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodEndDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountOwnerId']"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountName']"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionId']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionName']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['date']"
                                                    },
                                                    "sink": {
                                                        "name": "date",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['product']"
                                                    },
                                                    "sink": {
                                                        "name": "product",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['partNumber']"
                                                    },
                                                    "sink": {
                                                        "name": "partNumber",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterId']"
                                                    },
                                                    "sink": {
                                                        "name": "meterId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['quantity']"
                                                    },
                                                    "sink": {
                                                        "name": "quantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['effectivePrice']"
                                                    },
                                                    "sink": {
                                                        "name": "effectivePrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['cost']"
                                                    },
                                                    "sink": {
                                                        "name": "cost",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['unitPrice']"
                                                    },
                                                    "sink": {
                                                        "name": "unitPrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingCurrency']"
                                                    },
                                                    "sink": {
                                                        "name": "billingCurrency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceLocation']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['consumedService']"
                                                    },
                                                    "sink": {
                                                        "name": "consumedService",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceId']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceName']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['invoiceSection']"
                                                    },
                                                    "sink": {
                                                        "name": "invoiceSection",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceGroup']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceGroup",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['offerId']"
                                                    },
                                                    "sink": {
                                                        "name": "offerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['isAzureCreditEligible']"
                                                    },
                                                    "sink": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['publisherType']"
                                                    },
                                                    "sink": {
                                                        "name": "publisherType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['chargeType']"
                                                    },
                                                    "sink": {
                                                        "name": "chargeType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['frequency']"
                                                    },
                                                    "sink": {
                                                        "name": "frequency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterDetails']"
                                                    },
                                                    "sink": {
                                                        "name": "meterDetails",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_RelativeURL": {
                                                    "value": "/subscriptions/@{item().SubscriptionGuid}/providers/Microsoft.Consumption/usageDetails?api-version=2019-10-01&$filter=properties/usageStart gt '@{variables('BillingDate')}' and properties/usageEnd lt '@{variables('BillingDate')}'",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "BillingDataCSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "sink_filename": {
                                                    "value": "@{item().SubscriptionName}_@{item().SubscriptionGuid}_@{variables('BillingDate')}.csv",
                                                    "type": "Expression"
                                                },
                                                "dir_name": {
                                                    "value": "@{formatDateTime(variables('BillingDate'), 'yyyy')}/@{formatDateTime(variables('BillingDate'), 'MM')}/@{formatDateTime(variables('BillingDate'), 'dd')}/Usage",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Wait for 7 seconds",
                                    "type": "Wait",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 7
                                    }
                                },
                                {
                                    "name": "If Gateway Error",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@or(greater(indexof(activity('Copy REST Output').output.errors[0]['Message'], 'GatewayTimeout' ) ,-1), \ngreater(indexof(activity('Copy REST Output').output.errors[0]['Message'], 'Too many requests' ) ,-1))\n",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Update ADFErrorLog - others",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API', ReportingDate='@{variables('BillingDate')}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Copy Rest Ouput', ErrorCode= '@{activity('Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError_Log",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog - others",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API', ReportingDate='@{variables('BillingDate')}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Wait 7 minutes",
                                                "type": "Wait",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "waitTimeInSeconds": 420
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Retry Copy REST Output",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API', ReportingDate='@{variables('BillingDate')}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Retry Copy Rest Ouput', ErrorCode= '@{activity('Retry Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Retry Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Retry Copy REST Output",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Set Token_Retry",
                                                        "dependencyConditions": [
                                                            "Completed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "RestSource",
                                                        "httpRequestTimeout": "00:15:00",
                                                        "requestInterval": "00.00:00:05.000",
                                                        "requestMethod": "GET",
                                                        "additionalHeaders": {
                                                            "Authorization": {
                                                                "value": "@variables('Token')",
                                                                "type": "Expression"
                                                            }
                                                        },
                                                        "paginationRules": {
                                                            "AbsoluteUrl": "$['nextLink']"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".csv"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "path": "[['kind']"
                                                                },
                                                                "sink": {
                                                                    "name": "kind",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['id']"
                                                                },
                                                                "sink": {
                                                                    "name": "id",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['name']"
                                                                },
                                                                "sink": {
                                                                    "name": "name",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['type']"
                                                                },
                                                                "sink": {
                                                                    "name": "type",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingAccountId']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingAccountId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingAccountName']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingAccountName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingPeriodStartDate']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingPeriodStartDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingPeriodEndDate']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingPeriodEndDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingProfileId']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingProfileId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingProfileName']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingProfileName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['accountOwnerId']"
                                                                },
                                                                "sink": {
                                                                    "name": "accountOwnerId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['accountName']"
                                                                },
                                                                "sink": {
                                                                    "name": "accountName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['subscriptionId']"
                                                                },
                                                                "sink": {
                                                                    "name": "subscriptionId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['subscriptionName']"
                                                                },
                                                                "sink": {
                                                                    "name": "subscriptionName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['date']"
                                                                },
                                                                "sink": {
                                                                    "name": "date",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['product']"
                                                                },
                                                                "sink": {
                                                                    "name": "product",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['partNumber']"
                                                                },
                                                                "sink": {
                                                                    "name": "partNumber",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['meterId']"
                                                                },
                                                                "sink": {
                                                                    "name": "meterId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['quantity']"
                                                                },
                                                                "sink": {
                                                                    "name": "quantity",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['effectivePrice']"
                                                                },
                                                                "sink": {
                                                                    "name": "effectivePrice",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['cost']"
                                                                },
                                                                "sink": {
                                                                    "name": "cost",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['unitPrice']"
                                                                },
                                                                "sink": {
                                                                    "name": "unitPrice",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingCurrency']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingCurrency",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['resourceLocation']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceLocation",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['consumedService']"
                                                                },
                                                                "sink": {
                                                                    "name": "consumedService",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['resourceId']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['resourceName']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['invoiceSection']"
                                                                },
                                                                "sink": {
                                                                    "name": "invoiceSection",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['resourceGroup']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceGroup",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['offerId']"
                                                                },
                                                                "sink": {
                                                                    "name": "offerId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['isAzureCreditEligible']"
                                                                },
                                                                "sink": {
                                                                    "name": "isAzureCreditEligible",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['publisherType']"
                                                                },
                                                                "sink": {
                                                                    "name": "publisherType",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['chargeType']"
                                                                },
                                                                "sink": {
                                                                    "name": "chargeType",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['frequency']"
                                                                },
                                                                "sink": {
                                                                    "name": "frequency",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['meterDetails']"
                                                                },
                                                                "sink": {
                                                                    "name": "meterDetails",
                                                                    "type": "String"
                                                                }
                                                            }
                                                        ],
                                                        "collectionReference": "$['value']"
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "RestResource_BillingData",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "p_RelativeURL": {
                                                                "value": "/subscriptions/@{item().SubscriptionGuid}/providers/Microsoft.Consumption/usageDetails?api-version=2019-10-01&$filter=properties/usageStart gt '@{variables('BillingDate')}' and properties/usageEnd lt '@{variables('BillingDate')}'",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "BillingDataCSV",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "sink_filename": {
                                                                "value": "@{item().SubscriptionName}_@{item().SubscriptionGuid}_@{variables('BillingDate')}.csv",
                                                                "type": "Expression"
                                                            },
                                                            "dir_name": {
                                                                "value": "@{formatDateTime(variables('BillingDate'), 'yyyy')}/@{formatDateTime(variables('BillingDate'), 'MM')}/@{formatDateTime(variables('BillingDate'), 'dd')}/Usage",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "GetBearerToken_Retry",
                                                "description": "Use this Web activity to get bearer token",
                                                "type": "WebActivity",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Wait 7 minutes",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "method": "POST",
                                                    "headers": {
                                                        "Content-Type": "application/x-www-form-urlencoded"
                                                    },
                                                    "url": {
                                                        "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                                        "type": "Expression"
                                                    },
                                                    "body": {
                                                        "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{pipeline().parameters.ClientSecret}",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Set Token_Retry",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "GetBearerToken_Retry",
                                                        "dependencyConditions": [
                                                            "Completed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "Token",
                                                    "value": {
                                                        "value": "@concat('Bearer ',activity('GetBearerToken_Retry').output.access_token)",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API', ReportingDate='@{variables('BillingDate')}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "GetBearerTokenNew",
                                    "description": "Use this Web activity to get bearer token",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/x-www-form-urlencoded"
                                        },
                                        "url": {
                                            "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                            "type": "Expression"
                                        },
                                        "body": {
                                            "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{pipeline().parameters.ClientSecret}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set Token New",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "GetBearerTokenNew",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "Token",
                                        "value": {
                                            "value": "@concat('Bearer ',activity('GetBearerTokenNew').output.access_token)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set List Variable",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Lookup BillingConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Resource_List",
                            "value": {
                                "value": "@activity('Lookup BillingConfig').output.value",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Lookup BillingConfig",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Set BillingDate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@pipeline().parameters.BillingConfigKQL",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "adx_BillingConfig",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Set BillingDate",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "BillingDate",
                            "value": {
                                "value": "@pipeline().parameters.BillingDate",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "ClientID": {
                        "type": "string",
                        "defaultValue": "aa5605bb-2877-483d-b005-e1439ee1f988"
                    },
                    "ClientSecret": {
                        "type": "string",
                        "defaultValue": "7h0wS-92Dhnm.GtDcwLdK.M04ICjazR0_v"
                    },
                    "tenant_id": {
                        "type": "string",
                        "defaultValue": "8a807b9b-02da-47f3-a903-791a42a2285c"
                    },
                    "BillingDate": {
                        "type": "string",
                        "defaultValue": "Default"
                    },
                    "BillingConfigKQL": {
                        "type": "string",
                        "defaultValue": "Default"
                    }
                },
                "variables": {
                    "Resource_List": {
                        "type": "Array"
                    },
                    "Token": {
                        "type": "String"
                    },
                    "x-ms-ratelimit-remaining-subscription-reads": {
                        "type": "String"
                    },
                    "BillingDate": {
                        "type": "String"
                    },
                    "REST_API_ProcessStatus": {
                        "type": "String",
                        "defaultValue": "Running"
                    },
                    "SubscriptionToLoad": {
                        "type": "Array"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/adx_BillingConfig')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/BillingDataCSV')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pline VMMetrics Flatten JSON v4')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "dataflow Flatten JSON File",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "dataflowFlattenJSON",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "source_dirname": {
                                        "value": "'@{pipeline().parameters.p_source_dirname}'",
                                        "type": "Expression"
                                    },
                                    "filename": {
                                        "value": "'@{pipeline().parameters.p_filename}'",
                                        "type": "Expression"
                                    },
                                    "sink_dirname": {
                                        "value": "'@{pipeline().parameters.p_sink_dirname}'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "jsonFile": {
                                        "dirname": {
                                            "value": "@pipeline().parameters.p_source_dirname",
                                            "type": "Expression"
                                        }
                                    },
                                    "sinkCSVFile": {
                                        "dirname": {
                                            "value": "@pipeline().parameters.p_sink_dirname",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_source_dirname": {
                        "type": "string",
                        "defaultValue": "json/2020/07/10"
                    },
                    "p_filename": {
                        "type": "string"
                    },
                    "p_sink_dirname": {
                        "type": "string",
                        "defaultValue": "csv/2020/07/10"
                    }
                },
                "folder": {
                    "name": "VM Metrics"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/dataflowFlattenJSON')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 1 - API Call - BillingSummary')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LoopThroughDays",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "GetProcessDates",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('GetProcessDates').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Get BillingSummary",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "GetAPIKey",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        },
                                        {
                                            "activity": "Set Folder Path",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "@concat('bearer ',activity('GetAPIKey').output.value)",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "sink": {
                                            "type": "JsonSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "JsonWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingSummary",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "relativeurl": {
                                                    "value": "v3/enrollments/@{item().BillingID}/billingPeriods/@{variables('v_ReportingMonth')}/balancesummary",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "BillingSummary",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FilePath": {
                                                    "value": "@{variables('v_SubDirectory')}/Balancesummary/json/@{item().BillingID}.json",
                                                    "type": "Expression"
                                                },
                                                "container": {
                                                    "value": "@pipeline().parameters.p_containername",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "FlattenJson",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [
                                        {
                                            "activity": "Get BillingSummary",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "1.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "dataflowFlattenJson_Credit",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "container": {
                                                    "value": "'@{pipeline().parameters.p_containername}'",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "'@{variables('v_SubDirectory')}/Balancesummary'",
                                                    "type": "Expression"
                                                },
                                                "filename": {
                                                    "value": "'@{item().BillingID}'",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "ReadJsonFile": {},
                                                "OutputcsvFile": {
                                                    "Container": {
                                                        "value": "@pipeline().parameters.p_containername",
                                                        "type": "Expression"
                                                    },
                                                    "directory": {
                                                        "value": "@{variables('v_SubDirectory')}/Balancesummary/csv/",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "GetAPIKey",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": true,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "GET",
                                        "headers": {},
                                        "url": {
                                            "value": "@concat(trim(item().KeyVaultURLForAPIKey),'?api-version=7.0')",
                                            "type": "Expression"
                                        },
                                        "authentication": {
                                            "type": "MSI",
                                            "resource": "https://vault.azure.net"
                                        }
                                    }
                                },
                                {
                                    "name": "SetBillingMonth",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "SetProcessingDays",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_ReportingMonth",
                                        "value": {
                                            "value": "@{formatDateTime(item().EndDate, 'yyyy')}@{formatDateTime(item().EndDate, 'MM')}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set Folder Path",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "SetBillingMonth",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_SubDirectory",
                                        "value": {
                                            "value": "@{formatDateTime(item().EndDate, 'yyyy')}/@{formatDateTime(item().EndDate, 'MM')}/@{formatDateTime(item().EndDate, 'dd')}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "If Gateway Error",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get BillingSummary",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@or(greater(indexof(activity('Get BillingSummary').output.errors[0]['Message'], 'GatewayTimeout' ) ,-1), \ngreater(indexof(activity('Get BillingSummary').output.errors[0]['Message'], 'Too many requests' ) ,-1))\n",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Update ADFErrorLog - others",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - BillingSummary', ReportingDate='@{item().BeginDate},@{item().EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Retry Copy Rest Ouput', ErrorCode= '@{activity('Get BillingSummary').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Get BillingSummary').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= 'item().BillingID',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='@{pipeline().parameters.p_BatchType}'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError_Log",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog - others",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - BillingSummary', ReportingDate='@{item().BeginDate},@{item().EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= 'item().BillingID',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='@{pipeline().parameters.p_BatchType}'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Wait 7 minutes",
                                                "type": "Wait",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "waitTimeInSeconds": 420
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get BillingSummary_Retry",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - BillingSummary', ReportingDate='@{item().BeginDate},@{item().EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Retry Copy Rest Ouput', ErrorCode= '@{activity('Get BillingSummary_Retry').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Get BillingSummary_Retry').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= 'item().BillingID',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='@{pipeline().parameters.p_BatchType}'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - BillingSummary', ReportingDate='@{item().ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Get BillingSummary_Retry",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Wait 7 minutes",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "RestSource",
                                                        "httpRequestTimeout": "00:01:40",
                                                        "requestInterval": "00.00:00:00.010",
                                                        "requestMethod": "GET",
                                                        "additionalHeaders": {
                                                            "Authorization": {
                                                                "value": "@concat('bearer ',activity('GetAPIKey').output.value)",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "JsonSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "JsonWriteSettings"
                                                        }
                                                    },
                                                    "enableStaging": false
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "RestResource_BillingSummary",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "relativeurl": {
                                                                "value": "v3/enrollments/@{item().BillingID}/billingPeriods/@{variables('v_ReportingMonth')}/balancesummary",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "BillingSummary",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "FilePath": {
                                                                "value": "@{variables('v_SubDirectory')}/Balancesummary/json/@{item().BillingID}.json",
                                                                "type": "Expression"
                                                            },
                                                            "container": {
                                                                "value": "@pipeline().parameters.p_containername",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "FlattenJson_copy",
                                                "type": "ExecuteDataFlow",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get BillingSummary_Retry",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "1.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "dataflow": {
                                                        "referenceName": "dataflowFlattenJson_Credit",
                                                        "type": "DataFlowReference",
                                                        "parameters": {
                                                            "container": {
                                                                "value": "'@{pipeline().parameters.p_containername}'",
                                                                "type": "Expression"
                                                            },
                                                            "directory": {
                                                                "value": "'@{variables('v_SubDirectory')}/Balancesummary'",
                                                                "type": "Expression"
                                                            },
                                                            "filename": {
                                                                "value": "'@{item().BillingID}'",
                                                                "type": "Expression"
                                                            }
                                                        },
                                                        "datasetParameters": {
                                                            "ReadJsonFile": {},
                                                            "OutputcsvFile": {
                                                                "Container": {
                                                                    "value": "@pipeline().parameters.p_containername",
                                                                    "type": "Expression"
                                                                },
                                                                "directory": {
                                                                    "value": "@{variables('v_SubDirectory')}/Balancesummary/csv/",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "staging": {},
                                                    "compute": {
                                                        "coreCount": 8,
                                                        "computeType": "General"
                                                    },
                                                    "traceLevel": "Fine"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "SetProcessingDays",
                                    "type": "AppendVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_ReportingDates",
                                        "value": {
                                            "value": "@item().EndDate",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Lookup Max Error TimeStamp",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "let _lastretry = toscalar(WaterMark | distinct Credit_LastRetry);\nADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - BillingSummary'\n| where ErrorMessage !contains 'NotFound'\n| summarize MaxErrorTimeStamp = max(ErrorTimestamp)\n| project MaxErrorTimeStamp=iif(isnull(MaxErrorTimeStamp),_lastretry,MaxErrorTimeStamp)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            }
                        }
                    },
                    {
                        "name": "Update ADX Table",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "LoopThroughDays",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 2 - ADX Stage to Prod - BillingSummary",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_StorageAccountContainer": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "p_BillingDate": {
                                    "value": "@variables('v_ReportingDates')",
                                    "type": "Expression"
                                },
                                "p_SubDirectory": "Balancesummary"
                            }
                        }
                    },
                    {
                        "name": "Update WaterMark",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Update ADX Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace WaterMark <|\nWaterMark\n| project BillingData_LastRetry,Reservation_LastRetry, Credit_LastRetry = todatetime('@{activity('Lookup Max Error TimeStamp').output.firstRow.MaxErrorTimeStamp}'),ReservationDesc_LastRetry,MarketPlace_LastRetry,ForeCast_LastRetry",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "GetProcessDates",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Is Process Date Passed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@variables('v_KQL')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Is Process Date Passed",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Lookup Max Error TimeStamp",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(and(equals(pipeline().parameters.p_BeginDate,'NA'),equals(pipeline().parameters.p_EndDate,'NA')),equals(pipeline().parameters.p_BatchType,'Daily'))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Set KQL ProcessDate not equals NA",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_KQL",
                                        "value": {
                                            "value": "let _batchmode = '@{pipeline().parameters.p_BatchType}';\nlet _startdate = iif('@{pipeline().parameters.p_BeginDate}'=~'NA', startofmonth(now(),-1), todatetime('@{pipeline().parameters.p_BeginDate}'));\nlet _enddate = iif('@{pipeline().parameters.p_EndDate}'=~'NA', endofmonth(now(),-1), todatetime('@{pipeline().parameters.p_EndDate}'));\nlet _lastretry = toscalar(WaterMark | distinct Credit_LastRetry);\nlet BillingIds = materialize(datatable (CommonJoin:int, BillingID:dynamic) [1, dynamic(@{pipeline().parameters.p_BillingIds})] | mv-expand BillingID \n| extend x=parse_json(BillingID) | project CommonJoin, BillingID = tostring(x.BillingID), KeyVaultURLForAPIKey=tostring(x.KeyVaultURLForAPIKey));\nlet NewBatch = materialize(\nBillingIds | extend BillingID=tostring(BillingID), BeginDate = todatetime(_startdate), EndDate = todatetime(_enddate), ReportingDate=range(_startdate, _enddate, 1d)\n| mv-expand ReportingDate\n| extend ReportingDate = todatetime(ReportingDate)\n);\nlet FailedBatch = materialize( ADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - BillingSummary'\n| extend BeginDate=todatetime(split(ReportingDate, ',')[0]), EndDate=todatetime(split(ReportingDate, ',')[1])\n| extend ReportingDate=range(BeginDate, EndDate, 1d)\n| mv-expand ReportingDate\n| project BillingID=ErrorResourceID,BeginDate, EndDate, ReportingDate=todatetime(ReportingDate)\n);\nNewBatch\n| union FailedBatch\n| extend Month=format_datetime(ReportingDate, 'yyyy-MM')\n| summarize BeginDate=min(ReportingDate), EndDate=max(ReportingDate) by BillingID, Month\n| extend BeginDate=startofmonth(BeginDate), EndDate=endofmonth(EndDate)\n| project BillingID, BeginDate=format_datetime(BeginDate, 'yyyy-MM-dd'), EndDate=format_datetime(EndDate, 'yyyy-MM-dd')\n| distinct BillingID, BeginDate, EndDate\n| join kind=inner BillingIds on BillingID\n| project-away BillingID1",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Set KQL ProcessDate equals NA",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_KQL",
                                        "value": {
                                            "value": "let _batchmode = '@{pipeline().parameters.p_BatchType}';\nlet _lookbackdayparameter = now(-@{pipeline().parameters.p_LookBackInDay}d);\nlet _lastretry = toscalar(WaterMark | distinct Credit_LastRetry);\nlet BillingIds = materialize(datatable (CommonJoin:int, BillingID:dynamic) [1, dynamic(@{pipeline().parameters.p_BillingIds})] | mv-expand BillingID \n| extend x=parse_json(BillingID) | project BillingID = tostring(x.BillingID), KeyVaultURLForAPIKey=tostring(x.KeyVaultURLForAPIKey));\nlet NewBatch = materialize(\nBillingIds | extend BillingID=tostring(BillingID), BeginDate = todatetime(_lookbackdayparameter), EndDate = todatetime(now(-1d)), ReportingDate=range(_lookbackdayparameter, now(-1d), 1d)\n| mv-expand ReportingDate\n| extend ReportingDate = todatetime(ReportingDate)\n);\nlet FailedBatch = materialize( ADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - BillingSummary'\n| extend BeginDate=todatetime(split(ReportingDate, ',')[0]), EndDate=todatetime(split(ReportingDate, ',')[1])\n| extend ReportingDate=range(BeginDate, EndDate, 1d)\n| mv-expand ReportingDate\n| project BillingID=ErrorResourceID,BeginDate, EndDate, ReportingDate=todatetime(ReportingDate)\n);\nNewBatch\n| union FailedBatch\n| extend Month=format_datetime(ReportingDate, 'yyyy-MM')\n| summarize BeginDate=min(ReportingDate), EndDate=max(ReportingDate) by BillingID, Month\n| extend BeginDate=startofmonth(BeginDate), EndDate=endofmonth(EndDate)\n| project BillingID, BeginDate=format_datetime(BeginDate, 'yyyy-MM-dd'), EndDate=format_datetime(EndDate, 'yyyy-MM-dd')\n| distinct BillingID, BeginDate, EndDate\n| join kind=inner BillingIds on BillingID\n| project-away BillingID1",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_LookBackInDay": {
                        "type": "string",
                        "defaultValue": "3"
                    },
                    "p_BillingIds": {
                        "type": "array",
                        "defaultValue": [
                            {
                                "BillingID": "46132814",
                                "KeyVaultURLForAPIKey": "https://kv-acrp-dev.vault.azure.net/secrets/APIKey-46132814/997864aa1b904061bd8a229e52b56ea4"
                            }
                        ]
                    },
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BeginDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_EndDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_BatchType": {
                        "type": "string",
                        "defaultValue": "Daily"
                    }
                },
                "variables": {
                    "v_KQL": {
                        "type": "String"
                    },
                    "v_ReportingDates": {
                        "type": "Array"
                    },
                    "v_SubDirectory": {
                        "type": "String"
                    },
                    "v_ReportingMonth": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-02-19T09:48:44Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 2 - ADX Stage to Prod - BillingSummary')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingSummary')]",
                "[concat(variables('factoryId'), '/datasets/BillingSummary')]",
                "[concat(variables('factoryId'), '/dataflows/dataflowFlattenJson_Credit')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 1 - API Call - ReservationDescs')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LoopThroughDays",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "GetProcessDates",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('GetProcessDates').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Get Reservation Descriptions",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "SetprocessDate",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 3,
                                        "retryIntervalInSeconds": 60,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET"
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['name']"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['type']"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['eventDate']"
                                                    },
                                                    "sink": {
                                                        "name": "eventDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['reservationOrderId']"
                                                    },
                                                    "sink": {
                                                        "name": "reservationOrderId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['description']"
                                                    },
                                                    "sink": {
                                                        "name": "description",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['eventType']"
                                                    },
                                                    "sink": {
                                                        "name": "eventType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['quantity']"
                                                    },
                                                    "sink": {
                                                        "name": "quantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['amount']"
                                                    },
                                                    "sink": {
                                                        "name": "amount",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['currency']"
                                                    },
                                                    "sink": {
                                                        "name": "currency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['reservationOrderName']"
                                                    },
                                                    "sink": {
                                                        "name": "reservationOrderName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['purchasingEnrollment']"
                                                    },
                                                    "sink": {
                                                        "name": "purchasingEnrollment",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['armSkuName']"
                                                    },
                                                    "sink": {
                                                        "name": "armSkuName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['term']"
                                                    },
                                                    "sink": {
                                                        "name": "term",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['region']"
                                                    },
                                                    "sink": {
                                                        "name": "region",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['purchasingSubscriptionGuid']"
                                                    },
                                                    "sink": {
                                                        "name": "purchasingSubscriptionGuid",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['purchasingSubscriptionName']"
                                                    },
                                                    "sink": {
                                                        "name": "purchasingSubscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountName']"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountOwnerEmail']"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerEmail",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['departmentName']"
                                                    },
                                                    "sink": {
                                                        "name": "departmentName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['costCenter']"
                                                    },
                                                    "sink": {
                                                        "name": "costCenter",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['currentEnrollment']"
                                                    },
                                                    "sink": {
                                                        "name": "currentEnrollment",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingFrequency']"
                                                    },
                                                    "sink": {
                                                        "name": "billingFrequency",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']",
                                            "mapComplexValuesToString": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_RelativeURL": {
                                                    "value": "/providers/Microsoft.Billing/billingAccounts/@{item().BillingID}/providers/Microsoft.Consumption/reservationTransactions?$filter=properties/eventDate+ge+@{item().BeginDate}+AND+properties/eventDate+le+@{item().EndDate}&api-version=2019-10-01",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "BillingDataCSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "sink_filename": {
                                                    "value": "@{item().BillingID}_ReservationDescription.csv",
                                                    "type": "Expression"
                                                },
                                                "dir_name": {
                                                    "value": "@{formatDateTime(item().EndDate, 'yyyy')}/@{formatDateTime(item().EndDate, 'MM')}/@{formatDateTime(item().EndDate, 'dd')}/@{variables('v_SubDirectory')}",
                                                    "type": "Expression"
                                                },
                                                "container_name": {
                                                    "value": "@pipeline().parameters.p_containername",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Update ADFErrorLog - others",
                                    "type": "AzureDataExplorerCommand",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Reservation Descriptions",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "command": {
                                            "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Resv Desc', ReportingDate='@{item().BeginDate},@{item().EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Retry Copy Rest Ouput', ErrorCode= '@{activity('Get Reservation Descriptions').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Get Reservation Descriptions').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().BillingID}',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'),BatchMode='@{pipeline().parameters.p_BatchType}'",
                                            "type": "Expression"
                                        },
                                        "commandTimeout": "00:20:00"
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "Update ADFErrorLog_SimpleError_Log",
                                    "type": "AzureDataExplorerCommand",
                                    "dependsOn": [
                                        {
                                            "activity": "Update ADFErrorLog - others",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "command": {
                                            "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Resv Desc', ReportingDate=''@{item().BeginDate},@{item().EndDate}'' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().BillingID}',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'),BatchMode='@{pipeline().parameters.p_BatchType}'",
                                            "type": "Expression"
                                        },
                                        "commandTimeout": "00:20:00"
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "SetprocessDate",
                                    "type": "AppendVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_ReportingDates",
                                        "value": {
                                            "value": "@item().EndDate",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Lookup Max Error TimeStamp",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "let _lastretry = toscalar(WaterMark | distinct ReservationDesc_LastRetry);\nADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - Resv Desc'\n| summarize MaxErrorTimeStamp = max(ErrorTimestamp)\n| project MaxErrorTimeStamp=iif(isnull(MaxErrorTimeStamp),_lastretry,MaxErrorTimeStamp)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            }
                        }
                    },
                    {
                        "name": "Update ADX Table",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "LoopThroughDays",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 2 - ADX Stage to Prod - ReservationDesc",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_StorageAccountContainer": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "p_BillingDate": {
                                    "value": "@variables('v_ReportingDates')",
                                    "type": "Expression"
                                },
                                "p_SubDirectory": {
                                    "value": "@variables('v_SubDirectory')",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Update WaterMark",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Update ADX Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace WaterMark <|\nWaterMark\n| project BillingData_LastRetry,Reservation_LastRetry, Credit_LastRetry,ReservationDesc_LastRetry = todatetime('@{activity('Lookup Max Error TimeStamp').output.firstRow.MaxErrorTimeStamp}'),MarketPlace_LastRetry,ForeCast_LastRetry",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Is Process Date Passed",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Lookup Max Error TimeStamp",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(and(equals(pipeline().parameters.p_BeginDate,'NA'),equals(pipeline().parameters.p_EndDate,'NA')),equals(pipeline().parameters.p_BatchType,'Daily'))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Set KQL ProcessDate not equals NA",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_KQL",
                                        "value": {
                                            "value": "let _batchmode = '@{pipeline().parameters.p_BatchType}';\nlet _startdate = iif('@{pipeline().parameters.p_BeginDate}'=~'NA', startofmonth(now(),-1), todatetime('@{pipeline().parameters.p_BeginDate}'));\nlet _enddate = iif('@{pipeline().parameters.p_EndDate}'=~'NA', endofmonth(now(),-1), todatetime('@{pipeline().parameters.p_EndDate}'));\nlet _lastretry = toscalar(WaterMark | distinct ReservationDesc_LastRetry);\nlet BillingIds = materialize(datatable (CommonJoin:int, BillingID:dynamic) [1, dynamic(@{pipeline().parameters.p_BillingIds})] | mv-expand BillingID | extend BillingID=tostring(BillingID));\nlet NewBatch = materialize(\nBillingIds | extend BillingID=tostring(BillingID), BeginDate = todatetime(_startdate), EndDate = todatetime(_enddate), ReportingDate=range(_startdate, _enddate, 1d)\n| mv-expand ReportingDate\n| extend ReportingDate = todatetime(ReportingDate)\n| project-away CommonJoin\n);\nlet FailedBatch = materialize( ADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - Resv Desc'\n| extend BeginDate=todatetime(split(ReportingDate, ',')[0]), EndDate=todatetime(split(ReportingDate, ',')[1])\n| extend ReportingDate=range(BeginDate, EndDate, 1d)\n| mv-expand ReportingDate\n| project BillingID=ErrorResourceID,BeginDate, EndDate, ReportingDate=todatetime(ReportingDate)\n);\nNewBatch\n| union FailedBatch\n| extend Month=format_datetime(ReportingDate, 'yyyy-MM')\n| summarize BeginDate=min(ReportingDate), EndDate=max(ReportingDate) by BillingID, Month\n| extend BeginDate=startofmonth(BeginDate), EndDate=endofmonth(EndDate)\n| project BillingID, BeginDate=format_datetime(BeginDate, 'yyyy-MM-dd'), EndDate=format_datetime(EndDate, 'yyyy-MM-dd')\n| distinct BillingID, BeginDate, EndDate",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Set KQL ProcessDate equals NA",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_KQL",
                                        "value": {
                                            "value": "let _batchmode = '@{pipeline().parameters.p_BatchType}';\nlet _lookbackdayparameter = now(-@{pipeline().parameters.p_LookBackInDay}d);\nlet _lastretry = toscalar(WaterMark | distinct ReservationDesc_LastRetry);\nlet BillingIds = materialize(datatable (CommonJoin:int, BillingID:dynamic) [1, dynamic(@{pipeline().parameters.p_BillingIds})] | mv-expand BillingID | extend BillingID = tostring(BillingID));\nlet NewBatch = materialize(\nBillingIds | extend BillingID=tostring(BillingID), BeginDate = todatetime(_lookbackdayparameter), EndDate = todatetime(now(-1d)), ReportingDate=range(_lookbackdayparameter, now(-1d), 1d)\n| mv-expand ReportingDate\n| extend ReportingDate = todatetime(ReportingDate)\n| project-away CommonJoin\n);\nlet FailedBatch = materialize( ADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - Resv Desc'\n| extend BeginDate=todatetime(split(ReportingDate, ',')[0]), EndDate=todatetime(split(ReportingDate, ',')[1])\n| extend ReportingDate=range(BeginDate, EndDate, 1d)\n| mv-expand ReportingDate\n| project BillingID=ErrorResourceID,BeginDate, EndDate, ReportingDate=todatetime(ReportingDate)\n);\nNewBatch\n| union FailedBatch\n| extend Month=format_datetime(ReportingDate, 'yyyy-MM')\n| summarize BeginDate=min(ReportingDate), EndDate=max(ReportingDate) by BillingID, Month\n| extend BeginDate=startofmonth(BeginDate), EndDate=endofmonth(EndDate)\n| project BillingID, BeginDate=format_datetime(BeginDate, 'yyyy-MM-dd'), EndDate=format_datetime(EndDate, 'yyyy-MM-dd')\n| distinct BillingID, BeginDate, EndDate",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "GetProcessDates",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Is Process Date Passed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@variables('v_KQL')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_LookBackInDay": {
                        "type": "string",
                        "defaultValue": "3"
                    },
                    "p_BillingIds": {
                        "type": "array",
                        "defaultValue": [
                            "46132814"
                        ]
                    },
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BeginDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_EndDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_BatchType": {
                        "type": "string",
                        "defaultValue": "Daily"
                    }
                },
                "variables": {
                    "v_KQL": {
                        "type": "String"
                    },
                    "v_ReportingDates": {
                        "type": "Array"
                    },
                    "v_SubDirectory": {
                        "type": "String",
                        "defaultValue": "ReservationOrdersDesc"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-02-19T09:48:44Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 2 - ADX Stage to Prod - ReservationDesc')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/BillingDataCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API - Usage - LoadMonthlyData_BillingID_copy1')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "GetDateRange",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@pipeline().parameters.DaterangeKQL",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": {
                                        "value": "ADFErrorLog",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach Date",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Set Token_Initial",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('GetDateRange').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Copy REST Output",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 10,
                                        "retryIntervalInSeconds": 60,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:10:00",
                                            "requestInterval": "00.00:00:02.000",
                                            "requestMethod": "GET",
                                            "paginationRules": {
                                                "AbsoluteUrl": "$['nextLink']"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['kind']"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['name']"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['type']"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['tags']"
                                                    },
                                                    "sink": {
                                                        "name": "tags",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodStartDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodEndDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountOwnerId']"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountName']"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionId']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionName']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['date']"
                                                    },
                                                    "sink": {
                                                        "name": "date",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['product']"
                                                    },
                                                    "sink": {
                                                        "name": "product",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['partNumber']"
                                                    },
                                                    "sink": {
                                                        "name": "partNumber",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterId']"
                                                    },
                                                    "sink": {
                                                        "name": "meterId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['quantity']"
                                                    },
                                                    "sink": {
                                                        "name": "quantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['effectivePrice']"
                                                    },
                                                    "sink": {
                                                        "name": "effectivePrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['cost']"
                                                    },
                                                    "sink": {
                                                        "name": "cost",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['unitPrice']"
                                                    },
                                                    "sink": {
                                                        "name": "unitPrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingCurrency']"
                                                    },
                                                    "sink": {
                                                        "name": "billingCurrency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceLocation']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['consumedService']"
                                                    },
                                                    "sink": {
                                                        "name": "consumedService",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceId']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceName']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['serviceInfo2']"
                                                    },
                                                    "sink": {
                                                        "name": "serviceInfo2",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['invoiceSection']"
                                                    },
                                                    "sink": {
                                                        "name": "invoiceSection",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceGroup']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceGroup",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['offerId']"
                                                    },
                                                    "sink": {
                                                        "name": "offerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['isAzureCreditEligible']"
                                                    },
                                                    "sink": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['publisherType']"
                                                    },
                                                    "sink": {
                                                        "name": "publisherType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['chargeType']"
                                                    },
                                                    "sink": {
                                                        "name": "chargeType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['frequency']"
                                                    },
                                                    "sink": {
                                                        "name": "frequency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterDetails']"
                                                    },
                                                    "sink": {
                                                        "name": "meterDetails",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']",
                                            "mapComplexValuesToString": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_RelativeURL": {
                                                    "value": "/providers/Microsoft.Billing/BillingAccounts/@{item().BillingID}/providers/Microsoft.Consumption/usageDetails?api-version=2019-10-01&$expand=meterDetails&$filter=properties/usageStart gt '@{item().ReportingDateStart}' and properties/usageEnd lt '@{item().ReportingDateEnd}'",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "src_BillingDataTSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "billingdata",
                                                    "type": "Expression"
                                                },
                                                "DirectoryName": {
                                                    "value": "@{formatDateTime(item().ReportingDateEnd, 'yyyy')}/@{formatDateTime(item().ReportingDateEnd, 'MM')}/@{formatDateTime(item().ReportingDateEnd, 'dd')}/UsageByBillingID_Monthly",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@{item().BillingID}_usage.tsv",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Update ADFErrorLog - others",
                                    "type": "AzureDataExplorerCommand",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "command": {
                                            "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().ReportingDate},@{item().ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Copy Rest Ouput', ErrorCode= '@{activity('Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().BillingID}',  ErrorSubscription= '@{item().BillingID}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                            "type": "Expression"
                                        },
                                        "commandTimeout": "00:20:00"
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "Update ADFErrorLog_SimpleError_Log",
                                    "type": "AzureDataExplorerCommand",
                                    "dependsOn": [
                                        {
                                            "activity": "Update ADFErrorLog - others",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "command": {
                                            "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().ReportingDate},@{item().ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().BillingID}',  ErrorSubscription= '@{item().BillingID}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                            "type": "Expression"
                                        },
                                        "commandTimeout": "00:20:00"
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "DataLake to ADX",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 1,
                                        "retryIntervalInSeconds": 300,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureDataExplorerSink"
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "name": "kind",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "id",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "name",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "type",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "tags",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "tags",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingAccountId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingAccountName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingProfileId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingProfileName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "accountOwnerId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "accountName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "subscriptionId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "subscriptionName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "date",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "date",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "product",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "product",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "partNumber",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "partNumber",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "meterId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "meterId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "quantity",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "quantity",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "effectivePrice",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "effectivePrice",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "cost",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "cost",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "unitPrice",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "unitPrice",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingCurrency",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingCurrency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceLocation",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "consumedService",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "consumedService",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "serviceInfo2",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "serviceInfo2",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "invoiceSection",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "invoiceSection",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceGroup",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceGroup",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "offerId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "offerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "publisherType",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "publisherType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "chargeType",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "chargeType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "frequency",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "frequency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "meterDetails",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "meterDetails",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "src_BillingDataTSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": "billingdata",
                                                "DirectoryName": {
                                                    "value": "@{formatDateTime(item().ReportingDateEnd, 'yyyy')}/@{formatDateTime(item().ReportingDateEnd, 'MM')}/@{formatDateTime(item().ReportingDateEnd, 'dd')}/UsageByBillingID_Monthly",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@{item().BillingID}_usage.tsv",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "adx_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "TableName": "BillingData_Tags_Monthly"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "GetSPNSecret",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": {
                                "value": "@concat(pipeline().parameters.p_SPNSecretURL,'?api-version=7.0')",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Set RefreshToken Flag",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "ForEach Date",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Stop Token Refresh",
                            "value": true
                        }
                    },
                    {
                        "name": "Refresh Token Every 5 Min",
                        "type": "Until",
                        "dependsOn": [
                            {
                                "activity": "Set Token_Initial",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@bool(variables('Stop Token Refresh'))",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Set Token",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "GetBearerToken",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "Token",
                                        "value": {
                                            "value": "@concat('Bearer ',activity('GetBearerToken').output.access_token)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Wait 5 Min",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 300
                                    }
                                },
                                {
                                    "name": "GetBearerToken",
                                    "description": "Use this Web activity to get bearer token",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Wait 5 Min",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/x-www-form-urlencoded"
                                        },
                                        "url": {
                                            "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                            "type": "Expression"
                                        },
                                        "body": {
                                            "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{activity('GetSPNSecret').output.value}",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "timeout": "7.00:00:00"
                        }
                    },
                    {
                        "name": "Set Token_Initial",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetBearerToken_Initial",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Token",
                            "value": {
                                "value": "@concat('Bearer ',activity('GetBearerToken_Initial').output.access_token)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "GetBearerToken_Initial",
                        "description": "Use this Web activity to get bearer token",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "GetDateRange",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetSPNSecret",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            "url": {
                                "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                "type": "Expression"
                            },
                            "body": {
                                "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{activity('GetSPNSecret').output.value}",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "ClientID": {
                        "type": "string",
                        "defaultValue": "aa5605bb-2877-483d-b005-e1439ee1f988"
                    },
                    "tenant_id": {
                        "type": "string",
                        "defaultValue": "8a807b9b-02da-47f3-a903-791a42a2285c"
                    },
                    "DaterangeKQL": {
                        "type": "string",
                        "defaultValue": "range ReportingDate from datetime(2021-07-01 00:00:00) to datetime(2021-08-31 00:00:00) step 1d  | extend ReportingDateStart= format_datetime(startofmonth(ReportingDate), 'yyyy-MM-dd'), ReportingDateEnd= format_datetime(endofmonth(ReportingDate), 'yyyy-MM-dd') | distinct ReportingDateStart, ReportingDateEnd | extend JoinKey = 1 | join kind=inner ( print BillingID = '78931757', JoinKey = 1 | union (print BillingID = '88673741', JoinKey = 1) ) on JoinKey | project ReportingDateStart, ReportingDateEnd, BillingID"
                    },
                    "p_SPNSecretURL": {
                        "type": "string",
                        "defaultValue": "https://kv-ccop-dv.vault.azure.net/secrets/CostMGMT-SPN-Secret/eafafff824ca4d8c8a8c604579b70ed1"
                    }
                },
                "variables": {
                    "Token": {
                        "type": "String"
                    },
                    "Stop Token Refresh": {
                        "type": "Boolean",
                        "defaultValue": false
                    }
                },
                "folder": {
                    "name": "Billing/HistoricData"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataTSV')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/BillingData LoadReferenceFiles')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Loads Reference data for Billing Data",
                "activities": [
                    {
                        "name": "ProductMeterCategory_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_ProductMeterCategory",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "Product",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Product",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FNGCategory",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "FNGCategory",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CostType",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CostType",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "IsPrePay",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "IsPrePay",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ADX_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_ProductMeterCategory",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_ProductMeterCategory",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_ProductMeterCategory"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_ProductMeterCategory",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_ProductMeterCategory <|\nStaging_ProductMeterCategory \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ProductMeterCategory",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ProductMeterCategory_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ProductMeterCategory <| Staging_ProductMeterCategory \n| extend Product=tolower(Product),FNGCategory=tolower(FNGCategory),CostType=tolower(CostType),IsPrePay=tobool(IsPrePay)\n| distinct Product, FNGCategory, CostType, IsPrePay",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOBBudget_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_LOBBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "YearMonth",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "YearMonth",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Budget",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Budget",
                                            "type": "Int64",
                                            "physicalType": "long"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ADX_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_LOBBudget",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_LOBBudget"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_LOBBudget",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ProductMeterCategory",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_LOBBudget <|\nStaging_LOBBudget \n| where 1==0\n",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOBBudget",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOBBudget_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace LOBBudget <|\nlet UnDefined = 'undefined';\nStaging_LOBBudget\n| extend Year=split(YearMonth, '-')[0],Month=split(YearMonth, '-')[1]\n| extend YearMonth = strcat(Year,'-', substring(strcat('0',Month), -2, 2))\n| project LineOfBusiness, YearMonth, Budget\n| join kind=leftouter LOB on $left.LineOfBusiness==$right.ID\n| extend LineOfBusiness = iif(isempty(ID),UnDefined,ShortName)\n| project LineOfBusiness, YearMonth, Budget",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationLKP_Data",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_ApplicationLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "App ID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Application Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ApplicationName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppAbreviation",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppAbreviation",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ISApplication",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "IsApplication",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AvalibleForCostReporting",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AvailableForCostReporting",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "RTO",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "RTO",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "RPO",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "RPO",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Revenue",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Revenue",
                                            "type": "Double",
                                            "physicalType": "real"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ITAppOwner",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ITAppOWner",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "HostedInAzure",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "HostedInAzure",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppLOB",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppLOB",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_CSVText_referencedata",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.p_FileName_ApplicationLKP",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_ApplicationLKP"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_ApplicationLKP",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "LOBBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_ApplicationLKP <|\nStaging_ApplicationLKP \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationLKP",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "ApplicationLKP_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ApplicationLKP <|\n Staging_ApplicationLKP\n| extend rpo_t = toint(split(RPO, ' ')[0]), HostedInAzure_t = tobool(HostedInAzure)\n| extend rpo_c = iif(isnull(rpo_t),toint(0),rpo_t), HostedInAzure_c = iif(isnull(HostedInAzure_t),false,HostedInAzure_t)\n| project AppID, ApplicationName, AppAbreviation, CostCenter, IsApplication = tobool(IsApplication), AvailableForCostReporting = tobool(AvailableForCostReporting),\n RTO=toint(RTO), RPO = rpo_c, Revenue, ITAppOWner, HostedInAzure= HostedInAzure_c, AppLOB",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationBudget_Data",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Staging_ApplicationBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "SubscriptionGuid",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionGuid",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResourceGroupFQN",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ResourceGroupFQN",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": " AppCode",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppCode",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "BillingMonth",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "BillingMonth",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "BudgetAMT",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "BudgetAMT",
                                            "type": "Double",
                                            "physicalType": "real"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Year",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Year",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Month",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Month",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_CSVText_referencedata",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.p_FileName_ApplicationBudget",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_ApplicationBudget"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Staging_ApplicationBudget",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "ApplicationLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_ApplicationBudget <|\nStaging_ApplicationBudget \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationBudget",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "ApplicationBudget_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ApplicationBudget <|\n Staging_ApplicationBudget\n| extend YearMonth_t = strcat(Year,'-', substring(strcat('0',Month), -2, 2))\n| project SubscriptionGuid=tolower(SubscriptionGuid), SubscriptionName=tolower(SubscriptionName), ResourceGroupFQN=tolower(ResourceGroupFQN), AppCode=tolower(AppCode), AppName=tolower(AppName), BillingMonth = YearMonth_t, BudgetAMT,\nParentHostingSubHostingID=tolower(ParentHostingSubHostingID)",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "HostingLKP_Data",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Staging_HostingLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentHostingID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentHostingServiceName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingServiceName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubHostingServiceID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubHostingServiceID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubHostingServiceName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubHostingServiceName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_HostingLKP",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_HostingLKP"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Staging_HostingLKP",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "ApplicationBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_HostingLKP <|\nStaging_HostingLKP \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "HostingLKP",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "HostingLKP_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace HostingLKP <|\nStaging_HostingLKP\n| extend ParentHostingSubHostingID=toreal(ParentHostingSubHostingID),ParentHostingID=tolong(ParentHostingID),SubHostingServiceID=tolong(SubHostingServiceID),ParentHostingServiceName=tolower(ParentHostingServiceName),SubHostingServiceName=tolower(SubHostingServiceName)\n| project ParentHostingSubHostingID, ParentHostingID, ParentHostingServiceName, SubHostingServiceID, SubHostingServiceName",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Copy ITSMOCostMapping to ADX",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging_BillingConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "RGFQN",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ResourceGroupFQN",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubscritionGuid",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionGuid",
                                            "type": "Guid",
                                            "physicalType": "guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResourceGroupName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ResourceGroupName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Environment",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Environment",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "App1",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "App1",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "App2",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "App2",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "BudgetCenter",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "BudgetCenter",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "BusinesUnit",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "BusinesUnit",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ADX_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_ITSMOCostMapping",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_BillingConfig"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Staging_BillingConfig to BillingConfig",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Copy ITSMOCostMapping to ADX",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace BillingConfig <| \nlet UnDefined = 'undefined';\nStaging_BillingConfig\n| extend SubscriptionGuid=toguid(tolower(SubscriptionGuid)),\nResourceGroupFQN=tolower(ResourceGroupFQN),\nSubscriptionName = trim_start(\" \",tolower(replace(@'./.', @'_\\1', SubscriptionName))),\nResourceGroupName=tolower(ResourceGroupName),\nEnvironment=tolower(Environment),\nApp1=tolower(App1),\nApp2=tolower(App2),\nBudgetCenter=tolower(BudgetCenter),\nBusinesUnit=tolower(BusinesUnit)\n| distinct ResourceGroupFQN, SubscriptionName, SubscriptionGuid, ResourceGroupName, Environment, App1, App2, BudgetCenter, BusinesUnit\n| join kind=leftouter LOB on $left.BusinesUnit==$right.FullName\n| extend BusinesUnit = iif(isempty(FullName),UnDefined,ShortName)\n//| join kind=leftouter (LOB | project ID1=ID, FullName1=FullName) on $left.FinanceLOB==$right.ID1\n//| extend FinanceLOB = iif(isempty(ID1),UnDefined,FullName1)\n//| join kind=leftouter (HostingLKP | project ParentHostingSubHostingID=tostring(ParentHostingSubHostingID), SubHostingServiceName) on $left.HostingService==$right.ParentHostingSubHostingID\n//| extend Environment = iif(isempty(ParentHostingSubHostingID), UnDefined, SubHostingServiceName)\n| distinct ResourceGroupFQN, SubscriptionName, SubscriptionGuid, ResourceGroupName, Environment, App1, App2, BudgetCenter, BusinesUnit",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging_BillingConfig",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "HostingLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace Staging_BillingConfig <|\nBillingConfig \n| where 1==0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LoadFlexData_Staging",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Clear Staging_FlexData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "HttpReadSettings",
                                    "requestMethod": "GET"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "InstanceSizeFlexibilityGroup",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "InstanceSizeFlexibilityGroup",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ArmSkuName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ArmSkuName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Ratio",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Ratio",
                                            "type": "Double",
                                            "physicalType": "real"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "Flex_ISFRatio",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_FlexGroup"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear Staging_FlexData",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Staging_BillingConfig to BillingConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_FlexGroup<|\nStaging_FlexGroup\n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "FlexData",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "LoadFlexData_Staging",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace FlexGroup <|\nStaging_FlexGroup",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOB_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_LOB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "ID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ShortName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ShortName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FullName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "FullName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ADX_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_LOBLookUp",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_LOB"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_LOB",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_LOB <|\nStaging_LOB \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOB",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOB_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace LOB <| Staging_LOB \n| extend ShortName=tolower(ShortName),FullName=tolower(FullName)\n| project ID, ShortName, FullName",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_Container": {
                        "type": "string",
                        "defaultValue": "referencedata"
                    },
                    "p_FileName_ProductMeterCategory": {
                        "type": "string",
                        "defaultValue": "ProductMeterCategory.xlsx"
                    },
                    "p_WorkSheetName_ProductMeterCategory": {
                        "type": "string",
                        "defaultValue": "ProductMeterCategory"
                    },
                    "p_FileName_ApplicationLKP": {
                        "type": "string",
                        "defaultValue": "ApplicationLKP.csv"
                    },
                    "p_FileName_ApplicationBudget": {
                        "type": "string",
                        "defaultValue": "ApplicationBudget.csv"
                    },
                    "p_FileName_CostMapping": {
                        "type": "string",
                        "defaultValue": "ITSMOCostMapping.xlsx"
                    },
                    "p_FileName_FlexData": {
                        "type": "string",
                        "defaultValue": "ISFRatio.csv"
                    },
                    "p_WorkSheetName_HostingLKP": {
                        "type": "string",
                        "defaultValue": "HostingLKP"
                    },
                    "p_WorkSheetName_LOBLookUp": {
                        "type": "string",
                        "defaultValue": "LOBLookUp"
                    },
                    "p_WorkSheetName_ITSMOCostMapping": {
                        "type": "string",
                        "defaultValue": "ITSMOCostMapping"
                    },
                    "p_WorkSheetName_LOBBudget": {
                        "type": "string",
                        "defaultValue": "LOBBudget"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-03-21T12:47:27Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_ExcelSource')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/SFTP_CSVText_referencedata')]",
                "[concat(variables('factoryId'), '/datasets/SFTP_ExcelSource')]",
                "[concat(variables('factoryId'), '/datasets/Flex_ISFRatio')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API - Usage - LoadMonthlyData_SplitDaily_BillingID')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "GetDateRange",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@pipeline().parameters.DaterangeKQL",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": {
                                        "value": "ADFErrorLog",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach Date",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "GetDateRange",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetSPNSecret",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('GetDateRange').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Copy REST Output",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Set Token",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 10,
                                        "retryIntervalInSeconds": 60,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:10:00",
                                            "requestInterval": "00.00:00:02.000",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "@variables('Token')",
                                                    "type": "Expression"
                                                }
                                            },
                                            "paginationRules": {
                                                "AbsoluteUrl": "$['nextLink']"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['kind']"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['name']"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['type']"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['tags']"
                                                    },
                                                    "sink": {
                                                        "name": "tags",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodStartDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodEndDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountOwnerId']"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountName']"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionId']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionName']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['date']"
                                                    },
                                                    "sink": {
                                                        "name": "date",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['product']"
                                                    },
                                                    "sink": {
                                                        "name": "product",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['partNumber']"
                                                    },
                                                    "sink": {
                                                        "name": "partNumber",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterId']"
                                                    },
                                                    "sink": {
                                                        "name": "meterId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['quantity']"
                                                    },
                                                    "sink": {
                                                        "name": "quantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['effectivePrice']"
                                                    },
                                                    "sink": {
                                                        "name": "effectivePrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['cost']"
                                                    },
                                                    "sink": {
                                                        "name": "cost",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['unitPrice']"
                                                    },
                                                    "sink": {
                                                        "name": "unitPrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingCurrency']"
                                                    },
                                                    "sink": {
                                                        "name": "billingCurrency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceLocation']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['consumedService']"
                                                    },
                                                    "sink": {
                                                        "name": "consumedService",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceId']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceName']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['serviceInfo2']"
                                                    },
                                                    "sink": {
                                                        "name": "serviceInfo2",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['invoiceSection']"
                                                    },
                                                    "sink": {
                                                        "name": "invoiceSection",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceGroup']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceGroup",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['offerId']"
                                                    },
                                                    "sink": {
                                                        "name": "offerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['isAzureCreditEligible']"
                                                    },
                                                    "sink": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['publisherType']"
                                                    },
                                                    "sink": {
                                                        "name": "publisherType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['chargeType']"
                                                    },
                                                    "sink": {
                                                        "name": "chargeType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['frequency']"
                                                    },
                                                    "sink": {
                                                        "name": "frequency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterDetails']"
                                                    },
                                                    "sink": {
                                                        "name": "meterDetails",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']",
                                            "mapComplexValuesToString": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_RelativeURL": {
                                                    "value": "/providers/Microsoft.Billing/BillingAccounts/@{pipeline().parameters.p_billingId}/providers/Microsoft.Consumption/usageDetails?api-version=2019-10-01&$expand=meterDetails&$filter=properties/usageStart gt '@{item().ReportingDate}' and properties/usageEnd lt '@{item().ReportingDate}'",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "src_BillingDataTSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "billingdata",
                                                    "type": "Expression"
                                                },
                                                "DirectoryName": {
                                                    "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/UsageByBillingID",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@{pipeline().parameters.p_billingId}_usage.tsv",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "GetBearerToken",
                                    "description": "Use this Web activity to get bearer token",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/x-www-form-urlencoded"
                                        },
                                        "url": {
                                            "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                            "type": "Expression"
                                        },
                                        "body": {
                                            "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{activity('GetSPNSecret').output.value}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set Token",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "GetBearerToken",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "Token",
                                        "value": {
                                            "value": "@concat('Bearer ',activity('GetBearerToken').output.access_token)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Update ADFErrorLog - others",
                                    "type": "AzureDataExplorerCommand",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "command": {
                                            "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().ReportingDate},@{item().ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Copy Rest Ouput', ErrorCode= '@{activity('Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{pipeline().parameters.p_billingId}',  ErrorSubscription= '@{pipeline().parameters.p_billingId}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                            "type": "Expression"
                                        },
                                        "commandTimeout": "00:20:00"
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "Update ADFErrorLog_SimpleError_Log",
                                    "type": "AzureDataExplorerCommand",
                                    "dependsOn": [
                                        {
                                            "activity": "Update ADFErrorLog - others",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "command": {
                                            "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().ReportingDate},@{item().ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{pipeline().parameters.p_billingId}',  ErrorSubscription= '@{pipeline().parameters.p_billingId}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                            "type": "Expression"
                                        },
                                        "commandTimeout": "00:20:00"
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "DataLake to ADX",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 1,
                                        "retryIntervalInSeconds": 300,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": {
                                                    "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/UsageByBillingID",
                                                    "type": "Expression"
                                                },
                                                "wildcardFileName": "*",
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureDataExplorerSink"
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "name": "kind",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "id",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "name",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "type",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "tags",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "tags",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingAccountId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingAccountName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingProfileId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingProfileName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "accountOwnerId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "accountName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "subscriptionId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "subscriptionName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "date",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "date",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "product",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "product",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "partNumber",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "partNumber",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "meterId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "meterId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "quantity",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "quantity",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "effectivePrice",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "effectivePrice",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "cost",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "cost",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "unitPrice",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "unitPrice",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingCurrency",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingCurrency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceLocation",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "consumedService",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "consumedService",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "serviceInfo2",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "serviceInfo2",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "invoiceSection",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "invoiceSection",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceGroup",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceGroup",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "offerId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "offerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "publisherType",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "publisherType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "chargeType",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "chargeType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "frequency",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "frequency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "meterDetails",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "meterDetails",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "src_BillingDataTSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": "billingdata",
                                                "DirectoryName": {
                                                    "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/UsageByBillingID",
                                                    "type": "Expression"
                                                },
                                                "FileName": "*"
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "adx_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "TableName": "BillingData_Tags"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "GetSPNSecret",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": {
                                "value": "@concat(pipeline().parameters.p_SPNSecretURL,'?api-version=7.0')",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "ClientID": {
                        "type": "string",
                        "defaultValue": "aa5605bb-2877-483d-b005-e1439ee1f988"
                    },
                    "tenant_id": {
                        "type": "string",
                        "defaultValue": "8a807b9b-02da-47f3-a903-791a42a2285c"
                    },
                    "DaterangeKQL": {
                        "type": "string",
                        "defaultValue": "range ReportingDate from ago(5000d) to datetime(2021-07-01 00:00:00) step 1d | extend ReportingDate=todatetime(format_datetime(ReportingDate, 'yyyy-MM-dd')) | where tostring(ReportingDate) contains '2021'"
                    },
                    "p_SPNSecretURL": {
                        "type": "string",
                        "defaultValue": "https://kv-ccop-dv.vault.azure.net/secrets/CostMGMT-SPN-Secret/eafafff824ca4d8c8a8c604579b70ed1"
                    },
                    "p_billingId": {
                        "type": "string",
                        "defaultValue": "78931757"
                    }
                },
                "variables": {
                    "Token": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Billing/HistoricData"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataTSV')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 1 - API Call - Reservation Usage')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Loop Through Days",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Clear Folder Contents",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Get Date and BillingID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Date and BillingID').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Copy REST Output",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:05:00",
                                            "requestInterval": "00.00:00:02.000",
                                            "requestMethod": "GET",
                                            "paginationRules": {
                                                "AbsoluteUrl": "$['nextLink']"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['name']"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['type']"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['reservationOrderId']"
                                                    },
                                                    "sink": {
                                                        "name": "reservationOrderId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['reservationId']"
                                                    },
                                                    "sink": {
                                                        "name": "reservationId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['skuName']"
                                                    },
                                                    "sink": {
                                                        "name": "skuName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['kind']"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['reservedHours']"
                                                    },
                                                    "sink": {
                                                        "name": "reservedHours",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['usageDate']"
                                                    },
                                                    "sink": {
                                                        "name": "usageDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['usedHours']"
                                                    },
                                                    "sink": {
                                                        "name": "usedHours",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['minUtilizationPercentage']"
                                                    },
                                                    "sink": {
                                                        "name": "minUtilizationPercentage",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['avgUtilizationPercentage']"
                                                    },
                                                    "sink": {
                                                        "name": "avgUtilizationPercentage",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['maxUtilizationPercentage']"
                                                    },
                                                    "sink": {
                                                        "name": "maxUtilizationPercentage",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['purchasedQuantity']"
                                                    },
                                                    "sink": {
                                                        "name": "purchasedQuantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['remainingQuantity']"
                                                    },
                                                    "sink": {
                                                        "name": "remainingQuantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['totalReservedQuantity']"
                                                    },
                                                    "sink": {
                                                        "name": "totalReservedQuantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['usedQuantity']"
                                                    },
                                                    "sink": {
                                                        "name": "usedQuantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['utilizedPercentage']"
                                                    },
                                                    "sink": {
                                                        "name": "utilizedPercentage",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_RelativeURL": {
                                                    "value": "/providers/Microsoft.Billing/billingAccounts/@{item().BillingID}/providers/Microsoft.Consumption/reservationSummaries?grain=daily&$filter=properties/usageDate ge @{item().BeginDate} AND properties/usageDate le @{item().EndDate}&api-version=2019-10-01",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "BillingDataCSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "sink_filename": {
                                                    "value": "@{guid()}_@{item().BillingID}_@{item().BeginDate}_@{item().EndDate}.csv",
                                                    "type": "Expression"
                                                },
                                                "dir_name": {
                                                    "value": "@variables('v_ReservationTempFolderName')",
                                                    "type": "Expression"
                                                },
                                                "container_name": {
                                                    "value": "@pipeline().parameters.p_containername",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Wait for 7 seconds",
                                    "type": "Wait",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 7
                                    }
                                },
                                {
                                    "name": "If Gateway Error",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@or(greater(indexof(activity('Copy REST Output').output.errors[0]['Message'], 'GatewayTimeout' ) ,-1), \ngreater(indexof(activity('Copy REST Output').output.errors[0]['Message'], 'Too many requests' ) ,-1))\n",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Update ADFErrorLog - others",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Reservation', ReportingDate='@{item().BeginDate},@{item().EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Copy Rest Ouput', ErrorCode= '@{activity('Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().BillingID}',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='@{pipeline().parameters.p_BatchType}'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError_Log",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog - others",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Reservation', ReportingDate='@{item().BeginDate},@{item().EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().BillingID}',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='@{pipeline().parameters.p_BatchType}'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Wait 7 minutes",
                                                "type": "Wait",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "waitTimeInSeconds": 420
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Retry Copy REST Output",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Reservation', ReportingDate='@{item().BeginDate},@{item().EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Retry Copy REST Output', ErrorCode= '@{activity('Retry Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Retry Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().BillingID}',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='@{pipeline().parameters.p_BatchType}'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Reservation', ReportingDate='@{item().BeginDate},@{item().EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().BillingID}',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='@{pipeline().parameters.p_BatchType}'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Retry Copy REST Output",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Wait 7 minutes",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "RestSource",
                                                        "httpRequestTimeout": "00:05:00",
                                                        "requestInterval": "00.00:00:02.000",
                                                        "requestMethod": "GET",
                                                        "paginationRules": {
                                                            "AbsoluteUrl": "$['nextLink']"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".csv"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "path": "[['id']"
                                                                },
                                                                "sink": {
                                                                    "name": "id",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['name']"
                                                                },
                                                                "sink": {
                                                                    "name": "name",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['type']"
                                                                },
                                                                "sink": {
                                                                    "name": "type",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['reservationOrderId']"
                                                                },
                                                                "sink": {
                                                                    "name": "reservationOrderId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['reservationId']"
                                                                },
                                                                "sink": {
                                                                    "name": "reservationId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['skuName']"
                                                                },
                                                                "sink": {
                                                                    "name": "skuName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['kind']"
                                                                },
                                                                "sink": {
                                                                    "name": "kind",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['reservedHours']"
                                                                },
                                                                "sink": {
                                                                    "name": "reservedHours",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['usageDate']"
                                                                },
                                                                "sink": {
                                                                    "name": "usageDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['usedHours']"
                                                                },
                                                                "sink": {
                                                                    "name": "usedHours",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['minUtilizationPercentage']"
                                                                },
                                                                "sink": {
                                                                    "name": "minUtilizationPercentage",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['avgUtilizationPercentage']"
                                                                },
                                                                "sink": {
                                                                    "name": "avgUtilizationPercentage",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['maxUtilizationPercentage']"
                                                                },
                                                                "sink": {
                                                                    "name": "maxUtilizationPercentage",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['purchasedQuantity']"
                                                                },
                                                                "sink": {
                                                                    "name": "purchasedQuantity",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['remainingQuantity']"
                                                                },
                                                                "sink": {
                                                                    "name": "remainingQuantity",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['totalReservedQuantity']"
                                                                },
                                                                "sink": {
                                                                    "name": "totalReservedQuantity",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['usedQuantity']"
                                                                },
                                                                "sink": {
                                                                    "name": "usedQuantity",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['utilizedPercentage']"
                                                                },
                                                                "sink": {
                                                                    "name": "utilizedPercentage",
                                                                    "type": "String"
                                                                }
                                                            }
                                                        ],
                                                        "collectionReference": "$['value']"
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "RestResource_BillingData",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "p_RelativeURL": {
                                                                "value": "/providers/Microsoft.Billing/billingAccounts/@{item().BillingID}/providers/Microsoft.Consumption/reservationSummaries?grain=daily&$filter=properties/usageDate ge @{item().BeginDate} AND properties/usageDate le @{item().EndDate}&api-version=2019-10-01",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "BillingDataCSV",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "sink_filename": {
                                                                "value": "@{guid()}_@{item().BillingID}_@{item().BeginDate}_@{item().EndDate}.csv",
                                                                "type": "Expression"
                                                            },
                                                            "dir_name": {
                                                                "value": "@variables('v_ReservationTempFolderName')",
                                                                "type": "Expression"
                                                            },
                                                            "container_name": {
                                                                "value": "@pipeline().parameters.p_containername",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "ReportingDates_Update2",
                                                "type": "AppendVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Retry Copy REST Output",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "v_ReportingDates",
                                                    "value": {
                                                        "value": "@{item().BeginDate},@{item().EndDate}",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "ReportingDates_Update1",
                                    "type": "AppendVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Wait for 7 seconds",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_ReportingDates",
                                        "value": {
                                            "value": "@{item().BeginDate},@{item().EndDate}",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Update ADX Table",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Split Downloaded Files",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 2 - ADX Stage to Prod - Reservation Usage",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_BillingDate": {
                                    "value": "@activity('File Dates').output.value",
                                    "type": "Expression"
                                },
                                "p_SubDirectory": {
                                    "value": "@variables('v_ReservationFolderName')",
                                    "type": "Expression"
                                },
                                "p_containername": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "p_BatchType": {
                                    "value": "@pipeline().parameters.p_BatchType",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Lookup Max Error TimeStamp",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "let _lastretry = toscalar(WaterMark | distinct Reservation_LastRetry);\nADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - Reservation'\n| summarize MaxErrorTimeStamp = max(ErrorTimestamp)\n| project MaxErrorTimeStamp=iif(isnull(MaxErrorTimeStamp),_lastretry,MaxErrorTimeStamp)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            }
                        }
                    },
                    {
                        "name": "Update WaterMark",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Update ADX Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace WaterMark <|\nWaterMark\n| project BillingData_LastRetry,Reservation_LastRetry = todatetime('@{activity('Lookup Max Error TimeStamp').output.firstRow.MaxErrorTimeStamp}'), Credit_LastRetry, ReservationDesc_LastRetry,MarketPlace_LastRetry,ForeCast_LastRetry",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Is Process Date Passed",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Lookup Max Error TimeStamp",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(and(equals(pipeline().parameters.p_BeginDate,'NA'),equals(pipeline().parameters.p_EndDate,'NA')),equals(pipeline().parameters.p_BatchType,'Daily'))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Set KQL ProcessDate not equals NA",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_KQL",
                                        "value": {
                                            "value": "let _batchmode = '@{pipeline().parameters.p_BatchType}';\nlet _startdate = iif('@{pipeline().parameters.p_BeginDate}'=~'NA', startofmonth(now(),-1), todatetime('@{pipeline().parameters.p_BeginDate}'));\nlet _enddate = iif('@{pipeline().parameters.p_EndDate}'=~'NA', endofmonth(now(),-1), todatetime('@{pipeline().parameters.p_EndDate}'));\nlet _lastretry = toscalar(WaterMark | distinct Reservation_LastRetry);\nlet BillingIds = materialize(datatable (CommonJoin:int, BillingID:dynamic) [1, dynamic(@{pipeline().parameters.p_BillingIds})] | mv-expand BillingID | extend BillingID=tostring(BillingID));\nlet NewBatch = materialize(\nBillingIds | extend BillingID=tostring(BillingID), BeginDate = todatetime(_startdate), EndDate = todatetime(_enddate), ReportingDate=range(_startdate, _enddate, 1d)\n| mv-expand ReportingDate\n| extend ReportingDate = todatetime(ReportingDate)\n| project-away CommonJoin\n);\nlet FailedBatch = materialize( ADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - Reservation'\n| extend BeginDate=todatetime(split(ReportingDate, ',')[0]), EndDate=todatetime(split(ReportingDate, ',')[1])\n| extend ReportingDate=range(BeginDate, EndDate, 1d)\n| mv-expand ReportingDate\n| project BillingID=ErrorResourceID,BeginDate, EndDate, ReportingDate=todatetime(ReportingDate)\n);\nNewBatch\n| union FailedBatch\n| extend Month=format_datetime(ReportingDate, 'yyyy-MM')\n| summarize BeginDate=min(ReportingDate), EndDate=max(ReportingDate) by BillingID, Month\n| project BillingID, BeginDate=format_datetime(BeginDate, 'yyyy-MM-dd'), EndDate=format_datetime(EndDate, 'yyyy-MM-dd')\n| distinct BillingID, BeginDate, EndDate",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Set KQL ProcessDate equals NA",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_KQL",
                                        "value": {
                                            "value": "let _batchmode = '@{pipeline().parameters.p_BatchType}';\nlet _lookbackdayparameter = now(-@{pipeline().parameters.p_LookBackInDay}d);\nlet _lastretry = toscalar(WaterMark | distinct Reservation_LastRetry);\nlet BillingIds = materialize(datatable (CommonJoin:int, BillingID:dynamic) [1, dynamic(@{pipeline().parameters.p_BillingIds})] | mv-expand BillingID | extend BillingID = tostring(BillingID));\nlet NewBatch = materialize(\nBillingIds | extend BillingID=tostring(BillingID), BeginDate = todatetime(_lookbackdayparameter), EndDate = todatetime(now(-1d)), ReportingDate=range(_lookbackdayparameter, now(-1d), 1d)\n| mv-expand ReportingDate\n| extend ReportingDate = todatetime(ReportingDate)\n| project-away CommonJoin\n);\nlet FailedBatch = materialize( ADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - Reservation'\n| extend BeginDate=todatetime(split(ReportingDate, ',')[0]), EndDate=todatetime(split(ReportingDate, ',')[1])\n| extend ReportingDate=range(BeginDate, EndDate, 1d)\n| mv-expand ReportingDate\n| project BillingID=ErrorResourceID,BeginDate, EndDate, ReportingDate=todatetime(ReportingDate)\n);\nNewBatch\n| union FailedBatch\n| extend Month=format_datetime(ReportingDate, 'yyyy-MM')\n| summarize BeginDate=min(ReportingDate), EndDate=max(ReportingDate) by BillingID, Month\n| project BillingID, BeginDate=format_datetime(BeginDate, 'yyyy-MM-dd'), EndDate=format_datetime(EndDate, 'yyyy-MM-dd')\n| distinct BillingID, BeginDate, EndDate",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Get Temp Folder Stats",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "FolderValidation",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FilePath": {
                                        "value": "@{pipeline().parameters.p_containername}/@{variables('v_ReservationTempFolderName')}",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "exists",
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "BinaryReadSettings"
                            }
                        }
                    },
                    {
                        "name": "Clear Folder Contents",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get Temp Folder Stats",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@activity('Get Temp Folder Stats').output.exists",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Delete Folder",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "FolderValidation",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FilePath": {
                                                    "value": "@{pipeline().parameters.p_containername}/@{variables('v_ReservationTempFolderName')}",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Get Date and BillingID",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Is Process Date Passed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@variables('v_KQL')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": {
                                        "value": "ADFErrorLog",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Split Downloaded Files",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Clean Up Reservation Data Folders",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API - SplitFiles - Reservation",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "container": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "sourcefilename": {
                                    "value": "@{variables('v_ReservationTempFolderName')}/*",
                                    "type": "Expression"
                                },
                                "subfolder": {
                                    "value": "@variables('v_ReservationFolderName')",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Dates",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Loop Through Days",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "let ReportingDates = materialize(datatable (ReportingDates:dynamic) [dynamic(@{variables('v_ReportingDates')})] | mv-expand ReportingDates | extend ReportingDates=tostring(ReportingDates));\nReportingDates\n| extend ReportingDate=range(todatetime(split(ReportingDates, ',')[0]), todatetime(split(ReportingDates, ',')[1]), 1d)\n| mv-expand ReportingDate\n| project ReportingDate = format_datetime(todatetime(ReportingDate), 'yyyy-MM-dd')\n| distinct ReportingDate",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Clean Up Reservation Data Folders",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "File Dates",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('File Dates').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Delete Folder Contents",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "FolderValidation",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FilePath": {
                                                    "value": "@{pipeline().parameters.p_containername}/@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{variables('v_ReservationFolderName')}",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_LookBackInDay": {
                        "type": "string",
                        "defaultValue": "3"
                    },
                    "p_BillingIds": {
                        "type": "array",
                        "defaultValue": [
                            "46132814"
                        ]
                    },
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BeginDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_EndDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_BatchType": {
                        "type": "string",
                        "defaultValue": "Daily"
                    }
                },
                "variables": {
                    "v_KQL": {
                        "type": "String"
                    },
                    "v_ReportingDates": {
                        "type": "Array"
                    },
                    "v_ReservationTempFolderName": {
                        "type": "String",
                        "defaultValue": "ReservationUtilizationTemp"
                    },
                    "v_ReservationFolderName": {
                        "type": "String",
                        "defaultValue": "Reservation"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-02-19T09:48:44Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 2 - ADX Stage to Prod - Reservation Usage')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/FolderValidation')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API - SplitFiles - Reservation')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/BillingDataCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API - Usage Monthly Load')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "For Each BillingID and Month",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Date and BillingID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Date and BillingID').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Copy REST Output",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 10,
                                        "retryIntervalInSeconds": 60,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:10:00",
                                            "requestInterval": "00.00:00:02.000",
                                            "requestMethod": "GET",
                                            "paginationRules": {
                                                "AbsoluteUrl": "$['nextLink']"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['kind']"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['name']"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['type']"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['tags']"
                                                    },
                                                    "sink": {
                                                        "name": "tags",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodStartDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodEndDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountOwnerId']"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountName']"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionId']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionName']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['date']"
                                                    },
                                                    "sink": {
                                                        "name": "date",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['product']"
                                                    },
                                                    "sink": {
                                                        "name": "product",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['partNumber']"
                                                    },
                                                    "sink": {
                                                        "name": "partNumber",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterId']"
                                                    },
                                                    "sink": {
                                                        "name": "meterId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['quantity']"
                                                    },
                                                    "sink": {
                                                        "name": "quantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['effectivePrice']"
                                                    },
                                                    "sink": {
                                                        "name": "effectivePrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['cost']"
                                                    },
                                                    "sink": {
                                                        "name": "cost",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['unitPrice']"
                                                    },
                                                    "sink": {
                                                        "name": "unitPrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingCurrency']"
                                                    },
                                                    "sink": {
                                                        "name": "billingCurrency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceLocation']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['consumedService']"
                                                    },
                                                    "sink": {
                                                        "name": "consumedService",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceId']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceName']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['serviceInfo2']"
                                                    },
                                                    "sink": {
                                                        "name": "serviceInfo2",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['invoiceSection']"
                                                    },
                                                    "sink": {
                                                        "name": "invoiceSection",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceGroup']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceGroup",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['offerId']"
                                                    },
                                                    "sink": {
                                                        "name": "offerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['isAzureCreditEligible']"
                                                    },
                                                    "sink": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['publisherType']"
                                                    },
                                                    "sink": {
                                                        "name": "publisherType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['chargeType']"
                                                    },
                                                    "sink": {
                                                        "name": "chargeType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['frequency']"
                                                    },
                                                    "sink": {
                                                        "name": "frequency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterDetails']"
                                                    },
                                                    "sink": {
                                                        "name": "meterDetails",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']",
                                            "mapComplexValuesToString": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_RelativeURL": {
                                                    "value": "/providers/Microsoft.Billing/BillingAccounts/@{Item().BillingId}/providers/Microsoft.Consumption/usageDetails?api-version=2019-10-01&$expand=meterDetails&$filter=properties/usageStart gt '@{item().BeginDate}' and properties/usageEnd lt '@{item().EndDate}'",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "src_BillingDataTSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "billingdata",
                                                    "type": "Expression"
                                                },
                                                "DirectoryName": {
                                                    "value": "@{formatDateTime(item().EndDate, 'yyyy')}/@{formatDateTime(item().EndDate, 'MM')}/@{formatDateTime(item().EndDate, 'dd')}/UsageByBillingID_Monthly",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@{item().BillingId}_usage.tsv",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "UpdateDate",
                                    "type": "AppendVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_LastDayOfMonth",
                                        "value": {
                                            "value": "@item().EndDate",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Get Date and BillingID",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "let _startdate = iif('@{pipeline().parameters.p_BeginDate}'=~'NA', startofmonth(now(),-1), todatetime('@{pipeline().parameters.p_BeginDate}'));\nlet _enddate = iif('@{pipeline().parameters.p_BeginDate}'=~'NA', endofmonth(now(),-1), todatetime('@{pipeline().parameters.p_EndDate}'));\nlet BillingIds = materialize(datatable (CommonJoin:int, BillingID:dynamic) [1, dynamic(@{pipeline().parameters.BillingIds})]\n| mv-expand BillingID);\nrange ReportingDate from _startdate to _enddate step 1d\n| extend CommonJoin=toint(1),BeginDate=format_datetime(startofmonth(ReportingDate), 'yyyy-MM-dd'), EndDate=format_datetime(endofmonth(ReportingDate), 'yyyy-MM-dd')\n| distinct BeginDate, EndDate, CommonJoin\n| join kind=inner BillingIds on CommonJoin\n| project BeginDate, EndDate, BillingID",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": {
                                        "value": "ADFErrorLog",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "From Staging Table to Production",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Update UsageDataLog",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace BillingData <|\nBillingData\n| where billingMonth !in (\n    (Staging_BillingData | project billingMonth = format_datetime(todatetime(['date']), 'yyyy-MM') | distinct billingMonth)\n)\n| union \n(\nStaging_BillingData \n| project\n['kind'] = tolower(['kind']),\n['id']=tolower(['id']),\nname=tolower(name),\n['type']=tolower(['type']),\ntags=tolower(tags),\nbillingAccountId=tolower(billingAccountId),\nbillingAccountName=tolower(billingAccountName),\nbillingPeriodStartDate,\nbillingPeriodEndDate,\nbillingProfileId=tolower(billingProfileId),\nbillingProfileName=tolower(billingProfileName),\naccountOwnerId=tolower(accountOwnerId),\naccountName=tolower(accountName),\nsubscriptionId=tolower(subscriptionId),\nsubscriptionName=tolower(subscriptionName),\n['date']=['date'],\nproduct=tolower(product),\npartNumber=tolower(partNumber),\nmeterId=tolower(meterId),\nquantity,\neffectivePrice,\ncost,\nunitPrice,\nbillingCurrency=tolower(billingCurrency),\nresourceLocation=tolower(resourceLocation),\nconsumedService=tolower(consumedService),\nresourceId=tolower(resourceId),\nresourceName=tolower(resourceName),\nserviceInfo2=tolower(serviceInfo2),\ninvoiceSection=tolower(invoiceSection),\nresourceGroup=tolower(resourceGroup),\nofferId=tolower(offerId),\nisAzureCreditEligible=tolower(isAzureCreditEligible),\npublisherType=tolower(publisherType),\nchargeType=tolower(chargeType),\nfrequency=tolower(frequency),\nmeterDetails=tolower(meterDetails),\nRGFQN = strcat('/subscriptions/', tolower(subscriptionId), '/resourceGroups/', tolower(resourceGroup )),\nbillingDate = todatetime(format_datetime(todatetime(['date']), 'yyyy-MM-dd')),\nbillingMonth = format_datetime(todatetime(['date']), 'yyyy-MM')\n)",
                                "type": "Expression"
                            },
                            "commandTimeout": "01:00:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging Table",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "For Each BillingID and Month",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace  Staging_BillingData <|\nStaging_BillingData\n| take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Loop Through Days",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('v_LastDayOfMonth')",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "DataLake to ADX",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 1,
                                        "retryIntervalInSeconds": 300,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": {
                                                    "value": "@{formatDateTime(item(), 'yyyy')}/@{formatDateTime(item(), 'MM')}/@{formatDateTime(item(), 'dd')}/UsageByBillingID_Monthly",
                                                    "type": "Expression"
                                                },
                                                "wildcardFileName": "*",
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureDataExplorerSink"
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "name": "kind",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "id",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "name",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "type",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "tags",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "tags",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingAccountId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingAccountName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingProfileId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingProfileName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "accountOwnerId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "accountName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "subscriptionId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "subscriptionName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "date",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "date",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "product",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "product",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "partNumber",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "partNumber",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "meterId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "meterId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "quantity",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "quantity",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "effectivePrice",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "effectivePrice",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "cost",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "cost",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "unitPrice",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "unitPrice",
                                                        "type": "Double"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "billingCurrency",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "billingCurrency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceLocation",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "consumedService",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "consumedService",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceName",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "serviceInfo2",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "serviceInfo2",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "invoiceSection",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "invoiceSection",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "resourceGroup",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "resourceGroup",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "offerId",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "offerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "publisherType",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "publisherType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "chargeType",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "chargeType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "frequency",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "frequency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "meterDetails",
                                                        "type": "String",
                                                        "physicalType": "String"
                                                    },
                                                    "sink": {
                                                        "name": "meterDetails",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "src_BillingDataTSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": "billingdata",
                                                "DirectoryName": {
                                                    "value": "@{formatDateTime(item(), 'yyyy')}/@{formatDateTime(item(), 'MM')}/@{formatDateTime(item(), 'dd')}/UsageByBillingID_Monthly",
                                                    "type": "Expression"
                                                },
                                                "FileName": "*"
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "adx_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "TableName": "Staging_BillingData"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "Update UsageDataLog",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Loop Through Days",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-append usageDataLog <| \nStaging_BillingData\n| summarize usageCost=sum(cost) by billingAccountId, subscriptionId, subscriptionName,billingDate = format_datetime(todatetime(['date']), 'yyyy-MM-dd'), frequency = 'Monthly', logdate=now()",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "RefreshPBI",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "From Staging Table to Production",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "RefershPBITable",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_BeginDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_EndDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "BillingIds": {
                        "type": "array",
                        "defaultValue": [
                            "88673741"
                        ]
                    }
                },
                "variables": {
                    "v_LastDayOfMonth": {
                        "type": "Array"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:32Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/pipelines/RefershPBITable')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataTSV')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 1 - API Call - MarketPlace')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LoopThroughDays",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "GetProcessDates",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('GetProcessDates').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Get BillingSummary",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "GetAPIKey",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        },
                                        {
                                            "activity": "Set Folder Path",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "@concat('bearer ',activity('GetAPIKey').output.value)",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "$['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['subscriptionGuid']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionGuid",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['subscriptionName']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['meterId']"
                                                    },
                                                    "sink": {
                                                        "name": "meterId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['usageStartDate']"
                                                    },
                                                    "sink": {
                                                        "name": "usageStartDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['usageEndDate']"
                                                    },
                                                    "sink": {
                                                        "name": "usageEndDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['offerName']"
                                                    },
                                                    "sink": {
                                                        "name": "offerName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['resourceGroup']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceGroup",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['instanceId']"
                                                    },
                                                    "sink": {
                                                        "name": "instanceId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['additionalInfo']"
                                                    },
                                                    "sink": {
                                                        "name": "additionalInfo",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['tags']"
                                                    },
                                                    "sink": {
                                                        "name": "tags",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['orderNumber']"
                                                    },
                                                    "sink": {
                                                        "name": "orderNumber",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['unitOfMeasure']"
                                                    },
                                                    "sink": {
                                                        "name": "unitOfMeasure",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['costCenter']"
                                                    },
                                                    "sink": {
                                                        "name": "costCenter",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['accountId']"
                                                    },
                                                    "sink": {
                                                        "name": "accountId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['accountName']"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['accountOwnerId']"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['departmentId']"
                                                    },
                                                    "sink": {
                                                        "name": "departmentId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['departmentName']"
                                                    },
                                                    "sink": {
                                                        "name": "departmentName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['publisherName']"
                                                    },
                                                    "sink": {
                                                        "name": "publisherName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['planName']"
                                                    },
                                                    "sink": {
                                                        "name": "planName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['consumedQuantity']"
                                                    },
                                                    "sink": {
                                                        "name": "consumedQuantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['resourceRate']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceRate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['extendedCost']"
                                                    },
                                                    "sink": {
                                                        "name": "extendedCost",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['isRecurringCharge']"
                                                    },
                                                    "sink": {
                                                        "name": "isRecurringCharge",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "mapComplexValuesToString": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingSummary",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "relativeurl": {
                                                    "value": "v3/enrollments/@{item().BillingID}/billingPeriods/@{variables('v_ReportingMonth')}/marketplacecharges",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "src_BillingDataTSV_Marketplace",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.p_containername",
                                                    "type": "Expression"
                                                },
                                                "DirectoryName": {
                                                    "value": "@{variables('v_SubDirectory')}/MarketPlace",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@{item().BillingID}.tsv",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "GetAPIKey",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": true,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "GET",
                                        "headers": {},
                                        "url": {
                                            "value": "@concat(trim(item().KeyVaultURLForAPIKey),'?api-version=7.0')",
                                            "type": "Expression"
                                        },
                                        "authentication": {
                                            "type": "MSI",
                                            "resource": "https://vault.azure.net"
                                        }
                                    }
                                },
                                {
                                    "name": "SetBillingMonth",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "SetProcessingDays",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_ReportingMonth",
                                        "value": {
                                            "value": "@{formatDateTime(item().EndDate, 'yyyy')}@{formatDateTime(item().EndDate, 'MM')}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set Folder Path",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "SetBillingMonth",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_SubDirectory",
                                        "value": {
                                            "value": "@{formatDateTime(item().EndDate, 'yyyy')}/@{formatDateTime(item().EndDate, 'MM')}/@{formatDateTime(item().EndDate, 'dd')}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "If Gateway Error",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get BillingSummary",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@or(greater(indexof(activity('Get BillingSummary').output.errors[0]['Message'], 'GatewayTimeout' ) ,-1), \ngreater(indexof(activity('Get BillingSummary').output.errors[0]['Message'], 'Too many requests' ) ,-1))\n",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Update ADFErrorLog - others",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - MarketPlace', ReportingDate='@{item().BeginDate},@{item().EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Retry Copy Rest Ouput', ErrorCode= '@{activity('Get BillingSummary').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Get BillingSummary').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= 'item().BillingID',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='@{pipeline().parameters.p_BatchType}'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError_Log",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog - others",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - MarketPlace', ReportingDate='@{item().BeginDate},@{item().EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= 'item().BillingID',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='@{pipeline().parameters.p_BatchType}'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Wait 7 minutes",
                                                "type": "Wait",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "waitTimeInSeconds": 420
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get BillingSummary_Retry",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - MarketPlace', ReportingDate='@{item().BeginDate},@{item().EndDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Retry Copy Rest Ouput', ErrorCode= '@{activity('Get BillingSummary_Retry').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Get BillingSummary_Retry').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= 'item().BillingID',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}'), BatchMode='@{pipeline().parameters.p_BatchType}'",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - MarketPlace', ReportingDate='@{item().ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '',  ErrorSubscription= '', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Get BillingSummary_Retry",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Wait 7 minutes",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "RestSource",
                                                        "httpRequestTimeout": "00:01:40",
                                                        "requestInterval": "00.00:00:00.010",
                                                        "requestMethod": "GET",
                                                        "additionalHeaders": {
                                                            "Authorization": {
                                                                "value": "@concat('bearer ',activity('GetAPIKey').output.value)",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".txt"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "path": "$['id']"
                                                                },
                                                                "sink": {
                                                                    "name": "id",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['subscriptionGuid']"
                                                                },
                                                                "sink": {
                                                                    "name": "subscriptionGuid",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['subscriptionName']"
                                                                },
                                                                "sink": {
                                                                    "name": "subscriptionName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['meterId']"
                                                                },
                                                                "sink": {
                                                                    "name": "meterId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['usageStartDate']"
                                                                },
                                                                "sink": {
                                                                    "name": "usageStartDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['usageEndDate']"
                                                                },
                                                                "sink": {
                                                                    "name": "usageEndDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['offerName']"
                                                                },
                                                                "sink": {
                                                                    "name": "offerName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['resourceGroup']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceGroup",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['instanceId']"
                                                                },
                                                                "sink": {
                                                                    "name": "instanceId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['additionalInfo']"
                                                                },
                                                                "sink": {
                                                                    "name": "additionalInfo",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['tags']"
                                                                },
                                                                "sink": {
                                                                    "name": "tags",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['orderNumber']"
                                                                },
                                                                "sink": {
                                                                    "name": "orderNumber",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['unitOfMeasure']"
                                                                },
                                                                "sink": {
                                                                    "name": "unitOfMeasure",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['costCenter']"
                                                                },
                                                                "sink": {
                                                                    "name": "costCenter",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['accountId']"
                                                                },
                                                                "sink": {
                                                                    "name": "accountId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['accountName']"
                                                                },
                                                                "sink": {
                                                                    "name": "accountName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['accountOwnerId']"
                                                                },
                                                                "sink": {
                                                                    "name": "accountOwnerId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['departmentId']"
                                                                },
                                                                "sink": {
                                                                    "name": "departmentId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['departmentName']"
                                                                },
                                                                "sink": {
                                                                    "name": "departmentName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['publisherName']"
                                                                },
                                                                "sink": {
                                                                    "name": "publisherName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['planName']"
                                                                },
                                                                "sink": {
                                                                    "name": "planName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['consumedQuantity']"
                                                                },
                                                                "sink": {
                                                                    "name": "consumedQuantity",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['resourceRate']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceRate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['extendedCost']"
                                                                },
                                                                "sink": {
                                                                    "name": "extendedCost",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['isRecurringCharge']"
                                                                },
                                                                "sink": {
                                                                    "name": "isRecurringCharge",
                                                                    "type": "String"
                                                                }
                                                            }
                                                        ],
                                                        "mapComplexValuesToString": true
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "RestResource_BillingSummary",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "relativeurl": {
                                                                "value": "v3/enrollments/@{item().BillingID}/billingPeriods/@{variables('v_ReportingMonth')}/marketplacecharges",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "src_BillingDataTSV_Marketplace",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "ContainerName": {
                                                                "value": "@pipeline().parameters.p_containername",
                                                                "type": "Expression"
                                                            },
                                                            "DirectoryName": {
                                                                "value": "@{variables('v_SubDirectory')}/MarketPlace",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@{item().BillingID}.tsv",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "SetProcessingDays",
                                    "type": "AppendVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_ReportingDates",
                                        "value": {
                                            "value": "@item().EndDate",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Lookup Max Error TimeStamp",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "let _lastretry = toscalar(WaterMark | distinct MarketPlace_LastRetry);\nADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - MarketPlace'\n| where ErrorMessage !contains 'NotFound'\n| summarize MaxErrorTimeStamp = max(ErrorTimestamp)\n| project MaxErrorTimeStamp=iif(isnull(MaxErrorTimeStamp),_lastretry,MaxErrorTimeStamp)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            }
                        }
                    },
                    {
                        "name": "GetProcessDates",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Is Process Date Passed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@variables('v_KQL')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Is Process Date Passed",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Lookup Max Error TimeStamp",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(and(equals(pipeline().parameters.p_BeginDate,'NA'),equals(pipeline().parameters.p_EndDate,'NA')),equals(pipeline().parameters.p_BatchType,'Daily'))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Set KQL ProcessDate not equals NA",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_KQL",
                                        "value": {
                                            "value": "let _batchmode = '@{pipeline().parameters.p_BatchType}';\nlet _startdate = iif('@{pipeline().parameters.p_BeginDate}'=~'NA', startofmonth(now(),-1), todatetime('@{pipeline().parameters.p_BeginDate}'));\nlet _enddate = iif('@{pipeline().parameters.p_EndDate}'=~'NA', endofmonth(now(),-1), todatetime('@{pipeline().parameters.p_EndDate}'));\nlet _lastretry = toscalar(WaterMark | distinct MarketPlace_LastRetry);\nlet BillingIds = materialize(datatable (CommonJoin:int, BillingID:dynamic) [1, dynamic(@{pipeline().parameters.p_BillingIds})] | mv-expand BillingID \n| extend x=parse_json(BillingID) | project CommonJoin, BillingID = tostring(x.BillingID), KeyVaultURLForAPIKey=tostring(x.KeyVaultURLForAPIKey));\nlet NewBatch = materialize(\nBillingIds | extend BillingID=tostring(BillingID), BeginDate = todatetime(_startdate), EndDate = todatetime(_enddate), ReportingDate=range(_startdate, _enddate, 1d)\n| mv-expand ReportingDate\n| extend ReportingDate = todatetime(ReportingDate)\n);\nlet FailedBatch = materialize( ADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - MarketPlace'\n| extend BeginDate=todatetime(split(ReportingDate, ',')[0]), EndDate=todatetime(split(ReportingDate, ',')[1])\n| extend ReportingDate=range(BeginDate, EndDate, 1d)\n| mv-expand ReportingDate\n| project BillingID=ErrorResourceID,BeginDate, EndDate, ReportingDate=todatetime(ReportingDate)\n);\nNewBatch\n| union FailedBatch\n| extend Month=format_datetime(ReportingDate, 'yyyy-MM')\n| summarize BeginDate=min(ReportingDate), EndDate=max(ReportingDate) by BillingID, Month\n| extend BeginDate=startofmonth(BeginDate), EndDate=endofmonth(EndDate)\n| project BillingID, BeginDate=format_datetime(BeginDate, 'yyyy-MM-dd'), EndDate=format_datetime(EndDate, 'yyyy-MM-dd')\n| distinct BillingID, BeginDate, EndDate\n| join kind=inner BillingIds on BillingID\n| project-away BillingID1",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Set KQL ProcessDate equals NA",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_KQL",
                                        "value": {
                                            "value": "let _batchmode = '@{pipeline().parameters.p_BatchType}';\nlet _lookbackdayparameter = now(-@{pipeline().parameters.p_LookBackInDay}d);\nlet _lastretry = toscalar(WaterMark | distinct Credit_LastRetry);\nlet BillingIds = materialize(datatable (CommonJoin:int, BillingID:dynamic) [1, dynamic(@{pipeline().parameters.p_BillingIds})] | mv-expand BillingID \n| extend x=parse_json(BillingID) | project BillingID = tostring(x.BillingID), KeyVaultURLForAPIKey=tostring(x.KeyVaultURLForAPIKey));\nlet NewBatch = materialize(\nBillingIds | extend BillingID=tostring(BillingID), BeginDate = todatetime(_lookbackdayparameter), EndDate = todatetime(now(-1d)), ReportingDate=range(_lookbackdayparameter, now(-1d), 1d)\n| mv-expand ReportingDate\n| extend ReportingDate = todatetime(ReportingDate)\n);\nlet FailedBatch = materialize( ADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - MarketPlace'\n| extend BeginDate=todatetime(split(ReportingDate, ',')[0]), EndDate=todatetime(split(ReportingDate, ',')[1])\n| extend ReportingDate=range(BeginDate, EndDate, 1d)\n| mv-expand ReportingDate\n| project BillingID=ErrorResourceID,BeginDate, EndDate, ReportingDate=todatetime(ReportingDate)\n);\nNewBatch\n| union FailedBatch\n| extend Month=format_datetime(ReportingDate, 'yyyy-MM')\n| summarize BeginDate=min(ReportingDate), EndDate=max(ReportingDate) by BillingID, Month\n| extend BeginDate=startofmonth(BeginDate), EndDate=endofmonth(EndDate)\n| project BillingID, BeginDate=format_datetime(BeginDate, 'yyyy-MM-dd'), EndDate=format_datetime(EndDate, 'yyyy-MM-dd')\n| distinct BillingID, BeginDate, EndDate\n| join kind=inner BillingIds on BillingID\n| project-away BillingID1",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Update ADX Table",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "LoopThroughDays",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 2 - ADX Stage to Prod - MarketPlace",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_StorageAccountContainer": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "p_BillingDate": {
                                    "value": "@variables('v_ReportingDates')",
                                    "type": "Expression"
                                },
                                "p_SubDirectory": "MarketPlace"
                            }
                        }
                    },
                    {
                        "name": "Update WaterMark",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Update ADX Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace WaterMark <|\nWaterMark\n| project BillingData_LastRetry,Reservation_LastRetry, Credit_LastRetry,ReservationDesc_LastRetry,MarketPlace_LastRetry = todatetime('@{activity('Lookup Max Error TimeStamp').output.firstRow.MaxErrorTimeStamp}'),ForeCast_LastRetry",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_LookBackInDay": {
                        "type": "string",
                        "defaultValue": "3"
                    },
                    "p_BillingIds": {
                        "type": "array",
                        "defaultValue": [
                            {
                                "BillingID": "46132814",
                                "KeyVaultURLForAPIKey": "https://kv-acrp-dev.vault.azure.net/secrets/APIKey-46132814/997864aa1b904061bd8a229e52b56ea4"
                            }
                        ]
                    },
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BeginDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_EndDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_BatchType": {
                        "type": "string",
                        "defaultValue": "Daily"
                    }
                },
                "variables": {
                    "v_KQL": {
                        "type": "String"
                    },
                    "v_ReportingDates": {
                        "type": "Array"
                    },
                    "v_SubDirectory": {
                        "type": "String"
                    },
                    "v_ReportingMonth": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-02-19T09:48:44Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 2 - ADX Stage to Prod - MarketPlace')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingSummary')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataTSV_Marketplace')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API - Usage - LoadMonthlyData_SplitDaily')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "GetDateRange",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Set Parent Directory",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@pipeline().parameters.DaterangeKQL",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": {
                                        "value": "ADFErrorLog",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Set ReportingDate",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetDateRange",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "v_DateRange",
                            "value": {
                                "value": "@activity('GetDateRange').output.value",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEach Subscription",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Set ReportingDate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('v_DateRange')",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 5,
                            "activities": [
                                {
                                    "name": "Copy REST Output",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Set Token",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:05:00",
                                            "requestInterval": "00.00:00:02.000",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "@variables('Token')",
                                                    "type": "Expression"
                                                }
                                            },
                                            "paginationRules": {
                                                "AbsoluteUrl": "$['nextLink']"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['kind']"
                                                    },
                                                    "sink": {
                                                        "name": "kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['name']"
                                                    },
                                                    "sink": {
                                                        "name": "name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['type']"
                                                    },
                                                    "sink": {
                                                        "name": "type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingAccountName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingAccountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodStartDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodStartDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingPeriodEndDate']"
                                                    },
                                                    "sink": {
                                                        "name": "billingPeriodEndDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileId']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingProfileName']"
                                                    },
                                                    "sink": {
                                                        "name": "billingProfileName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountOwnerId']"
                                                    },
                                                    "sink": {
                                                        "name": "accountOwnerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['accountName']"
                                                    },
                                                    "sink": {
                                                        "name": "accountName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionId']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['subscriptionName']"
                                                    },
                                                    "sink": {
                                                        "name": "subscriptionName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['date']"
                                                    },
                                                    "sink": {
                                                        "name": "date",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['product']"
                                                    },
                                                    "sink": {
                                                        "name": "product",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['partNumber']"
                                                    },
                                                    "sink": {
                                                        "name": "partNumber",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterId']"
                                                    },
                                                    "sink": {
                                                        "name": "meterId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['quantity']"
                                                    },
                                                    "sink": {
                                                        "name": "quantity",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['effectivePrice']"
                                                    },
                                                    "sink": {
                                                        "name": "effectivePrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['cost']"
                                                    },
                                                    "sink": {
                                                        "name": "cost",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['unitPrice']"
                                                    },
                                                    "sink": {
                                                        "name": "unitPrice",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['billingCurrency']"
                                                    },
                                                    "sink": {
                                                        "name": "billingCurrency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceLocation']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['consumedService']"
                                                    },
                                                    "sink": {
                                                        "name": "consumedService",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceId']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceName']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['invoiceSection']"
                                                    },
                                                    "sink": {
                                                        "name": "invoiceSection",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['resourceGroup']"
                                                    },
                                                    "sink": {
                                                        "name": "resourceGroup",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['offerId']"
                                                    },
                                                    "sink": {
                                                        "name": "offerId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['isAzureCreditEligible']"
                                                    },
                                                    "sink": {
                                                        "name": "isAzureCreditEligible",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['publisherType']"
                                                    },
                                                    "sink": {
                                                        "name": "publisherType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['chargeType']"
                                                    },
                                                    "sink": {
                                                        "name": "chargeType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['frequency']"
                                                    },
                                                    "sink": {
                                                        "name": "frequency",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['properties']['meterDetails']"
                                                    },
                                                    "sink": {
                                                        "name": "meterDetails",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource_BillingData",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "p_RelativeURL": {
                                                    "value": "/subscriptions/@{item().SubscriptionGuid}/providers/Microsoft.Consumption/usageDetails?api-version=2019-10-01&$filter=properties/usageStart gt '@{item().Min_ReportingDate}' and properties/usageEnd lt '@{item().Max_ReportingDate}'",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "BillingDataCSV",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "sink_filename": {
                                                    "value": "@{item().SubscriptionName}_@{item().SubscriptionGuid}_@{item().Filekey}.csv",
                                                    "type": "Expression"
                                                },
                                                "dir_name": {
                                                    "value": "@{formatDateTime(item().Filekey, 'yyyy')}/@{formatDateTime(item().Filekey, 'MM')}/@{formatDateTime(item().Filekey, 'dd')}/Usage",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Wait for 7 seconds",
                                    "type": "Wait",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 7
                                    }
                                },
                                {
                                    "name": "If Gateway Error",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy REST Output",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@or(greater(indexof(activity('Copy REST Output').output.errors[0]['Message'], 'GatewayTimeout' ) ,-1), \ngreater(indexof(activity('Copy REST Output').output.errors[0]['Message'], 'Too many requests' ) ,-1))\n",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Update ADFErrorLog - others",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().Min_ReportingDate},@{item().Max_ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Copy Rest Ouput', ErrorCode= '@{activity('Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError_Log",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog - others",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().Min_ReportingDate},@{item().Max_ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Wait 7 minutes",
                                                "type": "Wait",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "waitTimeInSeconds": 420
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Retry Copy REST Output",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().Min_ReportingDate},@{item().Max_ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Retry Copy Rest Ouput', ErrorCode= '@{activity('Retry Copy REST Output').output.errors[0]['Code']}' , ErrorMessage= '@{trim(replace(replace(replace(uriComponentToString(replace(replace(replace(uriComponent(activity('Retry Copy REST Output').output.errors[0]['Message']), '%0A', ''),'%0D',''),'%09','')),'\"',' '),'''',' '),'\\',''))}', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Update ADFErrorLog_SimpleError",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Update ADFErrorLog",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append ADFErrorLog <| print APIName = 'Billing API - Historic', ReportingDate='@{item().Min_ReportingDate},@{item().Max_ReportingDate}' ,ProcessDateTime= todatetime('@{pipeline().TriggerTime}') , ProcessName='REST API to Azure Data Lake' , PipelineName= '@{pipeline().Pipeline}', PipelineRunID= '@{pipeline().RunId}' , ActivityType='Copy' , ActivityName= 'Read and Copy Rest Ouput', ErrorCode= '-9999' , ErrorMessage= 'API Failure', ErrorCategory= 'ActivityFailed', ErrorResourceID= '@{item().SubscriptionGuid}',  ErrorSubscription= '@{item().SubscriptionGuid}', ErrorTimestamp=todatetime('@{utcnow()}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Retry Copy REST Output",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Set Token_copy1",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "RestSource",
                                                        "httpRequestTimeout": "00:05:00",
                                                        "requestInterval": "00.00:00:02.000",
                                                        "requestMethod": "GET",
                                                        "additionalHeaders": {
                                                            "Authorization": {
                                                                "value": "@variables('Token')",
                                                                "type": "Expression"
                                                            }
                                                        },
                                                        "paginationRules": {
                                                            "AbsoluteUrl": "$['nextLink']"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".csv"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "path": "[['kind']"
                                                                },
                                                                "sink": {
                                                                    "name": "kind",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['id']"
                                                                },
                                                                "sink": {
                                                                    "name": "id",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['name']"
                                                                },
                                                                "sink": {
                                                                    "name": "name",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['type']"
                                                                },
                                                                "sink": {
                                                                    "name": "type",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingAccountId']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingAccountId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingAccountName']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingAccountName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingPeriodStartDate']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingPeriodStartDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingPeriodEndDate']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingPeriodEndDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingProfileId']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingProfileId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingProfileName']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingProfileName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['accountOwnerId']"
                                                                },
                                                                "sink": {
                                                                    "name": "accountOwnerId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['accountName']"
                                                                },
                                                                "sink": {
                                                                    "name": "accountName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['subscriptionId']"
                                                                },
                                                                "sink": {
                                                                    "name": "subscriptionId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['subscriptionName']"
                                                                },
                                                                "sink": {
                                                                    "name": "subscriptionName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['date']"
                                                                },
                                                                "sink": {
                                                                    "name": "date",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['product']"
                                                                },
                                                                "sink": {
                                                                    "name": "product",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['partNumber']"
                                                                },
                                                                "sink": {
                                                                    "name": "partNumber",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['meterId']"
                                                                },
                                                                "sink": {
                                                                    "name": "meterId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['quantity']"
                                                                },
                                                                "sink": {
                                                                    "name": "quantity",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['effectivePrice']"
                                                                },
                                                                "sink": {
                                                                    "name": "effectivePrice",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['cost']"
                                                                },
                                                                "sink": {
                                                                    "name": "cost",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['unitPrice']"
                                                                },
                                                                "sink": {
                                                                    "name": "unitPrice",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['billingCurrency']"
                                                                },
                                                                "sink": {
                                                                    "name": "billingCurrency",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['resourceLocation']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceLocation",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['consumedService']"
                                                                },
                                                                "sink": {
                                                                    "name": "consumedService",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['resourceId']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['resourceName']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['invoiceSection']"
                                                                },
                                                                "sink": {
                                                                    "name": "invoiceSection",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['resourceGroup']"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceGroup",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['offerId']"
                                                                },
                                                                "sink": {
                                                                    "name": "offerId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['isAzureCreditEligible']"
                                                                },
                                                                "sink": {
                                                                    "name": "isAzureCreditEligible",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['publisherType']"
                                                                },
                                                                "sink": {
                                                                    "name": "publisherType",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['chargeType']"
                                                                },
                                                                "sink": {
                                                                    "name": "chargeType",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['frequency']"
                                                                },
                                                                "sink": {
                                                                    "name": "frequency",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['properties']['meterDetails']"
                                                                },
                                                                "sink": {
                                                                    "name": "meterDetails",
                                                                    "type": "String"
                                                                }
                                                            }
                                                        ],
                                                        "collectionReference": "$['value']"
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "RestResource_BillingData",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "p_RelativeURL": {
                                                                "value": "/subscriptions/@{item().SubscriptionGuid}/providers/Microsoft.Consumption/usageDetails?api-version=2019-10-01&$filter=properties/usageStart gt '@{item().Min_ReportingDate}' and properties/usageEnd lt '@{item().Max_ReportingDate}'",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "BillingDataCSV",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "sink_filename": {
                                                                "value": "@{item().SubscriptionName}_@{item().SubscriptionGuid}_@{item().Filekey}.csv",
                                                                "type": "Expression"
                                                            },
                                                            "dir_name": {
                                                                "value": "@{formatDateTime(item().Filekey, 'yyyy')}/@{formatDateTime(item().Filekey, 'MM')}/@{formatDateTime(item().Filekey, 'dd')}/Usage",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "GetBearerToken_copy1",
                                                "description": "Use this Web activity to get bearer token",
                                                "type": "WebActivity",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Wait 7 minutes",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "method": "POST",
                                                    "headers": {
                                                        "Content-Type": "application/x-www-form-urlencoded"
                                                    },
                                                    "url": {
                                                        "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                                        "type": "Expression"
                                                    },
                                                    "body": {
                                                        "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{activity('GetSPNSecret').output.value}",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Set Token_copy1",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "GetBearerToken_copy1",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "Token",
                                                    "value": {
                                                        "value": "@concat('Bearer ',activity('GetBearerToken').output.access_token)",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "GetBearerToken",
                                    "description": "Use this Web activity to get bearer token",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "GetSPNSecret",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/x-www-form-urlencoded"
                                        },
                                        "url": {
                                            "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                            "type": "Expression"
                                        },
                                        "body": {
                                            "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{activity('GetSPNSecret').output.value}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set Token",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "GetBearerToken",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "Token",
                                        "value": {
                                            "value": "@concat('Bearer ',activity('GetBearerToken').output.access_token)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "GetSPNSecret",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": true,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "GET",
                                        "headers": {},
                                        "url": {
                                            "value": "@concat(pipeline().parameters.p_SPNSecretURL,'?api-version=7.0')",
                                            "type": "Expression"
                                        },
                                        "authentication": {
                                            "type": "MSI",
                                            "resource": "https://vault.azure.net"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set Parent Directory",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "RunDate",
                            "value": {
                                "value": "@replace(replace(concat('HistoricData-Usage-',formatDateTime(utcnow())),':','-'),'.','-')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "LoadToADX",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ForEach Subscription",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Usage-InitialLoad",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_StorageAccountContainer": "billingdata",
                                "p_month_or_date": {
                                    "value": "@pipeline().parameters.p_adx_month_date",
                                    "type": "Expression"
                                },
                                "p_SubDirectory": "Usage"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "ClientID": {
                        "type": "string",
                        "defaultValue": "aa5605bb-2877-483d-b005-e1439ee1f988"
                    },
                    "tenant_id": {
                        "type": "string",
                        "defaultValue": "8a807b9b-02da-47f3-a903-791a42a2285c"
                    },
                    "DaterangeKQL": {
                        "type": "string",
                        "defaultValue": "ADFErrorLog | where ErrorTimestamp > todatetime('2021-07-29 03:26:48')  | join kind=inner (BillingConfig  | extend subscription=tostring(SubscriptionGuid))  on $left.ErrorSubscription==$right.subscription  | extend Min_ReportingDate=tostring(split(ReportingDate, ',')[0]), Max_ReportingDate=tostring(split(ReportingDate, ',')[1])  | distinct Min_ReportingDate,Max_ReportingDate,  SubscriptionName, SubscriptionGuid | extend FileKey = format_datetime(todatetime(Min_ReportingDate), 'yyyy-MM-dd')"
                    },
                    "p_SPNSecretURL": {
                        "type": "string",
                        "defaultValue": "https://kv-ccop-dv.vault.azure.net/secrets/CostMGMT-SPN-Secret/eafafff824ca4d8c8a8c604579b70ed1"
                    },
                    "p_adx_month_date": {
                        "type": "string"
                    }
                },
                "variables": {
                    "v_DateRange": {
                        "type": "Array"
                    },
                    "REST_API_ProcessStatus": {
                        "type": "String"
                    },
                    "Token": {
                        "type": "String"
                    },
                    "RunDate": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Billing/HistoricData"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:32Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/pipelines/Usage-InitialLoad')]",
                "[concat(variables('factoryId'), '/datasets/RestResource_BillingData')]",
                "[concat(variables('factoryId'), '/datasets/BillingDataCSV')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 3 - ADX Stage to Prod - Usage')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Loop Through Days",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.p_BillingDate",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Get Folder Stats",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "FolderValidation",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FilePath": {
                                                    "value": "@{pipeline().parameters.p_containername}/@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "exists",
                                            "childItems"
                                        ],
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "IsFolderValid",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Folder Stats",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@and(equals(activity('Get Folder Stats').output.exists,true),greater(length(activity('Get Folder Stats').output.childItems),0))",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "DataLake to ADX",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Reset Staging Table",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 1,
                                                    "retryIntervalInSeconds": 300,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "wildcardFolderPath": {
                                                                "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                                "type": "Expression"
                                                            },
                                                            "wildcardFileName": "*",
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "AzureDataExplorerSink"
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "name": "kind",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "kind",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "id",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "id",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "name",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "name",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "type",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "type",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "tags",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "tags",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "billingAccountId",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "billingAccountId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "billingAccountName",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "billingAccountName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "billingPeriodStartDate",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "billingPeriodStartDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "billingPeriodEndDate",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "billingPeriodEndDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "billingProfileId",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "billingProfileId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "billingProfileName",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "billingProfileName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "accountOwnerId",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "accountOwnerId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "accountName",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "accountName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "subscriptionId",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "subscriptionId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "subscriptionName",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "subscriptionName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "date",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "date",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "product",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "product",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "partNumber",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "partNumber",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "meterId",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "meterId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "quantity",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "quantity",
                                                                    "type": "Double"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "effectivePrice",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "effectivePrice",
                                                                    "type": "Double"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "cost",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "cost",
                                                                    "type": "Double"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "unitPrice",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "unitPrice",
                                                                    "type": "Double"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "billingCurrency",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "billingCurrency",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "resourceLocation",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceLocation",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "consumedService",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "consumedService",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "resourceId",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "resourceName",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceName",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "serviceInfo2",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "serviceInfo2",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "invoiceSection",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "invoiceSection",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "resourceGroup",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceGroup",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "offerId",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "offerId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "isAzureCreditEligible",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "isAzureCreditEligible",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "publisherType",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "publisherType",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "chargeType",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "chargeType",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "frequency",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "frequency",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "meterDetails",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "meterDetails",
                                                                    "type": "String"
                                                                }
                                                            }
                                                        ],
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "src_BillingDataTSV",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "ContainerName": {
                                                                "value": "@pipeline().parameters.p_containername",
                                                                "type": "Expression"
                                                            },
                                                            "DirectoryName": {
                                                                "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{pipeline().parameters.p_SubDirectory}",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": "*"
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "adx_BillingData",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "TableName": "Staging_BillingData"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Reset Staging Table",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 1,
                                                    "retryIntervalInSeconds": 300,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": ".set-or-replace  Staging_BillingData <|\nStaging_BillingData\n| take 0",
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Drop Extent and Load to Prod",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [
                                                    {
                                                        "activity": "DataLake to ADX",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "Billing API Sub 4 - ADX Stage to Prod - Usage",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "p_BillingDate": {
                                                            "value": "@item().ReportingDate",
                                                            "type": "Expression"
                                                        },
                                                        "p_SubDirectory": {
                                                            "value": "@pipeline().parameters.p_SubDirectory",
                                                            "type": "Expression"
                                                        },
                                                        "p_containername": {
                                                            "value": "@pipeline().parameters.p_containername",
                                                            "type": "Expression"
                                                        },
                                                        "p_BatchType": {
                                                            "value": "@pipeline().parameters.p_BatchType",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_BillingDate": {
                        "type": "array"
                    },
                    "p_SubDirectory": {
                        "type": "string"
                    },
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BatchType": {
                        "type": "string"
                    }
                },
                "variables": {
                    "kql": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:32Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/FolderValidation')]",
                "[concat(variables('factoryId'), '/datasets/src_BillingDataTSV')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 4 - ADX Stage to Prod - Usage')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pline Flatten VM Metrics JSON v4')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "dataflow Flatten Json",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "dataflowFlattenJSON",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "source_dirname": {
                                        "value": "'@{pipeline().parameters.source_dirname}'",
                                        "type": "Expression"
                                    },
                                    "filename": {
                                        "value": "'@{pipeline().parameters.sink_filename}'",
                                        "type": "Expression"
                                    },
                                    "sink_dirname": {
                                        "value": "'@{pipeline().parameters.sink_dirname}'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "jsonFile": {
                                        "dirname": {
                                            "value": "@pipeline().parameters.source_dirname",
                                            "type": "Expression"
                                        }
                                    },
                                    "sinkCSVFile": {
                                        "dirname": {
                                            "value": "@pipeline().parameters.sink_dirname",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "source_dirname": {
                        "type": "string",
                        "defaultValue": "json/2020/07/19"
                    },
                    "sink_dirname": {
                        "type": "string",
                        "defaultValue": "csv/2020/07/19"
                    },
                    "sink_filename": {
                        "type": "string",
                        "defaultValue": "vmmetrics_2020_07_19.csv"
                    }
                },
                "folder": {
                    "name": "VM Metrics"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:32Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/dataflowFlattenJSON')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Forecast Initial Load')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Loop Through Days",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.p_BillingDate",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Get Folder Stats",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "FolderValidation",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FilePath": {
                                                    "value": "@{pipeline().parameters.p_containername}/@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{variables('SubFolder')}/@{variables('CSVPath')}",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "exists",
                                            "childItems"
                                        ],
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "IsFolderValid",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Folder Stats",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@and(equals(activity('Get Folder Stats').output.exists,true),greater(length(activity('Get Folder Stats').output.childItems),0))",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Copy to Forecast Staging Table",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Truncate Staging",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "wildcardFolderPath": {
                                                                "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{variables('SubFolder')}/@{variables('CSVPath')}/",
                                                                "type": "Expression"
                                                            },
                                                            "wildcardFileName": "*",
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "AzureDataExplorerSink"
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "name": "SubscriptionID",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "subscriptionId",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "ResourceGroup",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "resourceGroup",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "Cost",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "cost",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "UsageDate",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "usageDate",
                                                                    "type": "String",
                                                                    "physicalType": "string"
                                                                }
                                                            }
                                                        ],
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "CSVText",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "Container": {
                                                                "value": "@pipeline().parameters.p_containername",
                                                                "type": "Expression"
                                                            },
                                                            "directory": {
                                                                "value": "@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{variables('SubFolder')}/@{variables('CSVPath')}/*",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ADX_Generic",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "TableName": "Staging_Forecast"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Truncate Staging",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": ".set-or-replace Staging_Forecast <| Staging_Forecast | take 0",
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            },
                                            {
                                                "name": "Insert into Forecast",
                                                "type": "AzureDataExplorerCommand",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Copy to Forecast Staging Table",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "command": {
                                                        "value": ".set-or-append Forecast_History <| Staging_Forecast | project subscriptionId, resourceGroup, cost=toreal(cost), usageDate=todatetime(usageDate),LogDate=todatetime('@{item().ReportingDate}')",
                                                        "type": "Expression"
                                                    },
                                                    "commandTimeout": "00:20:00"
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Forecast Daily Load",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Loop Through Days",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 1 - API Call - Forecast",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BillingDate": {
                        "type": "array"
                    }
                },
                "variables": {
                    "CSVPath": {
                        "type": "String",
                        "defaultValue": "Csv"
                    },
                    "SubFolder": {
                        "type": "String",
                        "defaultValue": "Forecast"
                    }
                },
                "folder": {
                    "name": "Initial Setup"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:33Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 1 - API Call - Forecast')]",
                "[concat(variables('factoryId'), '/datasets/FolderValidation')]",
                "[concat(variables('factoryId'), '/datasets/CSVText')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API Sub 1 - Usage Orchestrator')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "For Each BillingID",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Date and BillingID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Clear Folder Contents",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Date and BillingID').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Execute Billing API",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "Billing API Sub 2 - API Call - Usage",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "p_BillingId": {
                                                "value": "@item().BillingID",
                                                "type": "Expression"
                                            },
                                            "p_BeginDate": {
                                                "value": "@item().BeginDate",
                                                "type": "Expression"
                                            },
                                            "p_EndDate": {
                                                "value": "@item().EndDate",
                                                "type": "Expression"
                                            },
                                            "p_containername": {
                                                "value": "@pipeline().parameters.p_containername",
                                                "type": "Expression"
                                            },
                                            "p_BatchType": {
                                                "value": "@pipeline().parameters.p_BatchType",
                                                "type": "Expression"
                                            },
                                            "p_UsageTempFolderName": {
                                                "value": "@variables('v_UsageTempFolderName')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "ReportingDates",
                                    "type": "AppendVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute Billing API",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_ReportingDates",
                                        "value": {
                                            "value": "@{item().BeginDate},@{item().EndDate}",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Update WaterMark",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Insert into BillingData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace WaterMark <|\nWaterMark\n| project BillingData_LastRetry=todatetime('@{activity('Lookup Max Error TimeStamp').output.firstRow.MaxErrorTimeStamp}'),Reservation_LastRetry, Credit_LastRetry, ReservationDesc_LastRetry,MarketPlace_LastRetry,ForeCast_LastRetry",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Insert into BillingData",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Split Downloaded Files",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 3 - ADX Stage to Prod - Usage",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_BillingDate": {
                                    "value": "@activity('File Dates').output.value",
                                    "type": "Expression"
                                },
                                "p_SubDirectory": {
                                    "value": "@variables('v_UsageFolderName')",
                                    "type": "Expression"
                                },
                                "p_containername": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "p_BatchType": {
                                    "value": "@pipeline().parameters.p_BatchType",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Is Process Date Passed",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Lookup Max Error TimeStamp",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(and(equals(pipeline().parameters.p_BeginDate,'NA'),equals(pipeline().parameters.p_EndDate,'NA')),equals(pipeline().parameters.p_BatchType,'Daily'))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Set KQL ProcessDate not equals NA",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_KQL",
                                        "value": {
                                            "value": "let _batchmode = '@{pipeline().parameters.p_BatchType}';\nlet _startdate = iif('@{pipeline().parameters.p_BeginDate}'=~'NA', startofmonth(now(),-1), todatetime('@{pipeline().parameters.p_BeginDate}'));\nlet _enddate = iif('@{pipeline().parameters.p_EndDate}'=~'NA', endofmonth(now(),-1), todatetime('@{pipeline().parameters.p_EndDate}'));\nlet _lastretry = toscalar(WaterMark | distinct BillingData_LastRetry);\nlet BillingIds = materialize(datatable (CommonJoin:int, BillingID:dynamic) [1, dynamic(@{pipeline().parameters.p_BillingIds})] | mv-expand BillingID | extend BillingID=tostring(BillingID));\nlet NewBatch = materialize(\nBillingIds | extend BillingID=tostring(BillingID), BeginDate = todatetime(_startdate), EndDate = todatetime(_enddate), ReportingDate=range(_startdate, _enddate, 1d)\n| mv-expand ReportingDate\n| extend ReportingDate = todatetime(ReportingDate)\n| project-away CommonJoin\n);\nlet FailedBatch = materialize( ADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - UsageByBillingID'\n| extend BeginDate=todatetime(split(ReportingDate, ',')[0]), EndDate=todatetime(split(ReportingDate, ',')[1])\n| extend ReportingDate=range(BeginDate, EndDate, 1d)\n| mv-expand ReportingDate\n| project BillingID=ErrorResourceID,BeginDate, EndDate, ReportingDate=todatetime(ReportingDate)\n);\nNewBatch\n| union FailedBatch\n| extend Month=format_datetime(ReportingDate, 'yyyy-MM')\n| summarize BeginDate=min(ReportingDate), EndDate=max(ReportingDate) by BillingID, Month\n| project BillingID, BeginDate=format_datetime(BeginDate, 'yyyy-MM-dd'), EndDate=format_datetime(EndDate, 'yyyy-MM-dd')\n| distinct BillingID, BeginDate, EndDate",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Set KQL ProcessDate equals NA",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_KQL",
                                        "value": {
                                            "value": "let _batchmode = '@{pipeline().parameters.p_BatchType}';\nlet _lookbackdayparameter = now(-@{pipeline().parameters.p_LookBackInDay}d);\nlet _lastretry = toscalar(WaterMark | distinct BillingData_LastRetry);\nlet BillingIds = materialize(datatable (CommonJoin:int, BillingID:dynamic) [1, dynamic(@{pipeline().parameters.p_BillingIds})] | mv-expand BillingID | extend BillingID = tostring(BillingID));\nlet NewBatch = materialize(\nBillingIds | extend BillingID=tostring(BillingID), BeginDate = todatetime(_lookbackdayparameter), EndDate = todatetime(now(-1d)), ReportingDate=range(_lookbackdayparameter, now(-1d), 1d)\n| mv-expand ReportingDate\n| extend ReportingDate = todatetime(ReportingDate)\n| project-away CommonJoin\n);\nlet FailedBatch = materialize( ADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - UsageByBillingID'\n| extend BeginDate=todatetime(split(ReportingDate, ',')[0]), EndDate=todatetime(split(ReportingDate, ',')[1])\n| extend ReportingDate=range(BeginDate, EndDate, 1d)\n| mv-expand ReportingDate\n| project BillingID=ErrorResourceID,BeginDate, EndDate, ReportingDate=todatetime(ReportingDate)\n);\nNewBatch\n| union FailedBatch\n| extend Month=format_datetime(ReportingDate, 'yyyy-MM')\n| summarize BeginDate=min(ReportingDate), EndDate=max(ReportingDate) by BillingID, Month\n| project BillingID, BeginDate=format_datetime(BeginDate, 'yyyy-MM-dd'), EndDate=format_datetime(EndDate, 'yyyy-MM-dd')\n| distinct BillingID, BeginDate, EndDate",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Get Date and BillingID",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Is Process Date Passed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@variables('v_KQL')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": {
                                        "value": "ADFErrorLog",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Lookup Max Error TimeStamp",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "let _lastretry = toscalar(WaterMark | distinct BillingData_LastRetry);\nADFErrorLog\n| where ErrorTimestamp > _lastretry\n| where APIName  == 'Billing API - UsageByBillingID'\n| summarize MaxErrorTimeStamp = max(ErrorTimestamp)\n| project MaxErrorTimeStamp=iif(isnull(MaxErrorTimeStamp),_lastretry,MaxErrorTimeStamp)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Temp Folder Stats",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "FolderValidation",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FilePath": {
                                        "value": "@{pipeline().parameters.p_containername}/@{variables('v_UsageTempFolderName')}",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "exists",
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "BinaryReadSettings"
                            }
                        }
                    },
                    {
                        "name": "Clear Folder Contents",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get Temp Folder Stats",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@activity('Get Temp Folder Stats').output.exists",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Delete Folder",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "FolderValidation",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FilePath": {
                                                    "value": "@{pipeline().parameters.p_containername}/@{variables('v_UsageTempFolderName')}",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Split Downloaded Files",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Clean Up Usage Data Folders",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API - Split Files - Usage",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "container": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "sourcefilename": {
                                    "value": "@{variables('v_UsageTempFolderName')}/*",
                                    "type": "Expression"
                                },
                                "UsageFolderName": {
                                    "value": "@variables('v_UsageFolderName')",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Dates",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "For Each BillingID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "let ReportingDates = materialize(datatable (ReportingDates:dynamic) [dynamic(@{variables('v_ReportingDates')})] | mv-expand ReportingDates | extend ReportingDates=tostring(ReportingDates));\nReportingDates\n| extend ReportingDate=range(todatetime(split(ReportingDates, ',')[0]), todatetime(split(ReportingDates, ',')[1]), 1d)\n| mv-expand ReportingDate\n| project ReportingDate = format_datetime(todatetime(ReportingDate), 'yyyy-MM-dd')\n| distinct ReportingDate",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Clean Up Usage Data Folders",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "File Dates",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('File Dates').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Delete Folder Contents",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "FolderValidation",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FilePath": {
                                                    "value": "@{pipeline().parameters.p_containername}/@{formatDateTime(item().ReportingDate, 'yyyy')}/@{formatDateTime(item().ReportingDate, 'MM')}/@{formatDateTime(item().ReportingDate, 'dd')}/@{variables('v_UsageFolderName')}",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_LookBackInDay": {
                        "type": "string",
                        "defaultValue": "3"
                    },
                    "p_BillingIds": {
                        "type": "array",
                        "defaultValue": [
                            "46132814"
                        ]
                    },
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BeginDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_EndDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_BatchType": {
                        "type": "string",
                        "defaultValue": "Daily"
                    }
                },
                "variables": {
                    "v_KQL": {
                        "type": "String"
                    },
                    "v_ReportingDates": {
                        "type": "Array"
                    },
                    "v_UsageTempFolderName": {
                        "type": "String",
                        "defaultValue": "UsageDataTemp"
                    },
                    "v_UsageFolderName": {
                        "type": "String",
                        "defaultValue": "UsageByBillingID"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-02-19T09:48:44Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 3 - ADX Stage to Prod - Usage')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/datasets/FolderValidation')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API - Split Files - Usage')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 2 - API Call - Usage')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pline VM Metrics Batch Load  v4')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "GetBearerToken",
                        "description": "Use this Web activity to get bearer token",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Set List Variable",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            "url": {
                                "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                "type": "Expression"
                            },
                            "body": {
                                "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{pipeline().parameters.ClientSecret}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEach Resource",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Set Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('Resource_List')",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 50,
                            "activities": [
                                {
                                    "name": "Execute Pipeline VMMetrics Read API",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pipeline VMMetrics Batch Read API CopyActivity v4",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "Token": {
                                                "value": "@variables('Token')",
                                                "type": "Expression"
                                            },
                                            "resourceId": {
                                                "value": "@item()",
                                                "type": "Expression"
                                            },
                                            "VMMetricsDate": {
                                                "value": "@variables('VMMetricsDate')",
                                                "type": "Expression"
                                            },
                                            "dirname": {
                                                "value": "@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}/@{formatDateTime(variables('VMMetricsDate'), 'MM')}",
                                                "type": "Expression"
                                            },
                                            "filename": {
                                                "value": "@concat(split(item() , '/')[2], \n'_' ,\nsplit(item(), '/')[4], '_',\nsplit(item(), '/')[8], '.json')",
                                                "type": "Expression"
                                            },
                                            "subscriptionId": {
                                                "value": "@split(replace(item(), '/', '_'), '_')[2]",
                                                "type": "Expression"
                                            },
                                            "startofmonthDate": {
                                                "value": "@pipeline().parameters.startofmonthDate",
                                                "type": "Expression"
                                            },
                                            "endofmonthDate": {
                                                "value": "@pipeline().parameters.endofMonthDate",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set List Variable",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Lookup Config",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Resource_List",
                            "value": {
                                "value": "@split( json(string(activity('Lookup Config').output.value[0])).resourceId  ,',')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set Token",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetBearerToken",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Token",
                            "value": {
                                "value": "@concat('Bearer ',activity('GetBearerToken').output.access_token)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Lookup Config",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Set VMMetricsDate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@pipeline().parameters.VMMetricsConfigKQL",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": true
                            },
                            "dataset": {
                                "referenceName": "adx_BillingConfig",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Re-Acquire Token",
                        "type": "Until",
                        "dependsOn": [
                            {
                                "activity": "Set Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@bool(equals(variables('REST_API_ProcessStatus'),'Completed'))",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Wait 15 minutes",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 900
                                    }
                                },
                                {
                                    "name": "GetBearerTokenNew",
                                    "description": "Use this Web activity to get bearer token",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Wait 15 minutes",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/x-www-form-urlencoded"
                                        },
                                        "url": {
                                            "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                            "type": "Expression"
                                        },
                                        "body": {
                                            "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{pipeline().parameters.ClientSecret}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set Token New",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "GetBearerTokenNew",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "Token",
                                        "value": {
                                            "value": "@concat('Bearer ',activity('GetBearerTokenNew').output.access_token)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "timeout": "7.00:00:00"
                        }
                    },
                    {
                        "name": "Set Process Status",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "ForEach Resource",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "REST_API_ProcessStatus",
                            "value": "Completed"
                        }
                    },
                    {
                        "name": "Set VMMetricsDate",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Execute API VM List",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "VMMetricsDate",
                            "value": {
                                "value": "@pipeline().parameters.startofmonthDate",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "If Virtual Machine List is not Empty",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "ForEach Resource",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greater( length(variables('Resource_List') ), 0 )",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Flatten JSON and Convert to CSV",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pline Flatten VM Metrics JSON v4",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "source_dirname": {
                                                "value": "json/@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}/@{formatDateTime(variables('VMMetricsDate'), 'MM')}",
                                                "type": "Expression"
                                            },
                                            "sink_dirname": {
                                                "value": "csv/@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}/@{formatDateTime(variables('VMMetricsDate'), 'MM')}",
                                                "type": "Expression"
                                            },
                                            "sink_filename": {
                                                "value": "vmmetrics_@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}_@{formatDateTime(variables('VMMetricsDate'), 'MM')}.csv",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "CSV to ADX",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Flatten JSON and Convert to CSV",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pline VMMetrics ADLSG2 to ADX v4",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "p_StorageAccountContainer": "metricsdata",
                                            "p_StorageAccountDirectory": {
                                                "value": "csv/@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}/@{formatDateTime(variables('VMMetricsDate'), 'MM')}",
                                                "type": "Expression"
                                            },
                                            "p_VMMetricsDate": {
                                                "value": "@variables('VMMetricsDate')",
                                                "type": "Expression"
                                            },
                                            "p_Dest_Staging_TableName": "Staging_VMMetrics",
                                            "p_Dest_Production_TableName": "VMMetrics"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Execute API VM List",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "pipeline API VMs List v4",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "ClientID": {
                        "type": "string",
                        "defaultValue": "aa5605bb-2877-483d-b005-e1439ee1f988"
                    },
                    "ClientSecret": {
                        "type": "string"
                    },
                    "tenant_id": {
                        "type": "string",
                        "defaultValue": "8a807b9b-02da-47f3-a903-791a42a2285c"
                    },
                    "startofmonthDate": {
                        "type": "string"
                    },
                    "endofMonthDate": {
                        "type": "string"
                    },
                    "VMMetricsConfigKQL": {
                        "type": "string",
                        "defaultValue": "let BillingData_vmlist = view() {BillingData | where billingDate  >= ago(90d) | where product startswith \"Virtual Machine\" | where consumedService == 'Microsoft.Compute' | distinct resourceId}; let API_vmlist = view() {APIVMList| project-rename resourceId=['id'] | distinct  resourceId };  union withsource= TableName BillingData_vmlist(), API_vmlist  | distinct  resourceId  | summarize resourceId=make_list(resourceId) | project  resourceId=strcat_array(todynamic(resourceId), \",\")"
                    }
                },
                "variables": {
                    "Resource_List": {
                        "type": "Array"
                    },
                    "Token": {
                        "type": "String"
                    },
                    "x-ms-ratelimit-remaining-subscription-reads": {
                        "type": "String"
                    },
                    "REST_API_ProcessStatus": {
                        "type": "String",
                        "defaultValue": "Running"
                    },
                    "VMMetricsDate": {
                        "type": "String"
                    },
                    "resourceId": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "VM Metrics"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:34Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/adx_BillingConfig')]",
                "[concat(variables('factoryId'), '/pipelines/pipeline API VMs List v4')]",
                "[concat(variables('factoryId'), '/pipelines/pipeline VMMetrics Batch Read API CopyActivity v4')]",
                "[concat(variables('factoryId'), '/pipelines/pline Flatten VM Metrics JSON v4')]",
                "[concat(variables('factoryId'), '/pipelines/pline VMMetrics ADLSG2 to ADX v4')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pline VM Metrics Sub Main  v4 modified')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "GetBearerToken",
                        "description": "Use this Web activity to get bearer token",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Set List Variable",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            "url": {
                                "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                "type": "Expression"
                            },
                            "body": {
                                "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{pipeline().parameters.ClientSecret}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEach Resource",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Set Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('Resource_List')",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 50,
                            "activities": [
                                {
                                    "name": "Execute Pipeline VMMetrics Read API",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pipeline VMMetrics Read API CopyActivity v4",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "Token": {
                                                "value": "@variables('Token')",
                                                "type": "Expression"
                                            },
                                            "resourceId": {
                                                "value": "@item()",
                                                "type": "Expression"
                                            },
                                            "VMMetricsDate": {
                                                "value": "@pipeline().parameters.VMMetricsDate",
                                                "type": "Expression"
                                            },
                                            "dirname": {
                                                "value": "@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}/@{formatDateTime(variables('VMMetricsDate'), 'MM')}/@{formatDateTime(variables('VMMetricsDate'), 'dd')}",
                                                "type": "Expression"
                                            },
                                            "filename": {
                                                "value": "@concat(split(item() , '/')[2], \n'_' ,\nsplit(item(), '/')[4], '_',\nsplit(item(), '/')[8], '.json')",
                                                "type": "Expression"
                                            },
                                            "subscriptionId": {
                                                "value": "@split(replace(item(), '/', '_'), '_')[2]",
                                                "type": "Expression"
                                            },
                                            "startofmonthDate": {
                                                "value": "@variables('VMMetricsDate')",
                                                "type": "Expression"
                                            },
                                            "endofmonthDate": {
                                                "value": "@variables('VMMetricsDate')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set List Variable",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Lookup Config",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Resource_List",
                            "value": {
                                "value": "@split( json(string(activity('Lookup Config').output.value[0])).resourceId  ,',')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set Token",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetBearerToken",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Token",
                            "value": {
                                "value": "@concat('Bearer ',activity('GetBearerToken').output.access_token)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Lookup Config",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Set VMMetricsDate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@pipeline().parameters.VMMetricsConfigKQL",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": true
                            },
                            "dataset": {
                                "referenceName": "adx_BillingConfig",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Re-Acquire Token",
                        "type": "Until",
                        "dependsOn": [
                            {
                                "activity": "Set Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@bool(equals(variables('REST_API_ProcessStatus'),'Completed'))",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Wait 15 minutes",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 900
                                    }
                                },
                                {
                                    "name": "GetBearerTokenNew",
                                    "description": "Use this Web activity to get bearer token",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Wait 15 minutes",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/x-www-form-urlencoded"
                                        },
                                        "url": {
                                            "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                            "type": "Expression"
                                        },
                                        "body": {
                                            "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{pipeline().parameters.ClientSecret}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set Token New",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "GetBearerTokenNew",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "Token",
                                        "value": {
                                            "value": "@concat('Bearer ',activity('GetBearerTokenNew').output.access_token)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "timeout": "7.00:00:00"
                        }
                    },
                    {
                        "name": "Set Process Status",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "ForEach Resource",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "REST_API_ProcessStatus",
                            "value": "Completed"
                        }
                    },
                    {
                        "name": "Set VMMetricsDate",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "VMMetricsDate",
                            "value": {
                                "value": "@pipeline().parameters.VMMetricsDate",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "If Virtual Machine List is not Empty",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "ForEach Resource",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greater( length(variables('Resource_List') ), 0 )",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Flatten JSON and Convert to CSV",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pline Flatten VM Metrics JSON v4",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "source_dirname": {
                                                "value": "json/@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}/@{formatDateTime(variables('VMMetricsDate'), 'MM')}/@{formatDateTime(variables('VMMetricsDate'), 'dd')}",
                                                "type": "Expression"
                                            },
                                            "sink_dirname": {
                                                "value": "csv/@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}/@{formatDateTime(variables('VMMetricsDate'), 'MM')}/@{formatDateTime(variables('VMMetricsDate'), 'dd')}",
                                                "type": "Expression"
                                            },
                                            "sink_filename": {
                                                "value": "vmmetrics_@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}_@{formatDateTime(variables('VMMetricsDate'), 'MM')}_@{formatDateTime(variables('VMMetricsDate'), 'dd')}.csv",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "CSV to ADX",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Flatten JSON and Convert to CSV",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pline VMMetrics ADLSG2 to ADX v4",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "p_StorageAccountContainer": "metricsdata",
                                            "p_StorageAccountDirectory": {
                                                "value": "csv/@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}/@{formatDateTime(variables('VMMetricsDate'), 'MM')}/@{formatDateTime(variables('VMMetricsDate'), 'dd')}",
                                                "type": "Expression"
                                            },
                                            "p_VMMetricsDate": {
                                                "value": "@variables('VMMetricsDate')",
                                                "type": "Expression"
                                            },
                                            "p_Dest_Staging_TableName": "Staging_VMMetrics",
                                            "p_Dest_Production_TableName": "VMMetrics"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "ClientID": {
                        "type": "string",
                        "defaultValue": "aa5605bb-2877-483d-b005-e1439ee1f988"
                    },
                    "ClientSecret": {
                        "type": "string"
                    },
                    "tenant_id": {
                        "type": "string",
                        "defaultValue": "8a807b9b-02da-47f3-a903-791a42a2285c"
                    },
                    "VMMetricsDate": {
                        "type": "string"
                    },
                    "VMMetricsConfigKQL": {
                        "type": "string",
                        "defaultValue": "let BillingData_vmlist = view() {BillingData | where billingDate  >= ago(90d) | where product startswith \"Virtual Machine\" | where consumedService == 'Microsoft.Compute' | distinct resourceId}; let API_vmlist = view() {APIVMList| project-rename resourceId=['id'] | distinct  resourceId }; union withsource= TableName BillingData_vmlist(), API_vmlist  | distinct  resourceId | summarize resourceId=make_list(resourceId) | project  resourceId=strcat_array(todynamic(resourceId), \",\")"
                    }
                },
                "variables": {
                    "Resource_List": {
                        "type": "Array"
                    },
                    "Token": {
                        "type": "String"
                    },
                    "x-ms-ratelimit-remaining-subscription-reads": {
                        "type": "String"
                    },
                    "REST_API_ProcessStatus": {
                        "type": "String",
                        "defaultValue": "Running"
                    },
                    "VMMetricsDate": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "VM Metrics"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:34Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/adx_BillingConfig')]",
                "[concat(variables('factoryId'), '/pipelines/pipeline VMMetrics Read API CopyActivity v4')]",
                "[concat(variables('factoryId'), '/pipelines/pline Flatten VM Metrics JSON v4')]",
                "[concat(variables('factoryId'), '/pipelines/pline VMMetrics ADLSG2 to ADX v4')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pline VM Metrics Sub Main  v4')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "GetBearerToken",
                        "description": "Use this Web activity to get bearer token",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Set List Variable",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            "url": {
                                "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                "type": "Expression"
                            },
                            "body": {
                                "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{pipeline().parameters.ClientSecret}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEach Resource",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Set Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('Resource_List')",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 50,
                            "activities": [
                                {
                                    "name": "Execute Pipeline VMMetrics Read API",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pipeline VMMetrics Read API CopyActivity v4",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "Token": {
                                                "value": "@variables('Token')",
                                                "type": "Expression"
                                            },
                                            "resourceId": {
                                                "value": "@item()",
                                                "type": "Expression"
                                            },
                                            "VMMetricsDate": {
                                                "value": "@pipeline().parameters.VMMetricsDate",
                                                "type": "Expression"
                                            },
                                            "dirname": {
                                                "value": "@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}/@{formatDateTime(variables('VMMetricsDate'), 'MM')}/@{formatDateTime(variables('VMMetricsDate'), 'dd')}",
                                                "type": "Expression"
                                            },
                                            "filename": {
                                                "value": "@concat(split(item() , '/')[2], \n'_' ,\nsplit(item(), '/')[4], '_',\nsplit(item(), '/')[8], '.json')",
                                                "type": "Expression"
                                            },
                                            "subscriptionId": {
                                                "value": "@split(replace(item(), '/', '_'), '_')[2]",
                                                "type": "Expression"
                                            },
                                            "startofmonthDate": {
                                                "value": "@variables('VMMetricsDate')",
                                                "type": "Expression"
                                            },
                                            "endofmonthDate": {
                                                "value": "@variables('VMMetricsDate')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set List Variable",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Lookup Config",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Resource_List",
                            "value": {
                                "value": "@split( json(string(activity('Lookup Config').output.value[0])).resourceId  ,',')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set Token",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetBearerToken",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Token",
                            "value": {
                                "value": "@concat('Bearer ',activity('GetBearerToken').output.access_token)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Lookup Config",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Set VMMetricsDate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "@pipeline().parameters.VMMetricsConfigKQL",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": true
                            },
                            "dataset": {
                                "referenceName": "adx_BillingConfig",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Re-Acquire Token",
                        "type": "Until",
                        "dependsOn": [
                            {
                                "activity": "Set Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@bool(equals(variables('REST_API_ProcessStatus'),'Completed'))",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Wait 15 minutes",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 900
                                    }
                                },
                                {
                                    "name": "GetBearerTokenNew",
                                    "description": "Use this Web activity to get bearer token",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Wait 15 minutes",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/x-www-form-urlencoded"
                                        },
                                        "url": {
                                            "value": "https://login.microsoftonline.com/@{pipeline().parameters.tenant_id}/oauth2/token",
                                            "type": "Expression"
                                        },
                                        "body": {
                                            "value": "grant_type=client_credentials&client_id=@{pipeline().parameters.ClientID}&resource=https://management.azure.com&client_secret=@{pipeline().parameters.ClientSecret}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set Token New",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "GetBearerTokenNew",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "Token",
                                        "value": {
                                            "value": "@concat('Bearer ',activity('GetBearerTokenNew').output.access_token)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "timeout": "7.00:00:00"
                        }
                    },
                    {
                        "name": "Set Process Status",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "ForEach Resource",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "REST_API_ProcessStatus",
                            "value": "Completed"
                        }
                    },
                    {
                        "name": "Set VMMetricsDate",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Execute API VM List",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "VMMetricsDate",
                            "value": {
                                "value": "@pipeline().parameters.VMMetricsDate",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "If Virtual Machine List is not Empty",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "ForEach Resource",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greater( length(variables('Resource_List') ), 0 )",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Flatten JSON and Convert to CSV",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pline Flatten VM Metrics JSON v4",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "source_dirname": {
                                                "value": "json/@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}/@{formatDateTime(variables('VMMetricsDate'), 'MM')}/@{formatDateTime(variables('VMMetricsDate'), 'dd')}",
                                                "type": "Expression"
                                            },
                                            "sink_dirname": {
                                                "value": "csv/@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}/@{formatDateTime(variables('VMMetricsDate'), 'MM')}/@{formatDateTime(variables('VMMetricsDate'), 'dd')}",
                                                "type": "Expression"
                                            },
                                            "sink_filename": {
                                                "value": "vmmetrics_@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}_@{formatDateTime(variables('VMMetricsDate'), 'MM')}_@{formatDateTime(variables('VMMetricsDate'), 'dd')}.csv",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "CSV to ADX",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Flatten JSON and Convert to CSV",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pline VMMetrics ADLSG2 to ADX v4",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "p_StorageAccountContainer": "metricsdata",
                                            "p_StorageAccountDirectory": {
                                                "value": "csv/@{formatDateTime(variables('VMMetricsDate'), 'yyyy')}/@{formatDateTime(variables('VMMetricsDate'), 'MM')}/@{formatDateTime(variables('VMMetricsDate'), 'dd')}",
                                                "type": "Expression"
                                            },
                                            "p_VMMetricsDate": {
                                                "value": "@variables('VMMetricsDate')",
                                                "type": "Expression"
                                            },
                                            "p_Dest_Staging_TableName": "Staging_VMMetrics",
                                            "p_Dest_Production_TableName": "VMMetrics"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Execute API VM List",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "pipeline API VMs List v4",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "ClientID": {
                        "type": "string",
                        "defaultValue": "aa5605bb-2877-483d-b005-e1439ee1f988"
                    },
                    "ClientSecret": {
                        "type": "string"
                    },
                    "tenant_id": {
                        "type": "string",
                        "defaultValue": "8a807b9b-02da-47f3-a903-791a42a2285c"
                    },
                    "VMMetricsDate": {
                        "type": "string"
                    },
                    "VMMetricsConfigKQL": {
                        "type": "string",
                        "defaultValue": "let BillingData_vmlist = view() {BillingData | where billingDate  >= ago(90d) | where product startswith \"Virtual Machine\" | where consumedService == 'Microsoft.Compute' | distinct resourceId}; let API_vmlist = view() {APIVMList| project-rename resourceId=['id'] | distinct  resourceId }; union withsource= TableName BillingData_vmlist(), API_vmlist  | distinct  resourceId | summarize resourceId=make_list(resourceId) | project  resourceId=strcat_array(todynamic(resourceId), \",\")"
                    }
                },
                "variables": {
                    "Resource_List": {
                        "type": "Array"
                    },
                    "Token": {
                        "type": "String"
                    },
                    "x-ms-ratelimit-remaining-subscription-reads": {
                        "type": "String"
                    },
                    "REST_API_ProcessStatus": {
                        "type": "String",
                        "defaultValue": "Running"
                    },
                    "VMMetricsDate": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "VM Metrics"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:34Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/adx_BillingConfig')]",
                "[concat(variables('factoryId'), '/pipelines/pipeline API VMs List v4')]",
                "[concat(variables('factoryId'), '/pipelines/pipeline VMMetrics Read API CopyActivity v4')]",
                "[concat(variables('factoryId'), '/pipelines/pline Flatten VM Metrics JSON v4')]",
                "[concat(variables('factoryId'), '/pipelines/pline VMMetrics ADLSG2 to ADX v4')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Forecast Initial Load_1')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Truncate Forecast_History",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Prepare Dates for Data Copy into Prod",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace Forecast_History <| Forecast_History | take 0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Prepare Dates for Data Copy into Prod",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "range ReportingDate from datetime(@{pipeline().parameters.BeginDate}) to datetime(@{pipeline().parameters.EndDate}) step 1d | extend ReportingDate = format_datetime(ReportingDate,'yyyy-MM-dd')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Execute Pipeline1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Truncate Forecast_History",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Forecast Initial Load",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_containername": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "p_BillingDate": {
                                    "value": "@activity('Prepare Dates for Data Copy into Prod').output.value",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "BeginDate": {
                        "type": "string"
                    },
                    "EndDate": {
                        "type": "string"
                    }
                },
                "variables": {
                    "CSVPath": {
                        "type": "String",
                        "defaultValue": "Csv"
                    },
                    "SubFolder": {
                        "type": "String",
                        "defaultValue": "Forecast"
                    }
                },
                "folder": {
                    "name": "Initial Setup"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:34Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/pipelines/Forecast Initial Load')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Setup DataLake and ADX')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Create Tables",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".create tables\nApplicationBudget(SubscriptionGuid:string,SubscriptionName:string,ResourceGroupFQN:string,AppCode:string,AppName:string,BillingMonth:string,BudgetAMT:real,ParentHostingSubHostingID:string),\nApplicationLKP(AppID:string,ApplicationName:string,AppAbreviation:string,CostCenter:string,IsApplication:bool,AvailableForCostReporting:bool,RTO:int,RPO:int,Revenue:real,ITAppOWner:string,HostedInAzure:bool,AppLOB:string),\nHostingLKP(ParentHostingSubHostingID:real,ParentHostingID:long,ParentHostingServiceName:string,SubHostingServiceID:long,SubHostingServiceName:string),\nLOBBudget(LineOfBusiness:string,YearMonth:string,Budget:long),\nStaging_ApplicationBudget(SubscriptionGuid:string,SubscriptionName:string,ResourceGroupFQN:string,AppCode:string,AppName:string,BillingMonth:string,BudgetAMT:real,Year:string,Month:string,ParentHostingSubHostingID:string),\nStaging_ApplicationLKP(AppID:string,ApplicationName:string,AppAbreviation:string,CostCenter:string,IsApplication:string,AvailableForCostReporting:string,RTO:string,RPO:string,Revenue:real,ITAppOWner:string,HostedInAzure:string,AppLOB:string),\nStaging_HostingLKP(ParentHostingSubHostingID:string,ParentHostingID:string,ParentHostingServiceName:string,SubHostingServiceID:string,SubHostingServiceName:string),\nStaging_ReservationSummary(['id']:string,name:string,['type']:string,reservationOrderId:string,reservationId:string,skuName:string,['kind']:string,reservedHours:real,usageDate:string,usedHours:real,minUtilizationPercentage:real,avgUtilizationPercentage:real,maxUtilizationPercentage:real,purchasedQuantity:real,remainingQuantity:real,totalReservedQuantity:real,usedQuantity:real,utilizedPercentage:real),\nReservationSummary(['id']:string,name:string,['type']:string,reservationOrderId:string,reservationId:string,skuName:string,['kind']:string,reservedHours:real,usageDate:datetime,UsageMonth:string,usedHours:real,minUtilizationPercentage:real,avgUtilizationPercentage:real,maxUtilizationPercentage:real,purchasedQuantity:real,remainingQuantity:real,totalReservedQuantity:real,usedQuantity:real,utilizedPercentage:real),\nStaging_BillingSummary(name:string,value:real,['id']:string,billingPeriodId:string,currencyCode:string,beginningBalance:real,endingBalance:real,newPurchases:real,adjustments:real,utilized:real,serviceOverage:real,chargesBilledSeparately:real,totalOverage:real,totalUsage:real,azureMarketplaceServiceCharges:real,billingPeriodStart:datetime,billingPeriodEnd:datetime,balanceDeduct:real),\nBillingSummary(billingId:string,billingPeriod:string,currencyCode:string,beginningBalance:real,endingBalance:real,newPurchases:real,adjustments:real,utilized:real,serviceOverage:real,chargesBilledSeparately:real,totalOverage:real,totalUsage:real,azureMarketplaceServiceCharges:real,adjustmentType:string,adjustmentvalue:real,billingPeriodStart:datetime,billingPeriodEnd:datetime,balanceDeduct:real),\nStaging_FlexGroup(InstanceSizeFlexibilityGroup:string,ArmSkuName:string,Ratio:real),\nFlexGroup(InstanceSizeFlexibilityGroup:string,ArmSkuName:string,Ratio:real),\nStaging_ReservationDescription(['id']:string,name:string,['type']:string,eventDate:string,reservationOrderId:string,description:string,eventType:string,quantity:real,amount:real,currency:string,reservationorderName:string,purchasingEnrollment:string,armSkuName:string,term:string,region:string,purchasingSubscriptionGuid:string,purchasingSubscriptionName:string,accountName:string,accountOwnerEmail:string,departmentName:string,costCenter:string,currentEnrollment:string,billingFrequency:string),\nReservationDescription(['id']:string,name:string,['type']:string,eventDate:datetime,reservationOrderId:string,description:string,eventType:string,quantity:real,amount:real,currency:string,reservationorderName:string,purchasingEnrollment:string,armSkuName:string,term:string,region:string,purchasingSubscriptionGuid:string,purchasingSubscriptionName:string,accountName:string,accountOwnerEmail:string,departmentName:string,costCenter:string,currentEnrollment:string,billingFrequency:string),\nusageDataLog(billingAccountId:string,subscriptionId:string,subscriptionName:string,billingDate:string,frequency:string,logdate:datetime,usageCost:real),\nStaging_BillingData(['kind']:string,['id']:string,name:string,['type']:string,['tags']:string,billingAccountId:string,billingAccountName:string,billingPeriodStartDate:string,billingPeriodEndDate:string,billingProfileId:string,billingProfileName:string,accountOwnerId:string,accountName:string,subscriptionId:string,subscriptionName:string,['date']:string,product:string,partNumber:string,meterId:string,quantity:real,effectivePrice:real,cost:real,unitPrice:real,billingCurrency:string,resourceLocation:string,consumedService:string,resourceId:string,resourceName:string,serviceInfo2:string,invoiceSection:string,resourceGroup:string,offerId:string,isAzureCreditEligible:string,publisherType:string,chargeType:string,frequency:string,meterDetails:string),\nADFErrorLog(APIName:string,ReportingDate:string,ProcessDateTime:datetime,ProcessName:string,PipelineName:string,PipelineRunID:string,ActivityType:string,ActivityName:string,ErrorCode:string,ErrorMessage:string,ErrorCategory:string,ErrorResourceID:string,ErrorSubscription:string,ErrorTimestamp:datetime,BatchMode:string),\nProductDetail(Product:string,partNumber:string,NonReserved:bool,MeterCategory:string,FNFCategory:string,CostType:string,ProdID:long),\nBillingData(['kind']:string,['id']:string,name:string,['type']:string,['tags']:string,billingAccountId:string,billingAccountName:string,billingPeriodStartDate:string,billingPeriodEndDate:string,billingProfileId:string,billingProfileName:string,accountOwnerId:string,accountName:string,subscriptionId:string,subscriptionName:string,['date']:string,product:string,partNumber:string,meterId:string,quantity:real,effectivePrice:real,cost:real,unitPrice:real,billingCurrency:string,resourceLocation:string,consumedService:string,resourceId:string,resourceName:string,serviceInfo2:string,invoiceSection:string,resourceGroup:string,offerId:string,isAzureCreditEligible:string,publisherType:string,chargeType:string,frequency:string,meterDetails:string,RGFQN:string,billingDate:datetime,billingMonth:string),\nStaging_MarketPlace(usageStartDate:string,usageEndDate:string,subscriptionGuid:string,resourceGroup:string,instanceId:string,offerName:string,orderNumber:string,publisherName:string,planName:string,consumedQuantity:real,resourceRate:real,extendedCost:real,isRecurringCharge:string),\nMarketPlace(usageStartDate:string,usageEndDate:string,subscriptionGuid:string,resourceGroup:string,instanceId:string,offerName:string,orderNumber:string,publisherName:string,planName:string,consumedQuantity:real,resourceRate:real,extendedCost:real,isRecurringCharge:string,billingMonth:string),\nBilling_PBI(Region:string,BillingDate:datetime,PK_Subscription:string,resourceName:string,publisherType:string,chargeType:string,reservationId:string,ProdID:long,TotalCost:real,Quantity:real,effectivePrice:real),\nStaging_Forecast(subscriptionId:string,resourceGroup:string,cost:string,usageDate:string),\nWaterMark(BillingData_LastRetry:datetime,Reservation_LastRetry:datetime,Credit_LastRetry:datetime,ReservationDesc_LastRetry:datetime,MarketPlace_LastRetry:datetime,ForeCast_LastRetry:datetime),\nForecast_History(subscriptionId:string,resourceGroup:string,cost:real,usageDate:datetime,LogDate:datetime),\nStaging_LOB(ID:string,ShortName:string,FullName:string),\nLOB(ID:string,ShortName:string,FullName:string),\nStaging_LOBBudget(LineOfBusiness:string,YearMonth:string,Budget:long),\nBillingConfig(ResourceGroupFQN:string,SubscriptionName:string,SubscriptionGuid:guid,ResourceGroupName:string,HostingService:string,AppCode1:string,AppName:string,CostCenter:string,LineOfBusiness:string,MigrationStatus:string,CoreSubscription:string,PrevFISSpend:string,IsApplication:bool,FinanceLOB:string),\nStaging_BillingConfig(ResourceGroupFQN:string,SubscriptionName:string,SubscriptionGuid:guid,ResourceGroupName:string,HostingService:string,AppCode1:string,AppName:string,CostCenter:string,LineOfBusiness:string,MigrationStatus:string,CoreSubscription:string,PrevFISSpend:string,IsApplication:bool,FinanceLOB:string),\nProductMeterCategory(Product:string,FNFCategory:string,CCOPApproved:bool,CostType:string,IsPrePay:bool),\nStaging_ProductMeterCategory(Product:string,FNFCategory:string,CCOPApproved:string,CostType:string,IsPrePay:string),\nBillingConfig_Extended(Environment:string,AppCode:string,AppName:string,LineOfBusiness:string,IsApplication:bool,PK_Subscription:string,resourceGroup:string,subscriptionId:string,subscriptionName:string,billingAccountId:string,billingAccountName:string,accountName:string,accountOwnerId:string,Source:string,LOB_ShortName:string,financelob:string)",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Copy billingdata From Dev",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "BillingData",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "SourceContainer": {
                                    "value": "@pipeline().parameters.SourceContainer",
                                    "type": "Expression"
                                },
                                "DestinationContainer": {
                                    "value": "@pipeline().parameters.DestinationContainer",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Prepare Dates for Data Copy into Prod",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Load Reference Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "range ReportingDate from datetime(@{pipeline().parameters.BeginDate}) to datetime(@{pipeline().parameters.EndDate}) step 1d | extend ReportingDate = format_datetime(ReportingDate,'yyyy-MM-dd')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Insert Usage Data",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Prepare Dates for Data Copy into Prod",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 3 - ADX Stage to Prod - Usage",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_BillingDate": {
                                    "value": "@activity('Prepare Dates for Data Copy into Prod').output.value",
                                    "type": "Expression"
                                },
                                "p_SubDirectory": "UsageByBillingID",
                                "p_containername": "azure-cost-metric-data",
                                "p_BatchType": "Batch"
                            }
                        }
                    },
                    {
                        "name": "Insert Reservation usage",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Insert Usage Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 2 - ADX Stage to Prod - Reservation Usage",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_BillingDate": {
                                    "value": "@activity('Prepare Dates for Data Copy into Prod').output.value",
                                    "type": "Expression"
                                },
                                "p_SubDirectory": "Reservation",
                                "p_containername": "azure-cost-metric-data",
                                "p_BatchType": "Batch"
                            }
                        }
                    },
                    {
                        "name": "Insert Reservation Description",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Convert Dates To Array",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Insert Forecast",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 2 - ADX Stage to Prod - ReservationDesc",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_StorageAccountContainer": "azure-cost-metric-data",
                                "p_BillingDate": {
                                    "value": "@variables('LastDateOfMonth')",
                                    "type": "Expression"
                                },
                                "p_SubDirectory": "ReservationOrdersDesc"
                            }
                        }
                    },
                    {
                        "name": "Prepare Monthly Dates for Data Copy",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Wait For Previous Activity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureDataExplorerSource",
                                "query": {
                                    "value": "range ReportingDate from datetime(@{pipeline().parameters.BeginDate}) to datetime(@{pipeline().parameters.EndDate}) step 1d\n| extend ReportingDate = format_datetime(endofmonth(ReportingDate),'yyyy-MM-dd')\n| distinct ReportingDate",
                                    "type": "Expression"
                                },
                                "queryTimeout": "00:10:00",
                                "noTruncation": false
                            },
                            "dataset": {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "ADFErrorLog"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Convert Dates To Array",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Prepare Monthly Dates for Data Copy",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Prepare Monthly Dates for Data Copy').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Append variable1",
                                    "type": "AppendVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "LastDateOfMonth",
                                        "value": {
                                            "value": "@item().ReportingDate",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Insert Billing Summary",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Insert Reservation Description",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 2 - ADX Stage to Prod - BillingSummary",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_StorageAccountContainer": "azure-cost-metric-data",
                                "p_BillingDate": {
                                    "value": "@variables('LastDateOfMonth')",
                                    "type": "Expression"
                                },
                                "p_SubDirectory": "Balancesummary"
                            }
                        }
                    },
                    {
                        "name": "Refersh PBI Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Insert MarketPlace",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "RefershPBITable",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Load Reference Data",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Wait For Previous Activity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "BillingData LoadReferenceFiles",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Load Seed Data",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Create Tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace WaterMark <| \nprint BillingData_LastRetry=todatetime('1900-01-01 00:00:00'),Reservation_LastRetry=todatetime('1900-01-01 00:00:00'),Credit_LastRetry=todatetime('1900-01-01 00:00:00'),ReservationDesc_LastRetry=todatetime('1900-01-01 00:00:00'),MarketPlace_LastRetry=todatetime('1900-01-01 00:00:00'),ForeCast_LastRetry=todatetime('1900-01-01 00:00:00')",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Insert MarketPlace",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Insert Billing Summary",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 2 - ADX Stage to Prod - MarketPlace",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_StorageAccountContainer": "azure-cost-metric-data",
                                "p_BillingDate": {
                                    "value": "@variables('LastDateOfMonth')",
                                    "type": "Expression"
                                },
                                "p_SubDirectory": "MarketPlace"
                            }
                        }
                    },
                    {
                        "name": "Insert Forecast",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Insert Reservation usage",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Forecast Initial Load",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_containername": "azure-cost-metric-data",
                                "p_BillingDate": {
                                    "value": "@activity('Prepare Dates for Data Copy into Prod').output.value",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Wait For Previous Activity",
                        "type": "Wait",
                        "dependsOn": [
                            {
                                "activity": "Copy billingdata From Dev",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Load Seed Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "waitTimeInSeconds": 10
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "BeginDate": {
                        "type": "string",
                        "defaultValue": "2020-01-01"
                    },
                    "EndDate": {
                        "type": "string",
                        "defaultValue": "2022-01-31"
                    },
                    "SourceContainer": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "DestinationContainer": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    }
                },
                "variables": {
                    "LastDateOfMonth": {
                        "type": "Array"
                    }
                },
                "folder": {
                    "name": "Initial Setup"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:34Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/pipelines/BillingData')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 3 - ADX Stage to Prod - Usage')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 2 - ADX Stage to Prod - Reservation Usage')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 2 - ADX Stage to Prod - ReservationDesc')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 2 - ADX Stage to Prod - BillingSummary')]",
                "[concat(variables('factoryId'), '/pipelines/RefershPBITable')]",
                "[concat(variables('factoryId'), '/pipelines/BillingData LoadReferenceFiles')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 2 - ADX Stage to Prod - MarketPlace')]",
                "[concat(variables('factoryId'), '/pipelines/Forecast Initial Load')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Billing API')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Reference Data",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "BillingData LoadReferenceFiles",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Reservation Usage",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Usage Detail",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 1 - API Call - Reservation Usage",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_LookBackInDay": {
                                    "value": "@pipeline().parameters.p_LookBackInDay",
                                    "type": "Expression"
                                },
                                "p_BillingIds": {
                                    "value": "@variables('v_BillingIds')",
                                    "type": "Expression"
                                },
                                "p_containername": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "p_BeginDate": {
                                    "value": "@pipeline().parameters.p_BeginDate",
                                    "type": "Expression"
                                },
                                "p_EndDate": {
                                    "value": "@pipeline().parameters.p_EndDate",
                                    "type": "Expression"
                                },
                                "p_BatchType": {
                                    "value": "@pipeline().parameters.p_BatchType",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Usage Detail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Load Reference Data",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "Parse p_BillingIds",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 1 - Usage Orchestrator",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_LookBackInDay": {
                                    "value": "@pipeline().parameters.p_LookBackInDay",
                                    "type": "Expression"
                                },
                                "p_BillingIds": {
                                    "value": "@variables('v_BillingIds')",
                                    "type": "Expression"
                                },
                                "p_containername": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "p_BeginDate": {
                                    "value": "@pipeline().parameters.p_BeginDate",
                                    "type": "Expression"
                                },
                                "p_EndDate": {
                                    "value": "@pipeline().parameters.p_EndDate",
                                    "type": "Expression"
                                },
                                "p_BatchType": {
                                    "value": "@pipeline().parameters.p_BatchType",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Refresh PBI Schema",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ReservationOrders",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "RefershPBITable",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Billing Summary",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Reservation Description",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 1 - API Call - BillingSummary",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_LookBackInDay": {
                                    "value": "@pipeline().parameters.p_LookBackInDay",
                                    "type": "Expression"
                                },
                                "p_BillingIds": {
                                    "value": "@pipeline().parameters.p_BillingIds",
                                    "type": "Expression"
                                },
                                "p_containername": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "p_BeginDate": {
                                    "value": "@pipeline().parameters.p_BeginDate",
                                    "type": "Expression"
                                },
                                "p_EndDate": {
                                    "value": "@pipeline().parameters.p_EndDate",
                                    "type": "Expression"
                                },
                                "p_BatchType": {
                                    "value": "@pipeline().parameters.p_BatchType",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Reservation Description",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Reservation Usage",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 1 - API Call - ReservationDescs",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_LookBackInDay": {
                                    "value": "@pipeline().parameters.p_LookBackInDay",
                                    "type": "Expression"
                                },
                                "p_BillingIds": {
                                    "value": "@variables('v_BillingIds')",
                                    "type": "Expression"
                                },
                                "p_containername": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "p_BeginDate": {
                                    "value": "@pipeline().parameters.p_BeginDate",
                                    "type": "Expression"
                                },
                                "p_EndDate": {
                                    "value": "@pipeline().parameters.p_EndDate",
                                    "type": "Expression"
                                },
                                "p_BatchType": {
                                    "value": "@pipeline().parameters.p_BatchType",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Parse p_BillingIds",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.p_BillingIds",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Append v_BillingIds",
                                    "type": "AppendVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "v_BillingIds",
                                        "value": {
                                            "value": "@item().BillingID",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "MarketPlace",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Billing Summary",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 1 - API Call - MarketPlace",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_LookBackInDay": {
                                    "value": "@pipeline().parameters.p_LookBackInDay",
                                    "type": "Expression"
                                },
                                "p_BillingIds": {
                                    "value": "@pipeline().parameters.p_BillingIds",
                                    "type": "Expression"
                                },
                                "p_containername": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "p_BeginDate": {
                                    "value": "@pipeline().parameters.p_BeginDate",
                                    "type": "Expression"
                                },
                                "p_EndDate": {
                                    "value": "@pipeline().parameters.p_EndDate",
                                    "type": "Expression"
                                },
                                "p_BatchType": {
                                    "value": "@pipeline().parameters.p_BatchType",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Forecast",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "MarketPlace",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 1 - API Call - Forecast",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_ForecastMonths": {
                                    "value": "@pipeline().parameters.p_ForecastMonths",
                                    "type": "Expression"
                                },
                                "p_containername": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "ReservationOrders",
                        "type": "ExecutePipeline",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Forecast",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Billing API Sub 1 - API Call - ReservationOrders",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "p_LookBackInDay": {
                                    "value": "@pipeline().parameters.p_LookBackInDay",
                                    "type": "Expression"
                                },
                                "p_BillingIds": {
                                    "value": "@variables('v_BillingIds')",
                                    "type": "Expression"
                                },
                                "p_containername": {
                                    "value": "@pipeline().parameters.p_containername",
                                    "type": "Expression"
                                },
                                "p_BeginDate": {
                                    "value": "@pipeline().parameters.p_BeginDate",
                                    "type": "Expression"
                                },
                                "p_EndDate": {
                                    "value": "@pipeline().parameters.p_EndDate",
                                    "type": "Expression"
                                },
                                "p_BatchType": {
                                    "value": "@pipeline().parameters.p_BatchType",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_LookBackInDay": {
                        "type": "string",
                        "defaultValue": "3"
                    },
                    "p_BillingIds": {
                        "type": "array",
                        "defaultValue": [
                            {
                                "BillingID": "46132814",
                                "KeyVaultURLForAPIKey": "https://kv-acrp-dev.vault.azure.net/secrets/APIKey-46132814/997864aa1b904061bd8a229e52b56ea4"
                            }
                        ]
                    },
                    "p_containername": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data"
                    },
                    "p_BeginDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_EndDate": {
                        "type": "string",
                        "defaultValue": "NA"
                    },
                    "p_BatchType": {
                        "type": "string",
                        "defaultValue": "Daily"
                    },
                    "p_ForecastMonths": {
                        "type": "string",
                        "defaultValue": "3"
                    }
                },
                "variables": {
                    "v_BillingIds": {
                        "type": "Array"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-02-21T17:32:53Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/BillingData LoadReferenceFiles')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 1 - API Call - Reservation Usage')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 1 - Usage Orchestrator')]",
                "[concat(variables('factoryId'), '/pipelines/RefershPBITable')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 1 - API Call - BillingSummary')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 1 - API Call - ReservationDescs')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 1 - API Call - MarketPlace')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 1 - API Call - Forecast')]",
                "[concat(variables('factoryId'), '/pipelines/Billing API Sub 1 - API Call - ReservationOrders')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pline re-run failed activities')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "BackDaysArray",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Set Total Back Days",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "BackDaysArray",
                            "value": {
                                "value": "@range(1, int(variables('TotalBackDays')))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEach Process Date",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "BackDaysArray",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetSPNSecret",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('BackDaysArray')",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Set ReportingDate",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ReportingDate",
                                        "value": {
                                            "value": "@adddays(utcnow(), mul(item(),-1), 'yyyy-MM-dd')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Execute VM Metrics API",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Set ReportingDate",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pline VM Metrics Sub Main  v4",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "ClientSecret": {
                                                "value": "@activity('GetSPNSecret').output.value",
                                                "type": "Expression"
                                            },
                                            "VMMetricsDate": {
                                                "value": "@variables('ReportingDate')",
                                                "type": "Expression"
                                            },
                                            "VMMetricsConfigKQL": {
                                                "value": "let _ProcessDate = todatetime('@{variables('ReportingDate')}');\nADFErrorLog\n| where todatetime(ReportingDate) == _ProcessDate\n| where APIName  == 'VM Metrics API'\n| where ErrorMessage !contains 'NotFound'\n| where toupper(ErrorResourceID) !in ( (            \n            VMMetrics| where todatetime(metricsDate) == _ProcessDate\n                     | extend resourceId= strcat( RGFQN ,'/providers/Microsoft.Compute/virtualMachines/', virtualMachineName) \n                     | distinct toupper(resourceId)\n        ))\n| project-rename resourceId=ErrorResourceID\n| distinct  resourceId\n| summarize resourceId=make_list(resourceId)\n| project  resourceId=strcat_array(todynamic(resourceId), \",\")",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set Total Back Days",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "TotalBackDays",
                            "value": {
                                "value": "@pipeline().parameters.p_LookInBackDays",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "GetSPNSecret",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": {
                                "value": "@concat(pipeline().parameters.p_SPNSecretURL,'?api-version=7.0')",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_LookInBackDays": {
                        "type": "string",
                        "defaultValue": "3"
                    },
                    "p_SPNSecretURL": {
                        "type": "string",
                        "defaultValue": "https://kv-ccop-dv.vault.azure.net/secrets/CostMGMT-SPN-Secret/eafafff824ca4d8c8a8c604579b70ed1"
                    }
                },
                "variables": {
                    "TotalBackDays": {
                        "type": "String",
                        "defaultValue": "3"
                    },
                    "BackDaysArray": {
                        "type": "Array"
                    },
                    "ReportingDate": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "VM Metrics"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:35Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/pline VM Metrics Sub Main  v4')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pline Main')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute VM Metrics API",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If custom ProcessDate is provided",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetSPNSecret",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "pline VM Metrics Sub Main  v4",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "ClientSecret": {
                                    "value": "@activity('GetSPNSecret').output.value",
                                    "type": "Expression"
                                },
                                "VMMetricsDate": {
                                    "value": "@variables('ProcessDate')",
                                    "type": "Expression"
                                },
                                "VMMetricsConfigKQL": {
                                    "value": "let BillingData_vmlist = view() {BillingData | where billingDate  == todatetime('@{pipeline().parameters.ProcessDate}') | where product startswith \"Virtual Machine\" | where consumedService == 'Microsoft.Compute' | distinct resourceId}; let API_vmlist = view() {APIVMList| project-rename resourceId=['id'] | distinct  resourceId }; \nunion withsource= TableName BillingData_vmlist(), API_vmlist \n| distinct  resourceId\n| summarize resourceId=make_list(resourceId)\n| project  resourceId=strcat_array(todynamic(resourceId), \",\")",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "If custom ProcessDate is provided",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(pipeline().parameters.ProcessDate, 'Yesterday')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Set Custom Process Date",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ProcessDate",
                                        "value": {
                                            "value": "@pipeline().parameters.ProcessDate",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Set Default Process Date",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ProcessDate",
                                        "value": {
                                            "value": "@adddays(utcnow(),-1, 'yyyy-MM-dd') ",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "GetSPNSecret",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": {
                                "value": "@concat(pipeline().parameters.p_SPNSecretURL,'?api-version=7.0')",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "ProcessDate": {
                        "type": "string"
                    },
                    "p_SPNSecretURL": {
                        "type": "string",
                        "defaultValue": "https://kv-ccop-dv.vault.azure.net/secrets/CostMGMT-SPN-Secret/eafafff824ca4d8c8a8c604579b70ed1"
                    }
                },
                "variables": {
                    "ProcessDate": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "VM Metrics"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:35Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/pline VM Metrics Sub Main  v4')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pline re-run failed activities_vmmetrics')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Set ReportingDate",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "ReportingDate",
                            "value": {
                                "value": "@pipeline().parameters.p_RerunReportingDate",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Execute VM Metrics API",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Set ReportingDate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetSPNSecret",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "pline VM Metrics Sub Main  v4",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "ClientSecret": {
                                    "value": "@activity('GetSPNSecret').output.value",
                                    "type": "Expression"
                                },
                                "VMMetricsDate": {
                                    "value": "@variables('ReportingDate')",
                                    "type": "Expression"
                                },
                                "VMMetricsConfigKQL": {
                                    "value": "let _ProcessDate = todatetime('@{variables('ReportingDate')}');\nADFErrorLog\n| where todatetime(ReportingDate) == _ProcessDate\n| where APIName  == 'VM Metrics API'\n| where ErrorMessage !contains 'NotFound'\n| where ErrorResourceID !in ( (            \n            VMMetrics| where todatetime(metricsDate) == _ProcessDate\n                     | extend resourceId= strcat( RGFQN ,'/providers/Microsoft.Compute/virtualMachines/', virtualMachineName) \n                     | distinct resourceId\n        ))\n| project-rename resourceId=ErrorResourceID, subscriptionId=ErrorSubscription\n| extend filename = strcat(split(resourceId,'/')[2], '_', split(resourceId,'/')[4], '_', split(resourceId,'/')[8])\n| distinct  resourceId, filename, subscriptionId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "GetSPNSecret",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": {
                                "value": "@concat(pipeline().parameters.p_SPNSecretURL,'?api-version=7.0')",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_RerunReportingDate": {
                        "type": "string"
                    },
                    "p_SPNSecretURL": {
                        "type": "string",
                        "defaultValue": "https://kv-ccop-dv.vault.azure.net/secrets/CostMGMT-SPN-Secret/eafafff824ca4d8c8a8c604579b70ed1"
                    }
                },
                "variables": {
                    "ReportingDate": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "VM Metrics"
                },
                "annotations": [],
                "lastPublishTime": "2024-01-05T11:08:35Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/pline VM Metrics Sub Main  v4')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/BillingData LoadReferenceFiles_Backup')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Loads Reference data for Billing Data",
                "activities": [
                    {
                        "name": "ProductMeterCategory_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_ProductMeterCategory",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "Product",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Product",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FNFCategory",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "FNFCategory",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CCOP Approved",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CCOPApproved",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CostType",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CostType",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "IsPrePay",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "IsPrePay",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_ProductMeterCategory",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_ProductMeterCategory",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_ProductMeterCategory"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_ProductMeterCategory",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_ProductMeterCategory <|\nStaging_ProductMeterCategory \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ProductMeterCategory",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ProductMeterCategory_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ProductMeterCategory <| Staging_ProductMeterCategory \n| extend Product=tolower(Product),FNFCategory=tolower(FNFCategory),CCOPApproved=tobool(CCOPApproved),CostType=tolower(CostType),IsPrePay=tobool(IsPrePay)\n| distinct Product, FNFCategory, CCOPApproved, CostType, IsPrePay",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOBBudget_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_LOBBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "YearMonth",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "YearMonth",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Budget",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Budget",
                                            "type": "Int64",
                                            "physicalType": "long"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_LOBBudget",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_LOBBudget"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_LOBBudget",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ProductMeterCategory",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_LOBBudget <|\nStaging_LOBBudget \n| where 1==0\n",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOBBudget",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOBBudget_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace LOBBudget <|\nlet UnDefined = 'undefined';\nStaging_LOBBudget\n| extend Year=split(YearMonth, '-')[0],Month=split(YearMonth, '-')[1]\n| extend YearMonth = strcat(Year,'-', substring(strcat('0',Month), -2, 2))\n| project LineOfBusiness, YearMonth, Budget\n| join kind=leftouter LOB on $left.LineOfBusiness==$right.ID\n| extend LineOfBusiness = iif(isempty(ID),UnDefined,ShortName)\n| project LineOfBusiness, YearMonth, Budget",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationLKP_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_ApplicationLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "App ID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Application Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ApplicationName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppAbreviation",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppAbreviation",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ISApplication",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "IsApplication",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AvalibleForCostReporting",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AvailableForCostReporting",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "RTO",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "RTO",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "RPO",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "RPO",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Revenue",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Revenue",
                                            "type": "Double",
                                            "physicalType": "real"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ITAppOwner",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ITAppOWner",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "HostedInAzure",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "HostedInAzure",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppLOB",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppLOB",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_CSVText_referencedata",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.p_FileName_ApplicationLKP",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_ApplicationLKP"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_ApplicationLKP",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOBBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_ApplicationLKP <|\nStaging_ApplicationLKP \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationLKP",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ApplicationLKP_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ApplicationLKP <|\n Staging_ApplicationLKP\n| extend rpo_t = toint(split(RPO, ' ')[0]), HostedInAzure_t = tobool(HostedInAzure)\n| extend rpo_c = iif(isnull(rpo_t),toint(0),rpo_t), HostedInAzure_c = iif(isnull(HostedInAzure_t),false,HostedInAzure_t)\n| project AppID, ApplicationName, AppAbreviation, CostCenter, IsApplication = tobool(IsApplication), AvailableForCostReporting = tobool(AvailableForCostReporting),\n RTO=toint(RTO), RPO = rpo_c, Revenue, ITAppOWner, HostedInAzure= HostedInAzure_c, AppLOB",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationBudget_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Staging_ApplicationBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "SubscriptionGuid",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionGuid",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResourceGroupFQN",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ResourceGroupFQN",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": " AppCode",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppCode",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "BillingMonth",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "BillingMonth",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "BudgetAMT",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "BudgetAMT",
                                            "type": "Double",
                                            "physicalType": "real"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Year",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Year",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Month",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Month",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_CSVText_referencedata",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.p_FileName_ApplicationBudget",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_ApplicationBudget"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Staging_ApplicationBudget",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ApplicationLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_ApplicationBudget <|\nStaging_ApplicationBudget \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationBudget",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ApplicationBudget_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ApplicationBudget <|\n Staging_ApplicationBudget\n| extend YearMonth_t = strcat(Year,'-', substring(strcat('0',Month), -2, 2))\n| project SubscriptionGuid=tolower(SubscriptionGuid), SubscriptionName=tolower(SubscriptionName), ResourceGroupFQN=tolower(ResourceGroupFQN), AppCode=tolower(AppCode), AppName=tolower(AppName), BillingMonth = YearMonth_t, BudgetAMT,\nParentHostingSubHostingID=tolower(ParentHostingSubHostingID)",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "HostingLKP_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Staging_HostingLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentHostingID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentHostingServiceName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingServiceName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubHostingServiceID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubHostingServiceID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubHostingServiceName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubHostingServiceName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_HostingLKP",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_HostingLKP"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Staging_HostingLKP",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ApplicationBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_HostingLKP <|\nStaging_HostingLKP \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "HostingLKP",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "HostingLKP_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace HostingLKP <|\nStaging_HostingLKP\n| extend ParentHostingSubHostingID=toreal(ParentHostingSubHostingID),ParentHostingID=tolong(ParentHostingID),SubHostingServiceID=tolong(SubHostingServiceID),ParentHostingServiceName=tolower(ParentHostingServiceName),SubHostingServiceName=tolower(SubHostingServiceName)\n| project ParentHostingSubHostingID, ParentHostingID, ParentHostingServiceName, SubHostingServiceID, SubHostingServiceName",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Copy ITSMOCostMapping to ADX",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging_BillingConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "RGFQN",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ResourceGroupFQN",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubscritionGuid",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionGuid",
                                            "type": "Guid",
                                            "physicalType": "guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResourceGroupName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ResourceGroupName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "HostingService",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "HostingService",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppCode1",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppCode1",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "MigrationStatus",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "MigrationStatus",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CoreSubscription",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CoreSubscription",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "PrevFISSpend",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "PrevFISSpend",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "IsApplication",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "IsApplication",
                                            "type": "Boolean",
                                            "physicalType": "bool"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FinanceLOB",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "FinanceLOB",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_ITSMOCostMapping",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_BillingConfig"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Staging_BillingConfig to BillingConfig",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Copy ITSMOCostMapping to ADX",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace BillingConfig <| \nlet UnDefined = 'undefined';\nStaging_BillingConfig\n| extend SubscriptionGuid=toguid(tolower(SubscriptionGuid)),\nResourceGroupFQN=tolower(ResourceGroupFQN),\nSubscriptionName = trim_start(\" \",tolower(replace(@'./.', @'_\\1', SubscriptionName))),\nResourceGroupName=tolower(ResourceGroupName),\nHostingService=tolower(HostingService),\nAppCode1=tolower(AppCode1),\nAppName=tolower(AppName),\nCostCenter=tolower(CostCenter),\nLineOfBusiness=tolower(LineOfBusiness),\nMigrationStatus=tolower(MigrationStatus),\nCoreSubscription=tolower(CoreSubscription),\nPrevFISSpend=tolower(PrevFISSpend),\nIsApplication=iff(isempty(IsApplication) or isnull(IsApplication), false, IsApplication)\n| distinct ResourceGroupFQN, SubscriptionName, SubscriptionGuid, ResourceGroupName, HostingService, AppCode1, AppName, CostCenter, LineOfBusiness, MigrationStatus, CoreSubscription, PrevFISSpend, IsApplication,FinanceLOB\n| join kind=leftouter LOB on $left.LineOfBusiness==$right.ID\n| extend LineOfBusiness = iif(isempty(ID),UnDefined,ShortName)\n| join kind=leftouter (LOB | project ID1=ID, FullName1=FullName) on $left.FinanceLOB==$right.ID1\n| extend FinanceLOB = iif(isempty(ID1),UnDefined,FullName1)\n| join kind=leftouter (HostingLKP | project ParentHostingSubHostingID=tostring(ParentHostingSubHostingID), SubHostingServiceName) on $left.HostingService==$right.ParentHostingSubHostingID\n| extend HostingService = iif(isempty(ParentHostingSubHostingID), UnDefined, SubHostingServiceName)\n| distinct ResourceGroupFQN, SubscriptionName, SubscriptionGuid, ResourceGroupName, HostingService, AppCode1, AppName, CostCenter, LineOfBusiness, MigrationStatus, CoreSubscription, PrevFISSpend, IsApplication,FinanceLOB",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging_BillingConfig",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "HostingLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace Staging_BillingConfig <|\nBillingConfig \n| where 1==0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LoadFlexData_Staging",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear Staging_FlexData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "HttpReadSettings",
                                    "requestMethod": "GET"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "InstanceSizeFlexibilityGroup",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "InstanceSizeFlexibilityGroup",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ArmSkuName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ArmSkuName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Ratio",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Ratio",
                                            "type": "Double",
                                            "physicalType": "real"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "Flex_ISFRatio",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_FlexGroup"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear Staging_FlexData",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Staging_BillingConfig to BillingConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_FlexGroup<|\nStaging_FlexGroup\n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "FlexData",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LoadFlexData_Staging",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace FlexGroup <|\nStaging_FlexGroup",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOB_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_LOB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "ID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ShortName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ShortName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FullName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "FullName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_LOBLookUp",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_LOB"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_LOB",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_LOB <|\nStaging_LOB \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOB",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOB_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace LOB <| Staging_LOB \n| extend ShortName=tolower(ShortName),FullName=tolower(FullName)\n| project ID, ShortName, FullName",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_Container": {
                        "type": "string",
                        "defaultValue": "azure-cost-metric-data/referencedata"
                    },
                    "p_FileName_ProductMeterCategory": {
                        "type": "string",
                        "defaultValue": "ProductMeterCategory.xlsx"
                    },
                    "p_WorkSheetName_ProductMeterCategory": {
                        "type": "string",
                        "defaultValue": "ProductMeterCategory"
                    },
                    "p_FileName_ApplicationLKP": {
                        "type": "string",
                        "defaultValue": "ApplicationLKP.csv"
                    },
                    "p_FileName_ApplicationBudget": {
                        "type": "string",
                        "defaultValue": "ApplicationBudget.csv"
                    },
                    "p_FileName_CostMapping": {
                        "type": "string",
                        "defaultValue": "ITSMOCostMapping_Dev.xlsx"
                    },
                    "p_FileName_FlexData": {
                        "type": "string",
                        "defaultValue": "ISFRatio.csv"
                    },
                    "p_WorkSheetName_HostingLKP": {
                        "type": "string",
                        "defaultValue": "HostingLKP"
                    },
                    "p_WorkSheetName_LOBLookUp": {
                        "type": "string",
                        "defaultValue": "LOBLookUp"
                    },
                    "p_WorkSheetName_ITSMOCostMapping": {
                        "type": "string",
                        "defaultValue": "ITSMOCostMapping"
                    },
                    "p_WorkSheetName_LOBBudget": {
                        "type": "string",
                        "defaultValue": "LOBBudget"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-02-21T17:05:11Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/SFTP_ExcelSource')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/SFTP_CSVText_referencedata')]",
                "[concat(variables('factoryId'), '/datasets/Flex_ISFRatio')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/BillingData LoadReferenceFiles_Backup_03212023')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Loads Reference data for Billing Data",
                "activities": [
                    {
                        "name": "ProductMeterCategory_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_ProductMeterCategory",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "Product",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Product",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FNGCategory",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "FNGCategory",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CostType",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CostType",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "IsPrePay",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "IsPrePay",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ADX_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_ProductMeterCategory",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_ProductMeterCategory",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_ProductMeterCategory"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_ProductMeterCategory",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_ProductMeterCategory <|\nStaging_ProductMeterCategory \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ProductMeterCategory",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ProductMeterCategory_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ProductMeterCategory <| Staging_ProductMeterCategory \n| extend Product=tolower(Product),FNGCategory=tolower(FNGCategory),CostType=tolower(CostType),IsPrePay=tobool(IsPrePay)\n| distinct Product, FNGCategory, CostType, IsPrePay",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOBBudget_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_LOBBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "YearMonth",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "YearMonth",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Budget",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Budget",
                                            "type": "Int64",
                                            "physicalType": "long"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ADX_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_LOBBudget",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_LOBBudget"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_LOBBudget",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ProductMeterCategory",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_LOBBudget <|\nStaging_LOBBudget \n| where 1==0\n",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOBBudget",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOBBudget_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace LOBBudget <|\nlet UnDefined = 'undefined';\nStaging_LOBBudget\n| extend Year=split(YearMonth, '-')[0],Month=split(YearMonth, '-')[1]\n| extend YearMonth = strcat(Year,'-', substring(strcat('0',Month), -2, 2))\n| project LineOfBusiness, YearMonth, Budget\n| join kind=leftouter LOB on $left.LineOfBusiness==$right.ID\n| extend LineOfBusiness = iif(isempty(ID),UnDefined,ShortName)\n| project LineOfBusiness, YearMonth, Budget",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationLKP_Data",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_ApplicationLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "App ID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Application Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ApplicationName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppAbreviation",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppAbreviation",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ISApplication",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "IsApplication",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AvalibleForCostReporting",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AvailableForCostReporting",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "RTO",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "RTO",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "RPO",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "RPO",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Revenue",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Revenue",
                                            "type": "Double",
                                            "physicalType": "real"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ITAppOwner",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ITAppOWner",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "HostedInAzure",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "HostedInAzure",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppLOB",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppLOB",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_CSVText_referencedata",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.p_FileName_ApplicationLKP",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_ApplicationLKP"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_ApplicationLKP",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "LOBBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_ApplicationLKP <|\nStaging_ApplicationLKP \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationLKP",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "ApplicationLKP_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ApplicationLKP <|\n Staging_ApplicationLKP\n| extend rpo_t = toint(split(RPO, ' ')[0]), HostedInAzure_t = tobool(HostedInAzure)\n| extend rpo_c = iif(isnull(rpo_t),toint(0),rpo_t), HostedInAzure_c = iif(isnull(HostedInAzure_t),false,HostedInAzure_t)\n| project AppID, ApplicationName, AppAbreviation, CostCenter, IsApplication = tobool(IsApplication), AvailableForCostReporting = tobool(AvailableForCostReporting),\n RTO=toint(RTO), RPO = rpo_c, Revenue, ITAppOWner, HostedInAzure= HostedInAzure_c, AppLOB",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationBudget_Data",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Staging_ApplicationBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "SubscriptionGuid",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionGuid",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResourceGroupFQN",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ResourceGroupFQN",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": " AppCode",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppCode",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "BillingMonth",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "BillingMonth",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "BudgetAMT",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "BudgetAMT",
                                            "type": "Double",
                                            "physicalType": "real"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Year",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Year",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Month",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Month",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_CSVText_referencedata",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.p_FileName_ApplicationBudget",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_ApplicationBudget"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Staging_ApplicationBudget",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "ApplicationLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_ApplicationBudget <|\nStaging_ApplicationBudget \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ApplicationBudget",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "ApplicationBudget_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ApplicationBudget <|\n Staging_ApplicationBudget\n| extend YearMonth_t = strcat(Year,'-', substring(strcat('0',Month), -2, 2))\n| project SubscriptionGuid=tolower(SubscriptionGuid), SubscriptionName=tolower(SubscriptionName), ResourceGroupFQN=tolower(ResourceGroupFQN), AppCode=tolower(AppCode), AppName=tolower(AppName), BillingMonth = YearMonth_t, BudgetAMT,\nParentHostingSubHostingID=tolower(ParentHostingSubHostingID)",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "HostingLKP_Data",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Staging_HostingLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingSubHostingID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentHostingID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentHostingServiceName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ParentHostingServiceName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubHostingServiceID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubHostingServiceID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubHostingServiceName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubHostingServiceName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_HostingLKP",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_HostingLKP"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Staging_HostingLKP",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "ApplicationBudget",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_HostingLKP <|\nStaging_HostingLKP \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "HostingLKP",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "HostingLKP_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace HostingLKP <|\nStaging_HostingLKP\n| extend ParentHostingSubHostingID=toreal(ParentHostingSubHostingID),ParentHostingID=tolong(ParentHostingID),SubHostingServiceID=tolong(SubHostingServiceID),ParentHostingServiceName=tolower(ParentHostingServiceName),SubHostingServiceName=tolower(SubHostingServiceName)\n| project ParentHostingSubHostingID, ParentHostingID, ParentHostingServiceName, SubHostingServiceID, SubHostingServiceName",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Copy ITSMOCostMapping to ADX",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Reset Staging_BillingConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "SftpReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false,
                                    "disableChunking": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "RGFQN",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ResourceGroupFQN",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SubscritionGuid",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "SubscriptionGuid",
                                            "type": "Guid",
                                            "physicalType": "guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResourceGroupName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ResourceGroupName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "HostingService",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "HostingService",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppCode1",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppCode1",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "AppName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CostCenter",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "LineOfBusiness",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "MigrationStatus",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "MigrationStatus",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CoreSubscription",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "CoreSubscription",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "PrevFISSpend",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "PrevFISSpend",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "IsApplication",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "IsApplication",
                                            "type": "Boolean",
                                            "physicalType": "bool"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FinanceLOB",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "FinanceLOB",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SFTP_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_ITSMOCostMapping",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_BillingConfig"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Staging_BillingConfig to BillingConfig",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Copy ITSMOCostMapping to ADX",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace BillingConfig <| \nlet UnDefined = 'undefined';\nStaging_BillingConfig\n| extend SubscriptionGuid=toguid(tolower(SubscriptionGuid)),\nResourceGroupFQN=tolower(ResourceGroupFQN),\nSubscriptionName = trim_start(\" \",tolower(replace(@'./.', @'_\\1', SubscriptionName))),\nResourceGroupName=tolower(ResourceGroupName),\nHostingService=tolower(HostingService),\nAppCode1=tolower(AppCode1),\nAppName=tolower(AppName),\nCostCenter=tolower(CostCenter),\nLineOfBusiness=tolower(LineOfBusiness),\nMigrationStatus=tolower(MigrationStatus),\nCoreSubscription=tolower(CoreSubscription),\nPrevFISSpend=tolower(PrevFISSpend),\nIsApplication=iff(isempty(IsApplication) or isnull(IsApplication), false, IsApplication)\n| distinct ResourceGroupFQN, SubscriptionName, SubscriptionGuid, ResourceGroupName, HostingService, AppCode1, AppName, CostCenter, LineOfBusiness, MigrationStatus, CoreSubscription, PrevFISSpend, IsApplication,FinanceLOB\n| join kind=leftouter LOB on $left.LineOfBusiness==$right.ID\n| extend LineOfBusiness = iif(isempty(ID),UnDefined,ShortName)\n| join kind=leftouter (LOB | project ID1=ID, FullName1=FullName) on $left.FinanceLOB==$right.ID1\n| extend FinanceLOB = iif(isempty(ID1),UnDefined,FullName1)\n| join kind=leftouter (HostingLKP | project ParentHostingSubHostingID=tostring(ParentHostingSubHostingID), SubHostingServiceName) on $left.HostingService==$right.ParentHostingSubHostingID\n| extend HostingService = iif(isempty(ParentHostingSubHostingID), UnDefined, SubHostingServiceName)\n| distinct ResourceGroupFQN, SubscriptionName, SubscriptionGuid, ResourceGroupName, HostingService, AppCode1, AppName, CostCenter, LineOfBusiness, MigrationStatus, CoreSubscription, PrevFISSpend, IsApplication,FinanceLOB",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Reset Staging_BillingConfig",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "HostingLKP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": ".set-or-replace Staging_BillingConfig <|\nBillingConfig \n| where 1==0",
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LoadFlexData_Staging",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Clear Staging_FlexData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "HttpReadSettings",
                                    "requestMethod": "GET"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "InstanceSizeFlexibilityGroup",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "InstanceSizeFlexibilityGroup",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ArmSkuName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ArmSkuName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Ratio",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Ratio",
                                            "type": "Double",
                                            "physicalType": "real"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "Flex_ISFRatio",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ADX_Generic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_FlexGroup"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear Staging_FlexData",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Staging_BillingConfig to BillingConfig",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_FlexGroup<|\nStaging_FlexGroup\n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "FlexData",
                        "type": "AzureDataExplorerCommand",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "LoadFlexData_Staging",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace FlexGroup <|\nStaging_FlexGroup",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOB_Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Clear_Staging_LOB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureDataExplorerSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "ID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ID",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ShortName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "ShortName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FullName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "FullName",
                                            "type": "String",
                                            "physicalType": "string"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ADX_ExcelSource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.p_Container",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.p_FileName_CostMapping",
                                        "type": "Expression"
                                    },
                                    "WorkSheetName": {
                                        "value": "@pipeline().parameters.p_WorkSheetName_LOBLookUp",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "adx_BillingData",
                                "type": "DatasetReference",
                                "parameters": {
                                    "TableName": "Staging_LOB"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Clear_Staging_LOB",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Staging_LOB <|\nStaging_LOB \n| where 1==0",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "LOB",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "LOB_Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace LOB <| Staging_LOB \n| extend ShortName=tolower(ShortName),FullName=tolower(FullName)\n| project ID, ShortName, FullName",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "p_Container": {
                        "type": "string",
                        "defaultValue": "referencedata"
                    },
                    "p_FileName_ProductMeterCategory": {
                        "type": "string",
                        "defaultValue": "ProductMeterCategory.xlsx"
                    },
                    "p_WorkSheetName_ProductMeterCategory": {
                        "type": "string",
                        "defaultValue": "ProductMeterCategory"
                    },
                    "p_FileName_ApplicationLKP": {
                        "type": "string",
                        "defaultValue": "ApplicationLKP.csv"
                    },
                    "p_FileName_ApplicationBudget": {
                        "type": "string",
                        "defaultValue": "ApplicationBudget.csv"
                    },
                    "p_FileName_CostMapping": {
                        "type": "string",
                        "defaultValue": "ITSMOCostMapping.xlsx"
                    },
                    "p_FileName_FlexData": {
                        "type": "string",
                        "defaultValue": "ISFRatio.csv"
                    },
                    "p_WorkSheetName_HostingLKP": {
                        "type": "string",
                        "defaultValue": "HostingLKP"
                    },
                    "p_WorkSheetName_LOBLookUp": {
                        "type": "string",
                        "defaultValue": "LOBLookUp"
                    },
                    "p_WorkSheetName_ITSMOCostMapping": {
                        "type": "string",
                        "defaultValue": "ITSMOCostMapping"
                    },
                    "p_WorkSheetName_LOBBudget": {
                        "type": "string",
                        "defaultValue": "LOBBudget"
                    }
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-03-21T12:47:27Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ADX_ExcelSource')]",
                "[concat(variables('factoryId'), '/datasets/adx_BillingData')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]",
                "[concat(variables('factoryId'), '/datasets/SFTP_CSVText_referencedata')]",
                "[concat(variables('factoryId'), '/datasets/SFTP_ExcelSource')]",
                "[concat(variables('factoryId'), '/datasets/Flex_ISFRatio')]",
                "[concat(variables('factoryId'), '/datasets/ADX_Generic')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RefershPBITable_Backup_03212023')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Billing_Config_Extended",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace BillingConfig_Extended <|  \nlet UnDefined = 'undefined';\nlet System = 'system';\nlet Subscription = materialize(\nBillingData\n| project subscriptionId, resourceGroup = iff(isempty(resourceGroup),System,resourceGroup),resourceName\n| distinct subscriptionId, resourceGroup,resourceName\n| sort by subscriptionId asc, resourceGroup asc,resourceName asc\n| extend PK_Subscription= row_number()\n| project subscriptionId, resourceGroup,resourceName,PK_Subscription //,PK_Subscription_RG\n);\nlet Subscription_RG = materialize(\nBillingData\n| project subscriptionId, resourceGroup = iff(isempty(resourceGroup),System,resourceGroup)\n| distinct subscriptionId, resourceGroup\n| sort by subscriptionId asc, resourceGroup asc\n| extend PK_Subscription_RG= row_number()\n| project subscriptionId, resourceGroup,PK_Subscription_RG\n);\nlet SubscriptionName = materialize(BillingData \n| summarize arg_max(billingDate,subscriptionName, billingAccountId, billingAccountName, accountName, accountOwnerId) by subscriptionId \n| project-away billingDate);\nlet ResourceTag = materialize (BillingData\n| where billingDate > ago(180d)\n| where isnotempty(tags)\n| extend RGFQN = strcat(subscriptionId,'/',resourceGroup,'/',resourceName)\n| summarize arg_max(billingDate, subscriptionId, resourceGroup,resourceName) by RGFQN, tags\n| extend tag = parse_json(tags)\n| project RGFQN,subscriptionId, resourceGroup,resourceName,environment=tostring(coalesce(tag.env,tag.environment)),application_name=tostring(coalesce(tag.app1,tag.application)), application_name_2=tostring(tag.app2),primary_app_owner=tostring(tag.owner1),backup_app_owner=tostring(tag.owner2),busines_unit=tostring(tag.bu),budget_center_code=tostring(tag.bc),public_or_private=tostring(tag.public),creator_name=tostring(tag.createdby),ticket_number=tostring(tag.requestid),date_created=tostring(tag.datecreated),expiraton_date=tostring(tag.expiratondate),billingDate,tags\n//| extend appcodeparsed=split(appcode, '|')[0]\n//| extend appcode=tolong(appcodeparsed), parent_hostingid=toreal(parent_hostingid), lineofbusiness=toint(lineofbusiness)//, financelob=toint(financelob) \n//| project-away appcodeparsed\n//| extend lineofbusiness=tostring(lineofbusiness), financelob=tostring(financelob)\n//| extend financelob=iif(isempty(financelob),UnDefined,financelob)\n//| where isnotempty(lineofbusiness)\n| summarize Max_BillingDate=max(billingDate) by RGFQN,subscriptionId, resourceGroup,resourceName,environment,application_name,application_name_2,primary_app_owner,backup_app_owner,busines_unit,budget_center_code,public_or_private,creator_name,ticket_number,date_created,expiraton_date,tags\n//costcenter, servicetowerid, appcode,appcode_2, appid, parent_hostingid,lineofbusiness,financelob,subscriptionId, resourceGroup,resourceName,RGFQN,businessservice, clientservice,resourceretention,ritm,requestor_email,creator_name,subnet,subnet2,subnet3,subnet4,subnetaks,subnetapim,subnetag,subnetalb,subnetams,tags\n| sort by RGFQN, Max_BillingDate, subscriptionId, resourceGroup,resourceName,environment,application_name,application_name_2,primary_app_owner,backup_app_owner,busines_unit,budget_center_code,public_or_private,creator_name,ticket_number,date_created,expiraton_date,tags desc\n//| sort by RGFQN, Max_BillingDate, lineofbusiness, appcode,appcode_2, appid, parent_hostingid, servicetowerid, costcenter,financelob,businessservice, clientservice,resourceretention,ritm,requestor_email,creator_name,subnet,subnet2,subnet3,subnet4,subnetaks,subnetapim,subnetag,subnetalb,subnetams,tags desc\n| extend Rank=row_number(1, prev(RGFQN) != RGFQN)\n| where Rank ==  1\n//| join kind=leftouter HostingLKP_Ram on $left.parent_hostingid == $right.ParentHostingSubHostingID\n| join kind=leftouter LOB on $left.busines_unit==$right.FullName\n| project Environment=tolower(environment),subscriptionId, resourceGroup,resourceName,environment,application_name,application_name_2,primary_app_owner,backup_app_owner,busines_unit,budget_center_code,public_or_private,creator_name,ticket_number,date_created,expiraton_date,tags,source = 'ResourceTag'\n//, AppCode = tostring(appcode),AppCode2 = tostring(appcode_2), AppName = appid, LineOfBusiness = ShortName, IsApplication = iif(isnotempty(servicetowerid),false, true),\n//costcenter, servicetowerid,subscriptionId, resourceGroup,resourceName,financelob,businessservice, clientservice,resourceretention,ritm,requestor_email,creator_name,subnet,subnet2,subnet3,subnet4,subnetaks,subnetapim,subnetag,subnetalb,subnetams,tags,Source = 'ResourceTag'\n);\n//let BillingConfigView = materialize(\n    //BillingConfig\n    //| project subscriptionId=tostring(SubscriptionGuid), \n    //Environment= iif(isempty(HostingService),UnDefined,HostingService),\n    //AppCode = iif(isempty(AppCode1),UnDefined,AppCode1),\n    //AppName = iif(isempty(AppName),UnDefined,AppName),\n    //resourceGroup=iff(isempty(ResourceGroupName),System, ResourceGroupName),\n    //LineOfBusiness=iif(LineOfBusiness=='#n/a',UnDefined,LineOfBusiness),\n    //financelob=iif(isempty(FinanceLOB),UnDefined,FinanceLOB),\n    //IsApplication,\n    //Source=\"Config\"\n    //| extend AppCode2=UnDefined\n    //| distinct Environment,AppCode,AppCode2,AppName,LineOfBusiness,IsApplication,subscriptionId,resourceGroup,financelob,Source\n//);\n//let TagandConfig = materialize(ResourceTag\n//| union (\n    //BillingData\n    //| project subscriptionId, resourceGroup = iff(isempty(resourceGroup),System,resourceGroup),resourceName\n    //| distinct subscriptionId, resourceGroup,resourceName\n    //| join kind=inner BillingConfigView on  $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup\n    //| join kind=leftanti ResourceTag on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup and $left.resourceName == $right.resourceName\n    //| project-away subscriptionId1, resourceGroup1\n//));\nResourceTag\n| union (\n    BillingData\n    | project subscriptionId, resourceGroup = iff(isempty(resourceGroup),System,resourceGroup),resourceName\n    | distinct subscriptionId, resourceGroup,resourceName\n    | extend resourceGroup=iff(isempty(resourceGroup),System,resourceGroup)\n    | join kind=leftanti ResourceTag on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup and $left.resourceName == $right.resourceName\n    | project Environment=UnDefined,application_name=UnDefined,application_name_2=UnDefined,subscriptionId, resourceGroup,resourceName,Source='Usage'\n)\n| join kind=inner Subscription on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup and $left.resourceName == $right.resourceName\n| join kind=inner Subscription_RG on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup\n| join kind=inner SubscriptionName on $left.subscriptionId == $right.subscriptionId\n| join kind=leftouter LOB on $left.busines_unit==$right.FullName\n| project Environment=iff(isempty(Environment),UnDefined,Environment), application_name=iff(isempty(application_name),UnDefined,application_name),application_name_2=iff(isempty(application_name_2),UnDefined,application_name_2), \nPK_Subscription=tostring(PK_Subscription),PK_Subscription_RG=tostring(PK_Subscription_RG), resourceGroup, resourceName,subscriptionId, subscriptionName, billingAccountId, billingAccountName, accountName, \naccountOwnerId,Source,primary_app_owner,backup_app_owner,busines_unit=iff(isempty(busines_unit),UnDefined,busines_unit),budget_center_code,public_or_private,creator_name,ticket_number,date_created,expiraton_date,tags\n//| count",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "PBIQuery_Aggregated",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "ProductDetail",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace Billing_PBI <| \nlet UnDefined = 'undefined';\nlet System = 'system';\n//let EndOfLastWeek = startofweek(now());\nlet EndOfLastWeek = now();\nlet DateFilter = ago(2000d);\nlet Daytogroup = (_billingdate:datetime) {\n    let _endOfWeek = iif(dayofweek(_billingdate)==0d,_billingdate, todatetime(format_datetime(datetime_add('Day', 1, endofweek(_billingdate)),\"yyyy-MM-dd\")));\n    let _endOfWeekByMonth = iif(_endOfWeek > endofmonth(_billingdate),todatetime(format_datetime(endofmonth(_billingdate),\"yyyy-MM-dd\")),_endOfWeek);\n    _endOfWeekByMonth\n};\nlet BillingDataView = materialize(\nBillingConfig_Extended\n| join kind= inner (BillingData\n| where billingDate > DateFilter and billingDate <= EndOfLastWeek\n| extend subscriptionId, resourceGroup = iff(isempty(resourceGroup),System,resourceGroup),resourceName,product,location=resourceLocation,\nBillingDate_T = Daytogroup(billingDate)\n| project subscriptionId,resourceGroup,product,location,BillingDate_T,billingDate,chargeType, frequency,resourceId,cost,quantity, effectivePrice, resourceName,publisherType,partNumber\n) on $left.subscriptionId == $right.subscriptionId and $left.resourceGroup == $right.resourceGroup and $left.resourceName == $right.resourceName\n| project subscriptionId,resourceGroup,product,location,BillingDate_T,billingDate,chargeType, frequency,resourceId,cost,quantity, effectivePrice, resourceName,publisherType,partNumber,PK_Subscription\n);\nProductDetail\n| join kind=inner BillingDataView\non $left.Product == $right.product and $left.partNumber == $right.partNumber\n| extend billingDate_W = iif(billingDate > startofmonth(ago(60d)),billingDate,iif(billingDate < endofmonth(ago(560d)),todatetime(format_datetime(endofmonth(billingDate),\"yyyy-MM-dd\")),BillingDate_T)), //up to 60 days daily, upto 560 days weekly rest monthly\nreservationId=iif(chargeType==\"purchase\" and frequency==\"recurring\", split(resourceId, '/')[4], \"\")\n| summarize hint.strategy = shuffle TotalCost = sum(cost), Quantity = sum(quantity), effectivePrice=avg(effectivePrice) by Region=location,  \n BillingDate = billingDate_W ,PK_Subscription,resourceName,publisherType,chargeType,reservationId, ProdID",
                                "type": "Expression"
                            },
                            "commandTimeout": "02:00:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ProductDetail",
                        "type": "AzureDataExplorerCommand",
                        "dependsOn": [
                            {
                                "activity": "Billing_Config_Extended",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": ".set-or-replace ProductDetail <| \nlet UnDefined = 'undefined';\nlet BillingDataView = materialize(\nBillingData\n| extend mde = parse_json(meterDetails)\n| project Product=product, partNumber, metername = tostring(mde.metername),\nMeterCategory=tostring(mde.metercategory),metersubcategory=tostring(mde.metersubcategory),\nunitofmeasure=tostring(mde.unitofmeasure),billingDate\n| distinct Product, partNumber, MeterCategory,metersubcategory,billingDate\n| summarize arg_max(billingDate, MeterCategory,metersubcategory) by Product, partNumber\n| sort by Product, partNumber asc\n| extend ProdID=row_number()\n| project Product,partNumber,MeterCategory,ProdID,metersubcategory\n);\nProductMeterCategory\n| project IsPrePay,Product,FNGCategory,CostType\n| join kind=rightouter BillingDataView\non Product\n| extend MeterCategory=iif(isempty( MeterCategory),UnDefined,MeterCategory),\nFNGCategory=iif(isempty( FNGCategory),UnDefined,FNGCategory),\nCostType = iif(isempty(CostType),UnDefined,CostType),\nIsPrePay=iif(isnull(IsPrePay),false, IsPrePay),Product=Product1\n| distinct Product,partNumber,IsPrePay,MeterCategory,metersubcategory,FNGCategory,CostType\n| sort by Product, partNumber asc\n| extend ProdID=row_number()\n| project Product,partNumber,NonReserved=IsPrePay,MeterCategory,FNGCategory,CostType,ProdID,metersubcategory",
                                "type": "Expression"
                            },
                            "commandTimeout": "00:20:00"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDataExplorer_ACTSADX01_CostManagement",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "Billing"
                },
                "annotations": [],
                "lastPublishTime": "2024-03-21T13:01:10Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_ACTSADX01_CostManagement')]"
            ]
        }
    ]
}